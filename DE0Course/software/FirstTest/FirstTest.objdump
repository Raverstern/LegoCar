
FirstTest.elf:     file format elf32-littlenios2
FirstTest.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000d654 memsz 0x0000d654 flags r-x
    LOAD off    0x0000e674 vaddr 0x0000d674 paddr 0x0000f194 align 2**12
         filesz 0x00001b20 memsz 0x00001b20 flags rw-
    LOAD off    0x00010cb4 vaddr 0x00010cb4 paddr 0x00010cb4 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000d164  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000035c  0000d318  0000d318  0000e318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b20  0000d674  0000f194  0000e674  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  00010cb4  00010cb4  00010cb4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00010194  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d38  00000000  00000000  000101c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001476  00000000  00000000  00010ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000238a1  00000000  00000000  0001236e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007db2  00000000  00000000  00035c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001482f  00000000  00000000  0003d9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a0c  00000000  00000000  000521f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000227a  00000000  00000000  00053bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bf55  00000000  00000000  00055e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00061dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00061e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000658d8  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000658db  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000658e7  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000658e8  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000658e9  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000658f4  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000658ff  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000008  00000000  00000000  0006590a  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001c  00000000  00000000  00065912  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0008990c  00000000  00000000  0006592e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000d318 l    d  .rodata	00000000 .rodata
0000d674 l    d  .rwdata	00000000 .rwdata
00010cb4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 adc_spi_read.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000042c l     F .text	00000058 __sprint_r
0000d396 l     O .rodata	00000010 blanks.3452
0000d386 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000024a8 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00003ed0 l     F .text	00000058 std
00003fdc l     F .text	00000008 __fp_lock
00003fe4 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000d674 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0000f160 l     O .rwdata	00000004 charset
0000d3cc l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000d514 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00008404 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00009530 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00009e6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00009ecc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00009fd0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000a0f4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000a1d4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000a334 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000a564 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0000f184 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000a84c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e030 l     O .rwdata	00001060 jtag_uart_0
0000f090 l     O .rwdata	000000c4 uart_0
0000a96c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000abac l     F .text	00000228 altera_avalon_jtag_uart_irq
0000add4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000b450 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0000b710 l     F .text	0000009c altera_avalon_uart_irq
0000b7ac l     F .text	000000e0 altera_avalon_uart_rxirq
0000b88c l     F .text	0000015c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0000bc78 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0000bea0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000c280 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000c690 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000c7e0 l     F .text	000000f8 alt_file_locked
0000ca64 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000d100 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000d2b4 l     F .text	00000040 alt_sim_halt
00005cc0 g     F .text	00000094 _mprec_log10
00005dac g     F .text	00000088 __any_on
000075d8 g     F .text	00000070 _isatty_r
0000d4ec g     O .rodata	00000028 __mprec_tinytens
0000a394 g     F .text	0000006c alt_main
00010d10 g     O .bss	00000100 alt_irq
00007648 g     F .text	00000078 _lseek_r
0000f194 g       *ABS*	00000000 __flash_rwdata_start
00008f24 g     F .text	00000088 __eqdf2
00010fa0 g       *ABS*	00000000 __alt_heap_start
000003b4 g     F .text	00000044 printf
0000701c g     F .text	00000068 __sseek
00003f38 g     F .text	000000a4 __sinit
00004c44 g     F .text	00000084 _setlocale_r
00004038 g     F .text	0000009c __sfmoreglue
0000a420 g     F .text	00000020 __malloc_unlock
0000573c g     F .text	000000e0 memmove
00004028 g     F .text	00000010 _cleanup
00005e34 g     F .text	000000bc _Balloc
00009034 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00007564 g     F .text	00000074 _fstat_r
00010ccc g     O .bss	00000004 errno
00010cd4 g     O .bss	00000004 alt_argv
00017154 g       *ABS*	00000000 _gp
0000a6f8 g     F .text	00000030 usleep
0000deb0 g     O .rwdata	00000180 alt_fd_list
0000cc88 g     F .text	00000094 alt_find_dev
0000569c g     F .text	000000a0 memcpy
0000401c g     F .text	0000000c _cleanup_r
000091cc g     F .text	000000f8 __floatsidf
0000c768 g     F .text	00000078 alt_io_redirect
00009144 g     F .text	00000088 __ltdf2
0000d318 g       *ABS*	00000000 __DTOR_END__
00005c10 g     F .text	000000b0 __ratio
0000afec g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000003f8 g     F .text	00000034 _printf_r
02004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000966c g     F .text	00000008 __udivsi3
0000a030 g     F .text	000000c4 isatty
0000d3fc g     O .rodata	000000c8 __mprec_tens
00004c20 g     F .text	00000008 __locale_charset
00010cc0 g     O .bss	00000004 __malloc_top_pad
0000f15c g     O .rwdata	00000004 __mb_cur_max
00004c28 g     F .text	0000000c _localeconv_r
00006598 g     F .text	0000003c __i2b
00004604 g     F .text	0000049c __sfvwrite_r
00006fa4 g     F .text	00000070 _sbrk_r
000076c0 g     F .text	00000078 _read_r
0000da74 g     O .rwdata	0000000c __lc_ctype
0000f17c g     O .rwdata	00000004 alt_max_fd
00009b6c g     F .text	00000138 __unpack_d
00007440 g     F .text	00000110 _fclose_r
00003e9c g     F .text	00000034 fflush
00010cc4 g     O .bss	00000004 __malloc_max_sbrked_mem
000001f0 g     F .text	00000104 ADC_Read
00008894 g     F .text	00000074 __adddf3
00005af0 g     F .text	00000120 __b2d
00007da4 g     F .text	00000660 __umoddi3
0000a240 g     F .text	000000f4 lseek
0000f158 g     O .rwdata	00000004 _global_impure_ptr
00006940 g     F .text	000005f4 _realloc_r
00010fa0 g       *ABS*	00000000 __bss_end
0000c598 g     F .text	000000f8 alt_iic_isr_register
0000cb5c g     F .text	0000010c alt_tick
00007738 g     F .text	0000066c __udivdi3
0000d4c4 g     O .rodata	00000028 __mprec_bigtens
00006820 g     F .text	00000120 __s2b
0000939c g     F .text	00000194 __floatunsidf
00005a10 g     F .text	00000060 __mcmp
0000b648 g     F .text	000000c8 altera_avalon_uart_init
00004004 g     F .text	00000018 __fp_lock_all
0000c550 g     F .text	00000048 alt_ic_irq_enabled
0000cac4 g     F .text	00000098 alt_alarm_stop
00010cdc g     O .bss	00000004 alt_irq_active
000000ec g     F .exceptions	000000c8 alt_irq_handler
0000de88 g     O .rwdata	00000028 alt_dev_null
0000c1b0 g     F .text	0000001c alt_dcache_flush_all
000058dc g     F .text	00000070 __hi0bits
000092c4 g     F .text	000000d8 __fixdfsi
0000f194 g       *ABS*	00000000 __ram_rwdata_end
0000f174 g     O .rwdata	00000008 alt_dev_list
0000a728 g     F .text	00000124 write
0000d674 g       *ABS*	00000000 __ram_rodata_end
00009ef8 g     F .text	000000d8 fstat
00006700 g     F .text	00000120 __pow5mult
00010cb4 g     O .bss	00000004 __nlocale_changed
00009674 g     F .text	00000008 __umodsi3
00010fa0 g       *ABS*	00000000 end
0000bcd8 g     F .text	000001c8 altera_avalon_uart_write
0000aaec g     F .text	000000c0 altera_avalon_jtag_uart_init
0000d314 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
0000b4c0 g     F .text	00000090 alt_avalon_timer_sc_init
0000b5a8 g     F .text	00000058 altera_avalon_uart_write_fd
000097d8 g     F .text	00000080 __clzsi2
0000b600 g     F .text	00000048 altera_avalon_uart_close_fd
0000b210 g     F .text	00000240 altera_avalon_jtag_uart_write
00003f28 g     F .text	00000004 __sfp_lock_acquire
000055b8 g     F .text	000000e4 memchr
00000484 g     F .text	00001ec4 ___vfprintf_internal_r
000042f0 g     F .text	00000314 _free_r
0000d104 g     F .text	000001b0 __call_exitprocs
00010cb8 g     O .bss	00000004 __mlocale_changed
0000f168 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
00010ce0 g     O .bss	00000004 _alt_tick_rate
000061f8 g     F .text	0000014c __lshift
00010ce4 g     O .bss	00000004 _alt_nticks
0000a440 g     F .text	00000124 read
0000a8e0 g     F .text	0000008c alt_sys_init
0000cfcc g     F .text	00000134 __register_exitproc
00006344 g     F .text	00000254 __multiply
0000ae84 g     F .text	00000074 altera_avalon_jtag_uart_close
0000967c g     F .text	00000038 __mulsi3
0000d674 g       *ABS*	00000000 __ram_rwdata_start
0000d318 g       *ABS*	00000000 __ram_rodata_start
00010ce8 g     O .bss	00000028 __malloc_current_mallinfo
00005ef0 g     F .text	0000017c __d2b
0000a9a4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000ce3c g     F .text	000000d0 alt_get_fd
0000c054 g     F .text	0000015c alt_busy_sleep
00009ca4 g     F .text	000000c8 __fpcmp_parts_d
000073d0 g     F .text	00000070 _close_r
0000cf58 g     F .text	00000074 memcmp
0000aa54 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00010fa0 g       *ABS*	00000000 __alt_stack_base
0000aa9c g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0000236c g     F .text	0000013c __swsetup_r
00008ccc g     F .text	00000258 __divdf3
000040d4 g     F .text	000000f0 __sfp
00005d54 g     F .text	00000058 __copybits
0000da80 g     O .rwdata	00000408 __malloc_av_
00003f34 g     F .text	00000004 __sinit_lock_release
00008908 g     F .text	000003c4 __muldf3
00007100 g     F .text	00000060 __sread
0000cd1c g     F .text	00000120 alt_find_file
0000c1cc g     F .text	000000b4 alt_dev_llist_insert
0000a400 g     F .text	00000020 __malloc_lock
0000a63c g     F .text	000000bc sbrk
00003ca0 g     F .text	000001fc _fflush_r
00007308 g     F .text	000000c8 _calloc_r
00010cb4 g       *ABS*	00000000 __bss_start
0000581c g     F .text	00000098 memset
000002f4 g     F .text	000000c0 main
00010cd8 g     O .bss	00000004 alt_envp
00010cc8 g     O .bss	00000004 __malloc_max_total_mem
0000a9fc g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00007014 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
00007550 g     F .text	00000014 fclose
00010e10 g     O .bss	00000190 _atexit0
000026ec g     F .text	000015b4 _dtoa_r
00004e78 g     F .text	00000740 _malloc_r
0000f180 g     O .rwdata	00000004 alt_errno
00004b68 g     F .text	000000b8 _fwalk
000095ac g     F .text	00000060 __divsi3
0000d520 g     O .rodata	00000014 __thenan_df
000041c4 g     F .text	0000012c _malloc_trim_r
0000d318 g       *ABS*	00000000 __CTOR_END__
00007160 g     F .text	000000bc strcmp
0000d318 g       *ABS*	00000000 __flash_rodata_start
0000d318 g       *ABS*	00000000 __DTOR_LIST__
00008fac g     F .text	00000088 __nedf2
0000a8ac g     F .text	00000034 alt_irq_init
0000a5c4 g     F .text	00000078 alt_release_fd
0000d534 g     O .rodata	00000100 __clz_tab
00010cbc g     O .bss	00000004 _PathLocale
0000cf0c g     F .text	00000014 atexit
00007290 g     F .text	00000078 _write_r
00004cc8 g     F .text	0000001c setlocale
0000f154 g     O .rwdata	00000004 _impure_ptr
00010cd0 g     O .bss	00000004 alt_argc
0000c344 g     F .text	00000064 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
00005a70 g     F .text	00000080 __ulp
00006f34 g     F .text	00000040 __isinfd
00003fec g     F .text	00000018 __fp_unlock_all
0000f16c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00004c34 g     F .text	00000010 localeconv
0000c3c4 g     F .text	00000050 alt_ic_isr_register
0000f194 g       *ABS*	00000000 _edata
0000b550 g     F .text	00000058 altera_avalon_uart_read_fd
00010fa0 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000aef8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000c4b0 g     F .text	000000a0 alt_ic_irq_disable
00007084 g     F .text	0000007c __swrite
0000f164 g     O .rwdata	00000004 __malloc_trim_threshold
0000cc68 g     F .text	00000020 altera_nios2_qsys_irq_init
0000cf20 g     F .text	00000038 exit
00004aa0 g     F .text	000000c8 _fwalk_reent
0000606c g     F .text	0000018c __mdiff
0000960c g     F .text	00000060 __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00003f2c g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
0000b9e8 g     F .text	00000060 altera_avalon_uart_close
0000d2f4 g     F .text	00000020 _exit
00006f74 g     F .text	00000030 __isnand
0000bf00 g     F .text	00000154 alt_alarm_start
000096b4 g     F .text	00000124 __muldi3
00004ce4 g     F .text	00000194 __smakebuf_r
0000721c g     F .text	00000074 strlen
0000c8d8 g     F .text	0000018c open
000090bc g     F .text	00000088 __gedf2
0000c3a8 g     F .text	0000001c alt_icache_flush_all
0000f188 g     O .rwdata	00000004 alt_priority_mask
0000c414 g     F .text	0000009c alt_ic_irq_enable
00002348 g     F .text	00000024 __vfprintf_internal
0000ba48 g     F .text	00000230 altera_avalon_uart_read
00008814 g     F .text	00000080 __subdf3
0000594c g     F .text	000000c4 __lo0bits
0000f18c g     O .rwdata	00000008 alt_alarm_list
0000c2e0 g     F .text	00000064 _do_ctors
00009d6c g     F .text	00000100 close
0000a154 g     F .text	00000080 alt_load
00009858 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
00003f30 g     F .text	00000004 __sinit_lock_acquire
000065d4 g     F .text	0000012c __multadd
000058b4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406d14 	ori	at,at,436
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18c34404 	addi	r3,r3,3344
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18c34404 	addi	r3,r3,3344
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d69c5514 	ori	gp,gp,29012
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	10832d14 	ori	r2,r2,3252

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18c3e814 	ori	r3,r3,4000

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000a1540 	call	a154 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000a3940 	call	a394 <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <ADC_Read>:
#include "adc_spi_read.h"

#define START_FLAG  0x8000
#define DONE_FLAG   0x8000

alt_u16 ADC_Read(alt_u8 NextChannel){
     1f0:	defff904 	addi	sp,sp,-28
     1f4:	dfc00615 	stw	ra,24(sp)
     1f8:	df000515 	stw	fp,20(sp)
     1fc:	df000504 	addi	fp,sp,20
     200:	e13fff05 	stb	r4,-4(fp)
    alt_u16 Data16, DigitalValue = 0;
     204:	e03ffe0d 	sth	zero,-8(fp)
    bool bDone = FALSE;
     208:	e03ffd15 	stw	zero,-12(fp)
    const int nMaxWait = 1000;
     20c:	0080fa04 	movi	r2,1000
     210:	e0bffc15 	stw	r2,-16(fp)
    int nWaitCnt = 0;
     214:	e03ffb15 	stw	zero,-20(fp)
    
    // start
    Data16 = NextChannel;
     218:	e0bfff03 	ldbu	r2,-4(fp)
     21c:	e0bffe8d 	sth	r2,-6(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
     220:	e0fffe8b 	ldhu	r3,-6(fp)
     224:	00808074 	movhi	r2,513
     228:	10a45204 	addi	r2,r2,-28344
     22c:	10c00035 	stwio	r3,0(r2)
    Data16 |= START_FLAG;
     230:	e0fffe8b 	ldhu	r3,-6(fp)
     234:	00a00004 	movi	r2,-32768
     238:	1884b03a 	or	r2,r3,r2
     23c:	e0bffe8d 	sth	r2,-6(fp)
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
     240:	e0fffe8b 	ldhu	r3,-6(fp)
     244:	00808074 	movhi	r2,513
     248:	10a45204 	addi	r2,r2,-28344
     24c:	10c00035 	stwio	r3,0(r2)
    usleep(10000); // wait 10ms
     250:	0109c404 	movi	r4,10000
     254:	000a6f80 	call	a6f8 <usleep>
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
     258:	00000a06 	br	284 <ADC_Read+0x94>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
     25c:	00808074 	movhi	r2,513
     260:	10a45204 	addi	r2,r2,-28344
     264:	10800037 	ldwio	r2,0(r2)
     268:	e0bffe8d 	sth	r2,-6(fp)
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
     26c:	e0bffe8b 	ldhu	r2,-6(fp)
     270:	10bfffcc 	andi	r2,r2,65535
     274:	10a0001c 	xori	r2,r2,32768
     278:	10a00004 	addi	r2,r2,-32768
     27c:	1004d7fa 	srli	r2,r2,31
     280:	e0bffd15 	stw	r2,-12(fp)
    Data16 |= START_FLAG;
    IOWR(ADC_SPI_READ_BASE, 0, Data16);
    usleep(10000); // wait 10ms
    
    // wait done
    while(!bDone && nWaitCnt++ <= nMaxWait){
     284:	e0bffd17 	ldw	r2,-12(fp)
     288:	1004c03a 	cmpne	r2,r2,zero
     28c:	10000a1e 	bne	r2,zero,2b8 <ADC_Read+0xc8>
     290:	e0fffb17 	ldw	r3,-20(fp)
     294:	e0bffc17 	ldw	r2,-16(fp)
     298:	10c4403a 	cmpge	r2,r2,r3
     29c:	1007883a 	mov	r3,r2
     2a0:	e0bffb17 	ldw	r2,-20(fp)
     2a4:	10800044 	addi	r2,r2,1
     2a8:	e0bffb15 	stw	r2,-20(fp)
     2ac:	18803fcc 	andi	r2,r3,255
     2b0:	1004c03a 	cmpne	r2,r2,zero
     2b4:	103fe91e 	bne	r2,zero,25c <ADC_Read+0x6c>
        Data16 = IORD(ADC_SPI_READ_BASE,0);
        bDone = (Data16 & DONE_FLAG)?TRUE:FALSE;
    }
    
    if (bDone)
     2b8:	e0bffd17 	ldw	r2,-12(fp)
     2bc:	1005003a 	cmpeq	r2,r2,zero
     2c0:	1000031e 	bne	r2,zero,2d0 <ADC_Read+0xe0>
        DigitalValue = Data16 & 0xFFF; // 12 bits
     2c4:	e0bffe8b 	ldhu	r2,-6(fp)
     2c8:	1083ffcc 	andi	r2,r2,4095
     2cc:	e0bffe0d 	sth	r2,-8(fp)
    
    // stop
    IOWR(ADC_SPI_READ_BASE, 0, 0);
     2d0:	00808074 	movhi	r2,513
     2d4:	10a45204 	addi	r2,r2,-28344
     2d8:	10000035 	stwio	zero,0(r2)
    
    return DigitalValue;
     2dc:	e0bffe0b 	ldhu	r2,-8(fp)
}
     2e0:	e037883a 	mov	sp,fp
     2e4:	dfc00117 	ldw	ra,4(sp)
     2e8:	df000017 	ldw	fp,0(sp)
     2ec:	dec00204 	addi	sp,sp,8
     2f0:	f800283a 	ret

000002f4 <main>:
#include "system.h"
#include "io.h"
#include "stdio.h"
#include "adc_spi_read.h"

int main() {
     2f4:	defffb04 	addi	sp,sp,-20
     2f8:	dfc00415 	stw	ra,16(sp)
     2fc:	df000315 	stw	fp,12(sp)
     300:	df000304 	addi	fp,sp,12
    int ADC_Val,i,led;
    led=0xaa;
     304:	00802a84 	movi	r2,170
     308:	e0bffd15 	stw	r2,-12(fp)
    while(1) {
    	for(i=0;i<8;i++)
     30c:	e03ffe15 	stw	zero,-8(fp)
     310:	00000c06 	br	344 <main+0x50>
    	{
    		ADC_Val=ADC_Read(i);
     314:	e0bffe17 	ldw	r2,-8(fp)
     318:	11003fcc 	andi	r4,r2,255
     31c:	00001f00 	call	1f0 <ADC_Read>
     320:	10bfffcc 	andi	r2,r2,65535
     324:	e0bfff15 	stw	r2,-4(fp)
        	printf("ADC value %d",ADC_Val);
     328:	01000074 	movhi	r4,1
     32c:	2134c604 	addi	r4,r4,-11496
     330:	e17fff17 	ldw	r5,-4(fp)
     334:	00003b40 	call	3b4 <printf>

int main() {
    int ADC_Val,i,led;
    led=0xaa;
    while(1) {
    	for(i=0;i<8;i++)
     338:	e0bffe17 	ldw	r2,-8(fp)
     33c:	10800044 	addi	r2,r2,1
     340:	e0bffe15 	stw	r2,-8(fp)
     344:	e0bffe17 	ldw	r2,-8(fp)
     348:	10800210 	cmplti	r2,r2,8
     34c:	103ff11e 	bne	r2,zero,314 <main+0x20>
    	{
    		ADC_Val=ADC_Read(i);
        	printf("ADC value %d",ADC_Val);
    	}
    	if(led==0xaa)
     350:	e0bffd17 	ldw	r2,-12(fp)
     354:	10802a98 	cmpnei	r2,r2,170
     358:	1000071e 	bne	r2,zero,378 <main+0x84>
		{
			led=0x55;
     35c:	00801544 	movi	r2,85
     360:	e0bffd15 	stw	r2,-12(fp)
			IOWR(LED_BASE,0,led);
     364:	00c08074 	movhi	r3,513
     368:	18e44c04 	addi	r3,r3,-28368
     36c:	e0bffd17 	ldw	r2,-12(fp)
     370:	18800035 	stwio	r2,0(r3)
     374:	00000606 	br	390 <main+0x9c>
		}
		else
		{
			led=0xaa;
     378:	00802a84 	movi	r2,170
     37c:	e0bffd15 	stw	r2,-12(fp)
			IOWR(LED_BASE,0,led);
     380:	00c08074 	movhi	r3,513
     384:	18e44c04 	addi	r3,r3,-28368
     388:	e0bffd17 	ldw	r2,-12(fp)
     38c:	18800035 	stwio	r2,0(r3)
		}
    	for(i=0;i<10000;i++);
     390:	e03ffe15 	stw	zero,-8(fp)
     394:	00000306 	br	3a4 <main+0xb0>
     398:	e0bffe17 	ldw	r2,-8(fp)
     39c:	10800044 	addi	r2,r2,1
     3a0:	e0bffe15 	stw	r2,-8(fp)
     3a4:	e0bffe17 	ldw	r2,-8(fp)
     3a8:	1089c410 	cmplti	r2,r2,10000
     3ac:	103ffa1e 	bne	r2,zero,398 <main+0xa4>
    }
     3b0:	003fd606 	br	30c <main+0x18>

000003b4 <printf>:
     3b4:	defffb04 	addi	sp,sp,-20
     3b8:	dfc00115 	stw	ra,4(sp)
     3bc:	d9400215 	stw	r5,8(sp)
     3c0:	d9800315 	stw	r6,12(sp)
     3c4:	d9c00415 	stw	r7,16(sp)
     3c8:	00800074 	movhi	r2,1
     3cc:	10bc5504 	addi	r2,r2,-3756
     3d0:	10c00017 	ldw	r3,0(r2)
     3d4:	200b883a 	mov	r5,r4
     3d8:	d8800204 	addi	r2,sp,8
     3dc:	19000217 	ldw	r4,8(r3)
     3e0:	100d883a 	mov	r6,r2
     3e4:	d8800015 	stw	r2,0(sp)
     3e8:	00023480 	call	2348 <__vfprintf_internal>
     3ec:	dfc00117 	ldw	ra,4(sp)
     3f0:	dec00504 	addi	sp,sp,20
     3f4:	f800283a 	ret

000003f8 <_printf_r>:
     3f8:	defffc04 	addi	sp,sp,-16
     3fc:	dfc00115 	stw	ra,4(sp)
     400:	d9800215 	stw	r6,8(sp)
     404:	d9c00315 	stw	r7,12(sp)
     408:	280d883a 	mov	r6,r5
     40c:	21400217 	ldw	r5,8(r4)
     410:	d8c00204 	addi	r3,sp,8
     414:	180f883a 	mov	r7,r3
     418:	d8c00015 	stw	r3,0(sp)
     41c:	00004840 	call	484 <___vfprintf_internal_r>
     420:	dfc00117 	ldw	ra,4(sp)
     424:	dec00404 	addi	sp,sp,16
     428:	f800283a 	ret

0000042c <__sprint_r>:
     42c:	30800217 	ldw	r2,8(r6)
     430:	defffe04 	addi	sp,sp,-8
     434:	dc000015 	stw	r16,0(sp)
     438:	dfc00115 	stw	ra,4(sp)
     43c:	3021883a 	mov	r16,r6
     440:	0007883a 	mov	r3,zero
     444:	1000061e 	bne	r2,zero,460 <__sprint_r+0x34>
     448:	1805883a 	mov	r2,r3
     44c:	30000115 	stw	zero,4(r6)
     450:	dfc00117 	ldw	ra,4(sp)
     454:	dc000017 	ldw	r16,0(sp)
     458:	dec00204 	addi	sp,sp,8
     45c:	f800283a 	ret
     460:	00046040 	call	4604 <__sfvwrite_r>
     464:	1007883a 	mov	r3,r2
     468:	1805883a 	mov	r2,r3
     46c:	80000115 	stw	zero,4(r16)
     470:	80000215 	stw	zero,8(r16)
     474:	dfc00117 	ldw	ra,4(sp)
     478:	dc000017 	ldw	r16,0(sp)
     47c:	dec00204 	addi	sp,sp,8
     480:	f800283a 	ret

00000484 <___vfprintf_internal_r>:
     484:	defea404 	addi	sp,sp,-1392
     488:	dd815815 	stw	r22,1376(sp)
     48c:	dc015215 	stw	r16,1352(sp)
     490:	d9c15115 	stw	r7,1348(sp)
     494:	dfc15b15 	stw	ra,1388(sp)
     498:	df015a15 	stw	fp,1384(sp)
     49c:	ddc15915 	stw	r23,1380(sp)
     4a0:	dd415715 	stw	r21,1372(sp)
     4a4:	dd015615 	stw	r20,1368(sp)
     4a8:	dcc15515 	stw	r19,1364(sp)
     4ac:	dc815415 	stw	r18,1360(sp)
     4b0:	dc415315 	stw	r17,1356(sp)
     4b4:	282d883a 	mov	r22,r5
     4b8:	3021883a 	mov	r16,r6
     4bc:	d9014f15 	stw	r4,1340(sp)
     4c0:	0004c280 	call	4c28 <_localeconv_r>
     4c4:	10800017 	ldw	r2,0(r2)
     4c8:	d9c15117 	ldw	r7,1348(sp)
     4cc:	d8814915 	stw	r2,1316(sp)
     4d0:	d8814f17 	ldw	r2,1340(sp)
     4d4:	10000226 	beq	r2,zero,4e0 <___vfprintf_internal_r+0x5c>
     4d8:	10800e17 	ldw	r2,56(r2)
     4dc:	10020d26 	beq	r2,zero,d14 <___vfprintf_internal_r+0x890>
     4e0:	b080030b 	ldhu	r2,12(r22)
     4e4:	1080020c 	andi	r2,r2,8
     4e8:	10020e26 	beq	r2,zero,d24 <___vfprintf_internal_r+0x8a0>
     4ec:	b0800417 	ldw	r2,16(r22)
     4f0:	10020c26 	beq	r2,zero,d24 <___vfprintf_internal_r+0x8a0>
     4f4:	b200030b 	ldhu	r8,12(r22)
     4f8:	00800284 	movi	r2,10
     4fc:	40c0068c 	andi	r3,r8,26
     500:	18802f1e 	bne	r3,r2,5c0 <___vfprintf_internal_r+0x13c>
     504:	b080038f 	ldh	r2,14(r22)
     508:	10002d16 	blt	r2,zero,5c0 <___vfprintf_internal_r+0x13c>
     50c:	b240038b 	ldhu	r9,14(r22)
     510:	b2800717 	ldw	r10,28(r22)
     514:	b2c00917 	ldw	r11,36(r22)
     518:	d9014f17 	ldw	r4,1340(sp)
     51c:	dc402904 	addi	r17,sp,164
     520:	d8804004 	addi	r2,sp,256
     524:	00c10004 	movi	r3,1024
     528:	423fff4c 	andi	r8,r8,65533
     52c:	800d883a 	mov	r6,r16
     530:	880b883a 	mov	r5,r17
     534:	da002c0d 	sth	r8,176(sp)
     538:	da402c8d 	sth	r9,178(sp)
     53c:	da803015 	stw	r10,192(sp)
     540:	dac03215 	stw	r11,200(sp)
     544:	d8802d15 	stw	r2,180(sp)
     548:	d8c02e15 	stw	r3,184(sp)
     54c:	d8802915 	stw	r2,164(sp)
     550:	d8c02b15 	stw	r3,172(sp)
     554:	d8002f15 	stw	zero,188(sp)
     558:	00004840 	call	484 <___vfprintf_internal_r>
     55c:	d8814b15 	stw	r2,1324(sp)
     560:	10000416 	blt	r2,zero,574 <___vfprintf_internal_r+0xf0>
     564:	d9014f17 	ldw	r4,1340(sp)
     568:	880b883a 	mov	r5,r17
     56c:	0003ca00 	call	3ca0 <_fflush_r>
     570:	1002321e 	bne	r2,zero,e3c <___vfprintf_internal_r+0x9b8>
     574:	d8802c0b 	ldhu	r2,176(sp)
     578:	1080100c 	andi	r2,r2,64
     57c:	10000326 	beq	r2,zero,58c <___vfprintf_internal_r+0x108>
     580:	b080030b 	ldhu	r2,12(r22)
     584:	10801014 	ori	r2,r2,64
     588:	b080030d 	sth	r2,12(r22)
     58c:	d8814b17 	ldw	r2,1324(sp)
     590:	dfc15b17 	ldw	ra,1388(sp)
     594:	df015a17 	ldw	fp,1384(sp)
     598:	ddc15917 	ldw	r23,1380(sp)
     59c:	dd815817 	ldw	r22,1376(sp)
     5a0:	dd415717 	ldw	r21,1372(sp)
     5a4:	dd015617 	ldw	r20,1368(sp)
     5a8:	dcc15517 	ldw	r19,1364(sp)
     5ac:	dc815417 	ldw	r18,1360(sp)
     5b0:	dc415317 	ldw	r17,1356(sp)
     5b4:	dc015217 	ldw	r16,1352(sp)
     5b8:	dec15c04 	addi	sp,sp,1392
     5bc:	f800283a 	ret
     5c0:	0005883a 	mov	r2,zero
     5c4:	0007883a 	mov	r3,zero
     5c8:	dd401904 	addi	r21,sp,100
     5cc:	d8814215 	stw	r2,1288(sp)
     5d0:	802f883a 	mov	r23,r16
     5d4:	d8c14315 	stw	r3,1292(sp)
     5d8:	d8014b15 	stw	zero,1324(sp)
     5dc:	d8014815 	stw	zero,1312(sp)
     5e0:	d8014415 	stw	zero,1296(sp)
     5e4:	d8014715 	stw	zero,1308(sp)
     5e8:	dd400c15 	stw	r21,48(sp)
     5ec:	d8000e15 	stw	zero,56(sp)
     5f0:	d8000d15 	stw	zero,52(sp)
     5f4:	b8800007 	ldb	r2,0(r23)
     5f8:	10001926 	beq	r2,zero,660 <___vfprintf_internal_r+0x1dc>
     5fc:	00c00944 	movi	r3,37
     600:	10c01726 	beq	r2,r3,660 <___vfprintf_internal_r+0x1dc>
     604:	b821883a 	mov	r16,r23
     608:	00000106 	br	610 <___vfprintf_internal_r+0x18c>
     60c:	10c00326 	beq	r2,r3,61c <___vfprintf_internal_r+0x198>
     610:	84000044 	addi	r16,r16,1
     614:	80800007 	ldb	r2,0(r16)
     618:	103ffc1e 	bne	r2,zero,60c <___vfprintf_internal_r+0x188>
     61c:	85e7c83a 	sub	r19,r16,r23
     620:	98000e26 	beq	r19,zero,65c <___vfprintf_internal_r+0x1d8>
     624:	dc800e17 	ldw	r18,56(sp)
     628:	dc400d17 	ldw	r17,52(sp)
     62c:	008001c4 	movi	r2,7
     630:	94e5883a 	add	r18,r18,r19
     634:	8c400044 	addi	r17,r17,1
     638:	adc00015 	stw	r23,0(r21)
     63c:	dc800e15 	stw	r18,56(sp)
     640:	acc00115 	stw	r19,4(r21)
     644:	dc400d15 	stw	r17,52(sp)
     648:	14428b16 	blt	r2,r17,1078 <___vfprintf_internal_r+0xbf4>
     64c:	ad400204 	addi	r21,r21,8
     650:	d9014b17 	ldw	r4,1324(sp)
     654:	24c9883a 	add	r4,r4,r19
     658:	d9014b15 	stw	r4,1324(sp)
     65c:	802f883a 	mov	r23,r16
     660:	b8800007 	ldb	r2,0(r23)
     664:	10013c26 	beq	r2,zero,b58 <___vfprintf_internal_r+0x6d4>
     668:	bdc00044 	addi	r23,r23,1
     66c:	d8000405 	stb	zero,16(sp)
     670:	b8c00007 	ldb	r3,0(r23)
     674:	04ffffc4 	movi	r19,-1
     678:	d8014c15 	stw	zero,1328(sp)
     67c:	d8014a15 	stw	zero,1320(sp)
     680:	d8c14d15 	stw	r3,1332(sp)
     684:	bdc00044 	addi	r23,r23,1
     688:	d9414d17 	ldw	r5,1332(sp)
     68c:	00801604 	movi	r2,88
     690:	28fff804 	addi	r3,r5,-32
     694:	10c06036 	bltu	r2,r3,818 <___vfprintf_internal_r+0x394>
     698:	18c5883a 	add	r2,r3,r3
     69c:	1085883a 	add	r2,r2,r2
     6a0:	00c00034 	movhi	r3,0
     6a4:	18c1ad04 	addi	r3,r3,1716
     6a8:	10c5883a 	add	r2,r2,r3
     6ac:	11000017 	ldw	r4,0(r2)
     6b0:	2000683a 	jmp	r4
     6b4:	00001628 	cmpgeui	zero,zero,88
     6b8:	00000818 	cmpnei	zero,zero,32
     6bc:	00000818 	cmpnei	zero,zero,32
     6c0:	00001614 	movui	zero,88
     6c4:	00000818 	cmpnei	zero,zero,32
     6c8:	00000818 	cmpnei	zero,zero,32
     6cc:	00000818 	cmpnei	zero,zero,32
     6d0:	00000818 	cmpnei	zero,zero,32
     6d4:	00000818 	cmpnei	zero,zero,32
     6d8:	00000818 	cmpnei	zero,zero,32
     6dc:	000013f4 	movhi	zero,79
     6e0:	00001604 	movi	zero,88
     6e4:	00000818 	cmpnei	zero,zero,32
     6e8:	0000140c 	andi	zero,zero,80
     6ec:	000016ac 	andhi	zero,zero,90
     6f0:	00000818 	cmpnei	zero,zero,32
     6f4:	00001698 	cmpnei	zero,zero,90
     6f8:	00001654 	movui	zero,89
     6fc:	00001654 	movui	zero,89
     700:	00001654 	movui	zero,89
     704:	00001654 	movui	zero,89
     708:	00001654 	movui	zero,89
     70c:	00001654 	movui	zero,89
     710:	00001654 	movui	zero,89
     714:	00001654 	movui	zero,89
     718:	00001654 	movui	zero,89
     71c:	00000818 	cmpnei	zero,zero,32
     720:	00000818 	cmpnei	zero,zero,32
     724:	00000818 	cmpnei	zero,zero,32
     728:	00000818 	cmpnei	zero,zero,32
     72c:	00000818 	cmpnei	zero,zero,32
     730:	00000818 	cmpnei	zero,zero,32
     734:	00000818 	cmpnei	zero,zero,32
     738:	00000818 	cmpnei	zero,zero,32
     73c:	00000818 	cmpnei	zero,zero,32
     740:	00000818 	cmpnei	zero,zero,32
     744:	00000e70 	cmpltui	zero,zero,57
     748:	000014dc 	xori	zero,zero,83
     74c:	00000818 	cmpnei	zero,zero,32
     750:	000014dc 	xori	zero,zero,83
     754:	00000818 	cmpnei	zero,zero,32
     758:	00000818 	cmpnei	zero,zero,32
     75c:	00000818 	cmpnei	zero,zero,32
     760:	00000818 	cmpnei	zero,zero,32
     764:	00001640 	call	164 <alt_irq_handler+0x78>
     768:	00000818 	cmpnei	zero,zero,32
     76c:	00000818 	cmpnei	zero,zero,32
     770:	00000f24 	muli	zero,zero,60
     774:	00000818 	cmpnei	zero,zero,32
     778:	00000818 	cmpnei	zero,zero,32
     77c:	00000818 	cmpnei	zero,zero,32
     780:	00000818 	cmpnei	zero,zero,32
     784:	00000818 	cmpnei	zero,zero,32
     788:	00000f70 	cmpltui	zero,zero,61
     78c:	00000818 	cmpnei	zero,zero,32
     790:	00000818 	cmpnei	zero,zero,32
     794:	00001590 	cmplti	zero,zero,86
     798:	00000818 	cmpnei	zero,zero,32
     79c:	00000818 	cmpnei	zero,zero,32
     7a0:	00000818 	cmpnei	zero,zero,32
     7a4:	00000818 	cmpnei	zero,zero,32
     7a8:	00000818 	cmpnei	zero,zero,32
     7ac:	00000818 	cmpnei	zero,zero,32
     7b0:	00000818 	cmpnei	zero,zero,32
     7b4:	00000818 	cmpnei	zero,zero,32
     7b8:	00000818 	cmpnei	zero,zero,32
     7bc:	00000818 	cmpnei	zero,zero,32
     7c0:	00001564 	muli	zero,zero,85
     7c4:	00000e7c 	xorhi	zero,zero,57
     7c8:	000014dc 	xori	zero,zero,83
     7cc:	000014dc 	xori	zero,zero,83
     7d0:	000014dc 	xori	zero,zero,83
     7d4:	000014c8 	cmpgei	zero,zero,83
     7d8:	00000e7c 	xorhi	zero,zero,57
     7dc:	00000818 	cmpnei	zero,zero,32
     7e0:	00000818 	cmpnei	zero,zero,32
     7e4:	00001450 	cmplti	zero,zero,81
     7e8:	00000818 	cmpnei	zero,zero,32
     7ec:	00001420 	cmpeqi	zero,zero,80
     7f0:	00000f30 	cmpltui	zero,zero,60
     7f4:	00001480 	call	148 <alt_irq_handler+0x5c>
     7f8:	0000146c 	andhi	zero,zero,81
     7fc:	00000818 	cmpnei	zero,zero,32
     800:	00001714 	movui	zero,92
     804:	00000818 	cmpnei	zero,zero,32
     808:	00000f7c 	xorhi	zero,zero,61
     80c:	00000818 	cmpnei	zero,zero,32
     810:	00000818 	cmpnei	zero,zero,32
     814:	000015f4 	movhi	zero,87
     818:	d9014d17 	ldw	r4,1332(sp)
     81c:	2000ce26 	beq	r4,zero,b58 <___vfprintf_internal_r+0x6d4>
     820:	01400044 	movi	r5,1
     824:	d9800f04 	addi	r6,sp,60
     828:	d9c14015 	stw	r7,1280(sp)
     82c:	d9414515 	stw	r5,1300(sp)
     830:	d9814115 	stw	r6,1284(sp)
     834:	280f883a 	mov	r7,r5
     838:	d9000f05 	stb	r4,60(sp)
     83c:	d8000405 	stb	zero,16(sp)
     840:	d8014615 	stw	zero,1304(sp)
     844:	d8c14c17 	ldw	r3,1328(sp)
     848:	1880008c 	andi	r2,r3,2
     84c:	1005003a 	cmpeq	r2,r2,zero
     850:	d8815015 	stw	r2,1344(sp)
     854:	1000031e 	bne	r2,zero,864 <___vfprintf_internal_r+0x3e0>
     858:	d9014517 	ldw	r4,1300(sp)
     85c:	21000084 	addi	r4,r4,2
     860:	d9014515 	stw	r4,1300(sp)
     864:	d9414c17 	ldw	r5,1328(sp)
     868:	2940210c 	andi	r5,r5,132
     86c:	d9414e15 	stw	r5,1336(sp)
     870:	28002d1e 	bne	r5,zero,928 <___vfprintf_internal_r+0x4a4>
     874:	d9814a17 	ldw	r6,1320(sp)
     878:	d8814517 	ldw	r2,1300(sp)
     87c:	30a1c83a 	sub	r16,r6,r2
     880:	0400290e 	bge	zero,r16,928 <___vfprintf_internal_r+0x4a4>
     884:	00800404 	movi	r2,16
     888:	14045e0e 	bge	r2,r16,1a04 <___vfprintf_internal_r+0x1580>
     88c:	dc800e17 	ldw	r18,56(sp)
     890:	dc400d17 	ldw	r17,52(sp)
     894:	1027883a 	mov	r19,r2
     898:	07000074 	movhi	fp,1
     89c:	e734e584 	addi	fp,fp,-11370
     8a0:	050001c4 	movi	r20,7
     8a4:	00000306 	br	8b4 <___vfprintf_internal_r+0x430>
     8a8:	843ffc04 	addi	r16,r16,-16
     8ac:	ad400204 	addi	r21,r21,8
     8b0:	9c00130e 	bge	r19,r16,900 <___vfprintf_internal_r+0x47c>
     8b4:	94800404 	addi	r18,r18,16
     8b8:	8c400044 	addi	r17,r17,1
     8bc:	af000015 	stw	fp,0(r21)
     8c0:	acc00115 	stw	r19,4(r21)
     8c4:	dc800e15 	stw	r18,56(sp)
     8c8:	dc400d15 	stw	r17,52(sp)
     8cc:	a47ff60e 	bge	r20,r17,8a8 <___vfprintf_internal_r+0x424>
     8d0:	d9014f17 	ldw	r4,1340(sp)
     8d4:	b00b883a 	mov	r5,r22
     8d8:	d9800c04 	addi	r6,sp,48
     8dc:	d9c15115 	stw	r7,1348(sp)
     8e0:	000042c0 	call	42c <__sprint_r>
     8e4:	d9c15117 	ldw	r7,1348(sp)
     8e8:	10009e1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
     8ec:	843ffc04 	addi	r16,r16,-16
     8f0:	dc800e17 	ldw	r18,56(sp)
     8f4:	dc400d17 	ldw	r17,52(sp)
     8f8:	dd401904 	addi	r21,sp,100
     8fc:	9c3fed16 	blt	r19,r16,8b4 <___vfprintf_internal_r+0x430>
     900:	9425883a 	add	r18,r18,r16
     904:	8c400044 	addi	r17,r17,1
     908:	008001c4 	movi	r2,7
     90c:	af000015 	stw	fp,0(r21)
     910:	ac000115 	stw	r16,4(r21)
     914:	dc800e15 	stw	r18,56(sp)
     918:	dc400d15 	stw	r17,52(sp)
     91c:	1441f516 	blt	r2,r17,10f4 <___vfprintf_internal_r+0xc70>
     920:	ad400204 	addi	r21,r21,8
     924:	00000206 	br	930 <___vfprintf_internal_r+0x4ac>
     928:	dc800e17 	ldw	r18,56(sp)
     92c:	dc400d17 	ldw	r17,52(sp)
     930:	d8800407 	ldb	r2,16(sp)
     934:	10000b26 	beq	r2,zero,964 <___vfprintf_internal_r+0x4e0>
     938:	00800044 	movi	r2,1
     93c:	94800044 	addi	r18,r18,1
     940:	8c400044 	addi	r17,r17,1
     944:	a8800115 	stw	r2,4(r21)
     948:	d8c00404 	addi	r3,sp,16
     94c:	008001c4 	movi	r2,7
     950:	a8c00015 	stw	r3,0(r21)
     954:	dc800e15 	stw	r18,56(sp)
     958:	dc400d15 	stw	r17,52(sp)
     95c:	1441da16 	blt	r2,r17,10c8 <___vfprintf_internal_r+0xc44>
     960:	ad400204 	addi	r21,r21,8
     964:	d9015017 	ldw	r4,1344(sp)
     968:	20000b1e 	bne	r4,zero,998 <___vfprintf_internal_r+0x514>
     96c:	d8800444 	addi	r2,sp,17
     970:	94800084 	addi	r18,r18,2
     974:	8c400044 	addi	r17,r17,1
     978:	a8800015 	stw	r2,0(r21)
     97c:	00c00084 	movi	r3,2
     980:	008001c4 	movi	r2,7
     984:	a8c00115 	stw	r3,4(r21)
     988:	dc800e15 	stw	r18,56(sp)
     98c:	dc400d15 	stw	r17,52(sp)
     990:	1441c216 	blt	r2,r17,109c <___vfprintf_internal_r+0xc18>
     994:	ad400204 	addi	r21,r21,8
     998:	d9414e17 	ldw	r5,1336(sp)
     99c:	00802004 	movi	r2,128
     9a0:	2880b126 	beq	r5,r2,c68 <___vfprintf_internal_r+0x7e4>
     9a4:	d8c14617 	ldw	r3,1304(sp)
     9a8:	19e1c83a 	sub	r16,r3,r7
     9ac:	0400260e 	bge	zero,r16,a48 <___vfprintf_internal_r+0x5c4>
     9b0:	00800404 	movi	r2,16
     9b4:	1403cf0e 	bge	r2,r16,18f4 <___vfprintf_internal_r+0x1470>
     9b8:	1027883a 	mov	r19,r2
     9bc:	07000074 	movhi	fp,1
     9c0:	e734e184 	addi	fp,fp,-11386
     9c4:	050001c4 	movi	r20,7
     9c8:	00000306 	br	9d8 <___vfprintf_internal_r+0x554>
     9cc:	843ffc04 	addi	r16,r16,-16
     9d0:	ad400204 	addi	r21,r21,8
     9d4:	9c00130e 	bge	r19,r16,a24 <___vfprintf_internal_r+0x5a0>
     9d8:	94800404 	addi	r18,r18,16
     9dc:	8c400044 	addi	r17,r17,1
     9e0:	af000015 	stw	fp,0(r21)
     9e4:	acc00115 	stw	r19,4(r21)
     9e8:	dc800e15 	stw	r18,56(sp)
     9ec:	dc400d15 	stw	r17,52(sp)
     9f0:	a47ff60e 	bge	r20,r17,9cc <___vfprintf_internal_r+0x548>
     9f4:	d9014f17 	ldw	r4,1340(sp)
     9f8:	b00b883a 	mov	r5,r22
     9fc:	d9800c04 	addi	r6,sp,48
     a00:	d9c15115 	stw	r7,1348(sp)
     a04:	000042c0 	call	42c <__sprint_r>
     a08:	d9c15117 	ldw	r7,1348(sp)
     a0c:	1000551e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
     a10:	843ffc04 	addi	r16,r16,-16
     a14:	dc800e17 	ldw	r18,56(sp)
     a18:	dc400d17 	ldw	r17,52(sp)
     a1c:	dd401904 	addi	r21,sp,100
     a20:	9c3fed16 	blt	r19,r16,9d8 <___vfprintf_internal_r+0x554>
     a24:	9425883a 	add	r18,r18,r16
     a28:	8c400044 	addi	r17,r17,1
     a2c:	008001c4 	movi	r2,7
     a30:	af000015 	stw	fp,0(r21)
     a34:	ac000115 	stw	r16,4(r21)
     a38:	dc800e15 	stw	r18,56(sp)
     a3c:	dc400d15 	stw	r17,52(sp)
     a40:	14418216 	blt	r2,r17,104c <___vfprintf_internal_r+0xbc8>
     a44:	ad400204 	addi	r21,r21,8
     a48:	d9014c17 	ldw	r4,1328(sp)
     a4c:	2080400c 	andi	r2,r4,256
     a50:	10004a1e 	bne	r2,zero,b7c <___vfprintf_internal_r+0x6f8>
     a54:	d9414117 	ldw	r5,1284(sp)
     a58:	91e5883a 	add	r18,r18,r7
     a5c:	8c400044 	addi	r17,r17,1
     a60:	008001c4 	movi	r2,7
     a64:	a9400015 	stw	r5,0(r21)
     a68:	a9c00115 	stw	r7,4(r21)
     a6c:	dc800e15 	stw	r18,56(sp)
     a70:	dc400d15 	stw	r17,52(sp)
     a74:	14416716 	blt	r2,r17,1014 <___vfprintf_internal_r+0xb90>
     a78:	a8c00204 	addi	r3,r21,8
     a7c:	d9814c17 	ldw	r6,1328(sp)
     a80:	3080010c 	andi	r2,r6,4
     a84:	10002826 	beq	r2,zero,b28 <___vfprintf_internal_r+0x6a4>
     a88:	d8814a17 	ldw	r2,1320(sp)
     a8c:	d9014517 	ldw	r4,1300(sp)
     a90:	1121c83a 	sub	r16,r2,r4
     a94:	0400240e 	bge	zero,r16,b28 <___vfprintf_internal_r+0x6a4>
     a98:	00800404 	movi	r2,16
     a9c:	1404550e 	bge	r2,r16,1bf4 <___vfprintf_internal_r+0x1770>
     aa0:	dc400d17 	ldw	r17,52(sp)
     aa4:	1027883a 	mov	r19,r2
     aa8:	07000074 	movhi	fp,1
     aac:	e734e584 	addi	fp,fp,-11370
     ab0:	050001c4 	movi	r20,7
     ab4:	00000306 	br	ac4 <___vfprintf_internal_r+0x640>
     ab8:	843ffc04 	addi	r16,r16,-16
     abc:	18c00204 	addi	r3,r3,8
     ac0:	9c00110e 	bge	r19,r16,b08 <___vfprintf_internal_r+0x684>
     ac4:	94800404 	addi	r18,r18,16
     ac8:	8c400044 	addi	r17,r17,1
     acc:	1f000015 	stw	fp,0(r3)
     ad0:	1cc00115 	stw	r19,4(r3)
     ad4:	dc800e15 	stw	r18,56(sp)
     ad8:	dc400d15 	stw	r17,52(sp)
     adc:	a47ff60e 	bge	r20,r17,ab8 <___vfprintf_internal_r+0x634>
     ae0:	d9014f17 	ldw	r4,1340(sp)
     ae4:	b00b883a 	mov	r5,r22
     ae8:	d9800c04 	addi	r6,sp,48
     aec:	000042c0 	call	42c <__sprint_r>
     af0:	10001c1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
     af4:	843ffc04 	addi	r16,r16,-16
     af8:	dc800e17 	ldw	r18,56(sp)
     afc:	dc400d17 	ldw	r17,52(sp)
     b00:	d8c01904 	addi	r3,sp,100
     b04:	9c3fef16 	blt	r19,r16,ac4 <___vfprintf_internal_r+0x640>
     b08:	9425883a 	add	r18,r18,r16
     b0c:	8c400044 	addi	r17,r17,1
     b10:	008001c4 	movi	r2,7
     b14:	1f000015 	stw	fp,0(r3)
     b18:	1c000115 	stw	r16,4(r3)
     b1c:	dc800e15 	stw	r18,56(sp)
     b20:	dc400d15 	stw	r17,52(sp)
     b24:	1440cb16 	blt	r2,r17,e54 <___vfprintf_internal_r+0x9d0>
     b28:	d8814a17 	ldw	r2,1320(sp)
     b2c:	d9414517 	ldw	r5,1300(sp)
     b30:	1140010e 	bge	r2,r5,b38 <___vfprintf_internal_r+0x6b4>
     b34:	2805883a 	mov	r2,r5
     b38:	d9814b17 	ldw	r6,1324(sp)
     b3c:	308d883a 	add	r6,r6,r2
     b40:	d9814b15 	stw	r6,1324(sp)
     b44:	90013b1e 	bne	r18,zero,1034 <___vfprintf_internal_r+0xbb0>
     b48:	d9c14017 	ldw	r7,1280(sp)
     b4c:	dd401904 	addi	r21,sp,100
     b50:	d8000d15 	stw	zero,52(sp)
     b54:	003ea706 	br	5f4 <___vfprintf_internal_r+0x170>
     b58:	d8800e17 	ldw	r2,56(sp)
     b5c:	1005451e 	bne	r2,zero,2074 <___vfprintf_internal_r+0x1bf0>
     b60:	d8000d15 	stw	zero,52(sp)
     b64:	b080030b 	ldhu	r2,12(r22)
     b68:	1080100c 	andi	r2,r2,64
     b6c:	103e8726 	beq	r2,zero,58c <___vfprintf_internal_r+0x108>
     b70:	00bfffc4 	movi	r2,-1
     b74:	d8814b15 	stw	r2,1324(sp)
     b78:	003e8406 	br	58c <___vfprintf_internal_r+0x108>
     b7c:	d9814d17 	ldw	r6,1332(sp)
     b80:	00801944 	movi	r2,101
     b84:	11806e16 	blt	r2,r6,d40 <___vfprintf_internal_r+0x8bc>
     b88:	d9414717 	ldw	r5,1308(sp)
     b8c:	00c00044 	movi	r3,1
     b90:	1943490e 	bge	r3,r5,18b8 <___vfprintf_internal_r+0x1434>
     b94:	d8814117 	ldw	r2,1284(sp)
     b98:	94800044 	addi	r18,r18,1
     b9c:	8c400044 	addi	r17,r17,1
     ba0:	a8800015 	stw	r2,0(r21)
     ba4:	008001c4 	movi	r2,7
     ba8:	a8c00115 	stw	r3,4(r21)
     bac:	dc800e15 	stw	r18,56(sp)
     bb0:	dc400d15 	stw	r17,52(sp)
     bb4:	1441ca16 	blt	r2,r17,12e0 <___vfprintf_internal_r+0xe5c>
     bb8:	a8c00204 	addi	r3,r21,8
     bbc:	d9014917 	ldw	r4,1316(sp)
     bc0:	00800044 	movi	r2,1
     bc4:	94800044 	addi	r18,r18,1
     bc8:	8c400044 	addi	r17,r17,1
     bcc:	18800115 	stw	r2,4(r3)
     bd0:	008001c4 	movi	r2,7
     bd4:	19000015 	stw	r4,0(r3)
     bd8:	dc800e15 	stw	r18,56(sp)
     bdc:	dc400d15 	stw	r17,52(sp)
     be0:	1441b616 	blt	r2,r17,12bc <___vfprintf_internal_r+0xe38>
     be4:	1cc00204 	addi	r19,r3,8
     be8:	d9014217 	ldw	r4,1288(sp)
     bec:	d9414317 	ldw	r5,1292(sp)
     bf0:	000d883a 	mov	r6,zero
     bf4:	000f883a 	mov	r7,zero
     bf8:	0008fac0 	call	8fac <__nedf2>
     bfc:	10017426 	beq	r2,zero,11d0 <___vfprintf_internal_r+0xd4c>
     c00:	d9414717 	ldw	r5,1308(sp)
     c04:	d9814117 	ldw	r6,1284(sp)
     c08:	8c400044 	addi	r17,r17,1
     c0c:	2c85883a 	add	r2,r5,r18
     c10:	14bfffc4 	addi	r18,r2,-1
     c14:	28bfffc4 	addi	r2,r5,-1
     c18:	30c00044 	addi	r3,r6,1
     c1c:	98800115 	stw	r2,4(r19)
     c20:	008001c4 	movi	r2,7
     c24:	98c00015 	stw	r3,0(r19)
     c28:	dc800e15 	stw	r18,56(sp)
     c2c:	dc400d15 	stw	r17,52(sp)
     c30:	14418e16 	blt	r2,r17,126c <___vfprintf_internal_r+0xde8>
     c34:	9cc00204 	addi	r19,r19,8
     c38:	d9414817 	ldw	r5,1312(sp)
     c3c:	d8800804 	addi	r2,sp,32
     c40:	8c400044 	addi	r17,r17,1
     c44:	9165883a 	add	r18,r18,r5
     c48:	98800015 	stw	r2,0(r19)
     c4c:	008001c4 	movi	r2,7
     c50:	99400115 	stw	r5,4(r19)
     c54:	dc800e15 	stw	r18,56(sp)
     c58:	dc400d15 	stw	r17,52(sp)
     c5c:	1440ed16 	blt	r2,r17,1014 <___vfprintf_internal_r+0xb90>
     c60:	98c00204 	addi	r3,r19,8
     c64:	003f8506 	br	a7c <___vfprintf_internal_r+0x5f8>
     c68:	d9814a17 	ldw	r6,1320(sp)
     c6c:	d8814517 	ldw	r2,1300(sp)
     c70:	30a1c83a 	sub	r16,r6,r2
     c74:	043f4b0e 	bge	zero,r16,9a4 <___vfprintf_internal_r+0x520>
     c78:	00800404 	movi	r2,16
     c7c:	14043a0e 	bge	r2,r16,1d68 <___vfprintf_internal_r+0x18e4>
     c80:	1027883a 	mov	r19,r2
     c84:	07000074 	movhi	fp,1
     c88:	e734e184 	addi	fp,fp,-11386
     c8c:	050001c4 	movi	r20,7
     c90:	00000306 	br	ca0 <___vfprintf_internal_r+0x81c>
     c94:	843ffc04 	addi	r16,r16,-16
     c98:	ad400204 	addi	r21,r21,8
     c9c:	9c00130e 	bge	r19,r16,cec <___vfprintf_internal_r+0x868>
     ca0:	94800404 	addi	r18,r18,16
     ca4:	8c400044 	addi	r17,r17,1
     ca8:	af000015 	stw	fp,0(r21)
     cac:	acc00115 	stw	r19,4(r21)
     cb0:	dc800e15 	stw	r18,56(sp)
     cb4:	dc400d15 	stw	r17,52(sp)
     cb8:	a47ff60e 	bge	r20,r17,c94 <___vfprintf_internal_r+0x810>
     cbc:	d9014f17 	ldw	r4,1340(sp)
     cc0:	b00b883a 	mov	r5,r22
     cc4:	d9800c04 	addi	r6,sp,48
     cc8:	d9c15115 	stw	r7,1348(sp)
     ccc:	000042c0 	call	42c <__sprint_r>
     cd0:	d9c15117 	ldw	r7,1348(sp)
     cd4:	103fa31e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
     cd8:	843ffc04 	addi	r16,r16,-16
     cdc:	dc800e17 	ldw	r18,56(sp)
     ce0:	dc400d17 	ldw	r17,52(sp)
     ce4:	dd401904 	addi	r21,sp,100
     ce8:	9c3fed16 	blt	r19,r16,ca0 <___vfprintf_internal_r+0x81c>
     cec:	9425883a 	add	r18,r18,r16
     cf0:	8c400044 	addi	r17,r17,1
     cf4:	008001c4 	movi	r2,7
     cf8:	af000015 	stw	fp,0(r21)
     cfc:	ac000115 	stw	r16,4(r21)
     d00:	dc800e15 	stw	r18,56(sp)
     d04:	dc400d15 	stw	r17,52(sp)
     d08:	14416116 	blt	r2,r17,1290 <___vfprintf_internal_r+0xe0c>
     d0c:	ad400204 	addi	r21,r21,8
     d10:	003f2406 	br	9a4 <___vfprintf_internal_r+0x520>
     d14:	d9014f17 	ldw	r4,1340(sp)
     d18:	0003f380 	call	3f38 <__sinit>
     d1c:	d9c15117 	ldw	r7,1348(sp)
     d20:	003def06 	br	4e0 <___vfprintf_internal_r+0x5c>
     d24:	d9014f17 	ldw	r4,1340(sp)
     d28:	b00b883a 	mov	r5,r22
     d2c:	d9c15115 	stw	r7,1348(sp)
     d30:	000236c0 	call	236c <__swsetup_r>
     d34:	d9c15117 	ldw	r7,1348(sp)
     d38:	103dee26 	beq	r2,zero,4f4 <___vfprintf_internal_r+0x70>
     d3c:	003f8c06 	br	b70 <___vfprintf_internal_r+0x6ec>
     d40:	d9014217 	ldw	r4,1288(sp)
     d44:	d9414317 	ldw	r5,1292(sp)
     d48:	000d883a 	mov	r6,zero
     d4c:	000f883a 	mov	r7,zero
     d50:	0008f240 	call	8f24 <__eqdf2>
     d54:	1000f21e 	bne	r2,zero,1120 <___vfprintf_internal_r+0xc9c>
     d58:	00800074 	movhi	r2,1
     d5c:	10b4e104 	addi	r2,r2,-11388
     d60:	94800044 	addi	r18,r18,1
     d64:	8c400044 	addi	r17,r17,1
     d68:	a8800015 	stw	r2,0(r21)
     d6c:	00c00044 	movi	r3,1
     d70:	008001c4 	movi	r2,7
     d74:	a8c00115 	stw	r3,4(r21)
     d78:	dc800e15 	stw	r18,56(sp)
     d7c:	dc400d15 	stw	r17,52(sp)
     d80:	14430016 	blt	r2,r17,1984 <___vfprintf_internal_r+0x1500>
     d84:	a8c00204 	addi	r3,r21,8
     d88:	d8800517 	ldw	r2,20(sp)
     d8c:	d9014717 	ldw	r4,1308(sp)
     d90:	11015c0e 	bge	r2,r4,1304 <___vfprintf_internal_r+0xe80>
     d94:	dc400d17 	ldw	r17,52(sp)
     d98:	d9814917 	ldw	r6,1316(sp)
     d9c:	00800044 	movi	r2,1
     da0:	94800044 	addi	r18,r18,1
     da4:	8c400044 	addi	r17,r17,1
     da8:	18800115 	stw	r2,4(r3)
     dac:	008001c4 	movi	r2,7
     db0:	19800015 	stw	r6,0(r3)
     db4:	dc800e15 	stw	r18,56(sp)
     db8:	dc400d15 	stw	r17,52(sp)
     dbc:	14431616 	blt	r2,r17,1a18 <___vfprintf_internal_r+0x1594>
     dc0:	18c00204 	addi	r3,r3,8
     dc4:	d8814717 	ldw	r2,1308(sp)
     dc8:	143fffc4 	addi	r16,r2,-1
     dcc:	043f2b0e 	bge	zero,r16,a7c <___vfprintf_internal_r+0x5f8>
     dd0:	00800404 	movi	r2,16
     dd4:	1402a80e 	bge	r2,r16,1878 <___vfprintf_internal_r+0x13f4>
     dd8:	dc400d17 	ldw	r17,52(sp)
     ddc:	1027883a 	mov	r19,r2
     de0:	07000074 	movhi	fp,1
     de4:	e734e184 	addi	fp,fp,-11386
     de8:	050001c4 	movi	r20,7
     dec:	00000306 	br	dfc <___vfprintf_internal_r+0x978>
     df0:	18c00204 	addi	r3,r3,8
     df4:	843ffc04 	addi	r16,r16,-16
     df8:	9c02a20e 	bge	r19,r16,1884 <___vfprintf_internal_r+0x1400>
     dfc:	94800404 	addi	r18,r18,16
     e00:	8c400044 	addi	r17,r17,1
     e04:	1f000015 	stw	fp,0(r3)
     e08:	1cc00115 	stw	r19,4(r3)
     e0c:	dc800e15 	stw	r18,56(sp)
     e10:	dc400d15 	stw	r17,52(sp)
     e14:	a47ff60e 	bge	r20,r17,df0 <___vfprintf_internal_r+0x96c>
     e18:	d9014f17 	ldw	r4,1340(sp)
     e1c:	b00b883a 	mov	r5,r22
     e20:	d9800c04 	addi	r6,sp,48
     e24:	000042c0 	call	42c <__sprint_r>
     e28:	103f4e1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
     e2c:	dc800e17 	ldw	r18,56(sp)
     e30:	dc400d17 	ldw	r17,52(sp)
     e34:	d8c01904 	addi	r3,sp,100
     e38:	003fee06 	br	df4 <___vfprintf_internal_r+0x970>
     e3c:	d8802c0b 	ldhu	r2,176(sp)
     e40:	00ffffc4 	movi	r3,-1
     e44:	d8c14b15 	stw	r3,1324(sp)
     e48:	1080100c 	andi	r2,r2,64
     e4c:	103dcc1e 	bne	r2,zero,580 <___vfprintf_internal_r+0xfc>
     e50:	003dce06 	br	58c <___vfprintf_internal_r+0x108>
     e54:	d9014f17 	ldw	r4,1340(sp)
     e58:	b00b883a 	mov	r5,r22
     e5c:	d9800c04 	addi	r6,sp,48
     e60:	000042c0 	call	42c <__sprint_r>
     e64:	103f3f1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
     e68:	dc800e17 	ldw	r18,56(sp)
     e6c:	003f2e06 	br	b28 <___vfprintf_internal_r+0x6a4>
     e70:	d9414c17 	ldw	r5,1328(sp)
     e74:	29400414 	ori	r5,r5,16
     e78:	d9414c15 	stw	r5,1328(sp)
     e7c:	d9814c17 	ldw	r6,1328(sp)
     e80:	3080080c 	andi	r2,r6,32
     e84:	10014f1e 	bne	r2,zero,13c4 <___vfprintf_internal_r+0xf40>
     e88:	d8c14c17 	ldw	r3,1328(sp)
     e8c:	1880040c 	andi	r2,r3,16
     e90:	1002f01e 	bne	r2,zero,1a54 <___vfprintf_internal_r+0x15d0>
     e94:	d9014c17 	ldw	r4,1328(sp)
     e98:	2080100c 	andi	r2,r4,64
     e9c:	1002ed26 	beq	r2,zero,1a54 <___vfprintf_internal_r+0x15d0>
     ea0:	3880000f 	ldh	r2,0(r7)
     ea4:	39c00104 	addi	r7,r7,4
     ea8:	d9c14015 	stw	r7,1280(sp)
     eac:	1023d7fa 	srai	r17,r2,31
     eb0:	1021883a 	mov	r16,r2
     eb4:	88037816 	blt	r17,zero,1c98 <___vfprintf_internal_r+0x1814>
     eb8:	01000044 	movi	r4,1
     ebc:	98000416 	blt	r19,zero,ed0 <___vfprintf_internal_r+0xa4c>
     ec0:	d8c14c17 	ldw	r3,1328(sp)
     ec4:	00bfdfc4 	movi	r2,-129
     ec8:	1886703a 	and	r3,r3,r2
     ecc:	d8c14c15 	stw	r3,1328(sp)
     ed0:	8444b03a 	or	r2,r16,r17
     ed4:	10022c1e 	bne	r2,zero,1788 <___vfprintf_internal_r+0x1304>
     ed8:	98022b1e 	bne	r19,zero,1788 <___vfprintf_internal_r+0x1304>
     edc:	20803fcc 	andi	r2,r4,255
     ee0:	1002a126 	beq	r2,zero,1968 <___vfprintf_internal_r+0x14e4>
     ee4:	d8c01904 	addi	r3,sp,100
     ee8:	dd000f04 	addi	r20,sp,60
     eec:	d8c14115 	stw	r3,1284(sp)
     ef0:	d8c14117 	ldw	r3,1284(sp)
     ef4:	dcc14515 	stw	r19,1300(sp)
     ef8:	a0c5c83a 	sub	r2,r20,r3
     efc:	11c00a04 	addi	r7,r2,40
     f00:	99c0010e 	bge	r19,r7,f08 <___vfprintf_internal_r+0xa84>
     f04:	d9c14515 	stw	r7,1300(sp)
     f08:	dcc14615 	stw	r19,1304(sp)
     f0c:	d8800407 	ldb	r2,16(sp)
     f10:	103e4c26 	beq	r2,zero,844 <___vfprintf_internal_r+0x3c0>
     f14:	d8814517 	ldw	r2,1300(sp)
     f18:	10800044 	addi	r2,r2,1
     f1c:	d8814515 	stw	r2,1300(sp)
     f20:	003e4806 	br	844 <___vfprintf_internal_r+0x3c0>
     f24:	d9814c17 	ldw	r6,1328(sp)
     f28:	31800414 	ori	r6,r6,16
     f2c:	d9814c15 	stw	r6,1328(sp)
     f30:	d8c14c17 	ldw	r3,1328(sp)
     f34:	1880080c 	andi	r2,r3,32
     f38:	1001271e 	bne	r2,zero,13d8 <___vfprintf_internal_r+0xf54>
     f3c:	d9414c17 	ldw	r5,1328(sp)
     f40:	2880040c 	andi	r2,r5,16
     f44:	1002bc1e 	bne	r2,zero,1a38 <___vfprintf_internal_r+0x15b4>
     f48:	d9814c17 	ldw	r6,1328(sp)
     f4c:	3080100c 	andi	r2,r6,64
     f50:	1002b926 	beq	r2,zero,1a38 <___vfprintf_internal_r+0x15b4>
     f54:	3c00000b 	ldhu	r16,0(r7)
     f58:	0009883a 	mov	r4,zero
     f5c:	39c00104 	addi	r7,r7,4
     f60:	0023883a 	mov	r17,zero
     f64:	d9c14015 	stw	r7,1280(sp)
     f68:	d8000405 	stb	zero,16(sp)
     f6c:	003fd306 	br	ebc <___vfprintf_internal_r+0xa38>
     f70:	d9014c17 	ldw	r4,1328(sp)
     f74:	21000414 	ori	r4,r4,16
     f78:	d9014c15 	stw	r4,1328(sp)
     f7c:	d9414c17 	ldw	r5,1328(sp)
     f80:	2880080c 	andi	r2,r5,32
     f84:	1001081e 	bne	r2,zero,13a8 <___vfprintf_internal_r+0xf24>
     f88:	d8c14c17 	ldw	r3,1328(sp)
     f8c:	1880040c 	andi	r2,r3,16
     f90:	1002b61e 	bne	r2,zero,1a6c <___vfprintf_internal_r+0x15e8>
     f94:	d9014c17 	ldw	r4,1328(sp)
     f98:	2080100c 	andi	r2,r4,64
     f9c:	1002b326 	beq	r2,zero,1a6c <___vfprintf_internal_r+0x15e8>
     fa0:	3c00000b 	ldhu	r16,0(r7)
     fa4:	01000044 	movi	r4,1
     fa8:	39c00104 	addi	r7,r7,4
     fac:	0023883a 	mov	r17,zero
     fb0:	d9c14015 	stw	r7,1280(sp)
     fb4:	d8000405 	stb	zero,16(sp)
     fb8:	003fc006 	br	ebc <___vfprintf_internal_r+0xa38>
     fbc:	d9014f17 	ldw	r4,1340(sp)
     fc0:	b00b883a 	mov	r5,r22
     fc4:	d9800c04 	addi	r6,sp,48
     fc8:	000042c0 	call	42c <__sprint_r>
     fcc:	103ee51e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
     fd0:	dc800e17 	ldw	r18,56(sp)
     fd4:	d8c01904 	addi	r3,sp,100
     fd8:	d9814c17 	ldw	r6,1328(sp)
     fdc:	3080004c 	andi	r2,r6,1
     fe0:	1005003a 	cmpeq	r2,r2,zero
     fe4:	103ea51e 	bne	r2,zero,a7c <___vfprintf_internal_r+0x5f8>
     fe8:	00800044 	movi	r2,1
     fec:	dc400d17 	ldw	r17,52(sp)
     ff0:	18800115 	stw	r2,4(r3)
     ff4:	d8814917 	ldw	r2,1316(sp)
     ff8:	94800044 	addi	r18,r18,1
     ffc:	8c400044 	addi	r17,r17,1
    1000:	18800015 	stw	r2,0(r3)
    1004:	008001c4 	movi	r2,7
    1008:	dc800e15 	stw	r18,56(sp)
    100c:	dc400d15 	stw	r17,52(sp)
    1010:	1442240e 	bge	r2,r17,18a4 <___vfprintf_internal_r+0x1420>
    1014:	d9014f17 	ldw	r4,1340(sp)
    1018:	b00b883a 	mov	r5,r22
    101c:	d9800c04 	addi	r6,sp,48
    1020:	000042c0 	call	42c <__sprint_r>
    1024:	103ecf1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1028:	dc800e17 	ldw	r18,56(sp)
    102c:	d8c01904 	addi	r3,sp,100
    1030:	003e9206 	br	a7c <___vfprintf_internal_r+0x5f8>
    1034:	d9014f17 	ldw	r4,1340(sp)
    1038:	b00b883a 	mov	r5,r22
    103c:	d9800c04 	addi	r6,sp,48
    1040:	000042c0 	call	42c <__sprint_r>
    1044:	103ec026 	beq	r2,zero,b48 <___vfprintf_internal_r+0x6c4>
    1048:	003ec606 	br	b64 <___vfprintf_internal_r+0x6e0>
    104c:	d9014f17 	ldw	r4,1340(sp)
    1050:	b00b883a 	mov	r5,r22
    1054:	d9800c04 	addi	r6,sp,48
    1058:	d9c15115 	stw	r7,1348(sp)
    105c:	000042c0 	call	42c <__sprint_r>
    1060:	d9c15117 	ldw	r7,1348(sp)
    1064:	103ebf1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1068:	dc800e17 	ldw	r18,56(sp)
    106c:	dc400d17 	ldw	r17,52(sp)
    1070:	dd401904 	addi	r21,sp,100
    1074:	003e7406 	br	a48 <___vfprintf_internal_r+0x5c4>
    1078:	d9014f17 	ldw	r4,1340(sp)
    107c:	b00b883a 	mov	r5,r22
    1080:	d9800c04 	addi	r6,sp,48
    1084:	d9c15115 	stw	r7,1348(sp)
    1088:	000042c0 	call	42c <__sprint_r>
    108c:	d9c15117 	ldw	r7,1348(sp)
    1090:	103eb41e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1094:	dd401904 	addi	r21,sp,100
    1098:	003d6d06 	br	650 <___vfprintf_internal_r+0x1cc>
    109c:	d9014f17 	ldw	r4,1340(sp)
    10a0:	b00b883a 	mov	r5,r22
    10a4:	d9800c04 	addi	r6,sp,48
    10a8:	d9c15115 	stw	r7,1348(sp)
    10ac:	000042c0 	call	42c <__sprint_r>
    10b0:	d9c15117 	ldw	r7,1348(sp)
    10b4:	103eab1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    10b8:	dc800e17 	ldw	r18,56(sp)
    10bc:	dc400d17 	ldw	r17,52(sp)
    10c0:	dd401904 	addi	r21,sp,100
    10c4:	003e3406 	br	998 <___vfprintf_internal_r+0x514>
    10c8:	d9014f17 	ldw	r4,1340(sp)
    10cc:	b00b883a 	mov	r5,r22
    10d0:	d9800c04 	addi	r6,sp,48
    10d4:	d9c15115 	stw	r7,1348(sp)
    10d8:	000042c0 	call	42c <__sprint_r>
    10dc:	d9c15117 	ldw	r7,1348(sp)
    10e0:	103ea01e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    10e4:	dc800e17 	ldw	r18,56(sp)
    10e8:	dc400d17 	ldw	r17,52(sp)
    10ec:	dd401904 	addi	r21,sp,100
    10f0:	003e1c06 	br	964 <___vfprintf_internal_r+0x4e0>
    10f4:	d9014f17 	ldw	r4,1340(sp)
    10f8:	b00b883a 	mov	r5,r22
    10fc:	d9800c04 	addi	r6,sp,48
    1100:	d9c15115 	stw	r7,1348(sp)
    1104:	000042c0 	call	42c <__sprint_r>
    1108:	d9c15117 	ldw	r7,1348(sp)
    110c:	103e951e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1110:	dc800e17 	ldw	r18,56(sp)
    1114:	dc400d17 	ldw	r17,52(sp)
    1118:	dd401904 	addi	r21,sp,100
    111c:	003e0406 	br	930 <___vfprintf_internal_r+0x4ac>
    1120:	d9000517 	ldw	r4,20(sp)
    1124:	0102580e 	bge	zero,r4,1a88 <___vfprintf_internal_r+0x1604>
    1128:	d9814717 	ldw	r6,1308(sp)
    112c:	21807a16 	blt	r4,r6,1318 <___vfprintf_internal_r+0xe94>
    1130:	d8814117 	ldw	r2,1284(sp)
    1134:	91a5883a 	add	r18,r18,r6
    1138:	8c400044 	addi	r17,r17,1
    113c:	a8800015 	stw	r2,0(r21)
    1140:	008001c4 	movi	r2,7
    1144:	a9800115 	stw	r6,4(r21)
    1148:	dc800e15 	stw	r18,56(sp)
    114c:	dc400d15 	stw	r17,52(sp)
    1150:	1442fc16 	blt	r2,r17,1d44 <___vfprintf_internal_r+0x18c0>
    1154:	a8c00204 	addi	r3,r21,8
    1158:	d9414717 	ldw	r5,1308(sp)
    115c:	2161c83a 	sub	r16,r4,r5
    1160:	043f9d0e 	bge	zero,r16,fd8 <___vfprintf_internal_r+0xb54>
    1164:	00800404 	movi	r2,16
    1168:	1402190e 	bge	r2,r16,19d0 <___vfprintf_internal_r+0x154c>
    116c:	dc400d17 	ldw	r17,52(sp)
    1170:	1027883a 	mov	r19,r2
    1174:	07000074 	movhi	fp,1
    1178:	e734e184 	addi	fp,fp,-11386
    117c:	050001c4 	movi	r20,7
    1180:	00000306 	br	1190 <___vfprintf_internal_r+0xd0c>
    1184:	18c00204 	addi	r3,r3,8
    1188:	843ffc04 	addi	r16,r16,-16
    118c:	9c02130e 	bge	r19,r16,19dc <___vfprintf_internal_r+0x1558>
    1190:	94800404 	addi	r18,r18,16
    1194:	8c400044 	addi	r17,r17,1
    1198:	1f000015 	stw	fp,0(r3)
    119c:	1cc00115 	stw	r19,4(r3)
    11a0:	dc800e15 	stw	r18,56(sp)
    11a4:	dc400d15 	stw	r17,52(sp)
    11a8:	a47ff60e 	bge	r20,r17,1184 <___vfprintf_internal_r+0xd00>
    11ac:	d9014f17 	ldw	r4,1340(sp)
    11b0:	b00b883a 	mov	r5,r22
    11b4:	d9800c04 	addi	r6,sp,48
    11b8:	000042c0 	call	42c <__sprint_r>
    11bc:	103e691e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    11c0:	dc800e17 	ldw	r18,56(sp)
    11c4:	dc400d17 	ldw	r17,52(sp)
    11c8:	d8c01904 	addi	r3,sp,100
    11cc:	003fee06 	br	1188 <___vfprintf_internal_r+0xd04>
    11d0:	d8814717 	ldw	r2,1308(sp)
    11d4:	143fffc4 	addi	r16,r2,-1
    11d8:	043e970e 	bge	zero,r16,c38 <___vfprintf_internal_r+0x7b4>
    11dc:	00800404 	movi	r2,16
    11e0:	1400180e 	bge	r2,r16,1244 <___vfprintf_internal_r+0xdc0>
    11e4:	1029883a 	mov	r20,r2
    11e8:	07000074 	movhi	fp,1
    11ec:	e734e184 	addi	fp,fp,-11386
    11f0:	054001c4 	movi	r21,7
    11f4:	00000306 	br	1204 <___vfprintf_internal_r+0xd80>
    11f8:	9cc00204 	addi	r19,r19,8
    11fc:	843ffc04 	addi	r16,r16,-16
    1200:	a400120e 	bge	r20,r16,124c <___vfprintf_internal_r+0xdc8>
    1204:	94800404 	addi	r18,r18,16
    1208:	8c400044 	addi	r17,r17,1
    120c:	9f000015 	stw	fp,0(r19)
    1210:	9d000115 	stw	r20,4(r19)
    1214:	dc800e15 	stw	r18,56(sp)
    1218:	dc400d15 	stw	r17,52(sp)
    121c:	ac7ff60e 	bge	r21,r17,11f8 <___vfprintf_internal_r+0xd74>
    1220:	d9014f17 	ldw	r4,1340(sp)
    1224:	b00b883a 	mov	r5,r22
    1228:	d9800c04 	addi	r6,sp,48
    122c:	000042c0 	call	42c <__sprint_r>
    1230:	103e4c1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1234:	dc800e17 	ldw	r18,56(sp)
    1238:	dc400d17 	ldw	r17,52(sp)
    123c:	dcc01904 	addi	r19,sp,100
    1240:	003fee06 	br	11fc <___vfprintf_internal_r+0xd78>
    1244:	07000074 	movhi	fp,1
    1248:	e734e184 	addi	fp,fp,-11386
    124c:	9425883a 	add	r18,r18,r16
    1250:	8c400044 	addi	r17,r17,1
    1254:	008001c4 	movi	r2,7
    1258:	9f000015 	stw	fp,0(r19)
    125c:	9c000115 	stw	r16,4(r19)
    1260:	dc800e15 	stw	r18,56(sp)
    1264:	dc400d15 	stw	r17,52(sp)
    1268:	147e720e 	bge	r2,r17,c34 <___vfprintf_internal_r+0x7b0>
    126c:	d9014f17 	ldw	r4,1340(sp)
    1270:	b00b883a 	mov	r5,r22
    1274:	d9800c04 	addi	r6,sp,48
    1278:	000042c0 	call	42c <__sprint_r>
    127c:	103e391e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1280:	dc800e17 	ldw	r18,56(sp)
    1284:	dc400d17 	ldw	r17,52(sp)
    1288:	dcc01904 	addi	r19,sp,100
    128c:	003e6a06 	br	c38 <___vfprintf_internal_r+0x7b4>
    1290:	d9014f17 	ldw	r4,1340(sp)
    1294:	b00b883a 	mov	r5,r22
    1298:	d9800c04 	addi	r6,sp,48
    129c:	d9c15115 	stw	r7,1348(sp)
    12a0:	000042c0 	call	42c <__sprint_r>
    12a4:	d9c15117 	ldw	r7,1348(sp)
    12a8:	103e2e1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    12ac:	dc800e17 	ldw	r18,56(sp)
    12b0:	dc400d17 	ldw	r17,52(sp)
    12b4:	dd401904 	addi	r21,sp,100
    12b8:	003dba06 	br	9a4 <___vfprintf_internal_r+0x520>
    12bc:	d9014f17 	ldw	r4,1340(sp)
    12c0:	b00b883a 	mov	r5,r22
    12c4:	d9800c04 	addi	r6,sp,48
    12c8:	000042c0 	call	42c <__sprint_r>
    12cc:	103e251e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    12d0:	dc800e17 	ldw	r18,56(sp)
    12d4:	dc400d17 	ldw	r17,52(sp)
    12d8:	dcc01904 	addi	r19,sp,100
    12dc:	003e4206 	br	be8 <___vfprintf_internal_r+0x764>
    12e0:	d9014f17 	ldw	r4,1340(sp)
    12e4:	b00b883a 	mov	r5,r22
    12e8:	d9800c04 	addi	r6,sp,48
    12ec:	000042c0 	call	42c <__sprint_r>
    12f0:	103e1c1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    12f4:	dc800e17 	ldw	r18,56(sp)
    12f8:	dc400d17 	ldw	r17,52(sp)
    12fc:	d8c01904 	addi	r3,sp,100
    1300:	003e2e06 	br	bbc <___vfprintf_internal_r+0x738>
    1304:	d9414c17 	ldw	r5,1328(sp)
    1308:	2880004c 	andi	r2,r5,1
    130c:	1005003a 	cmpeq	r2,r2,zero
    1310:	103dda1e 	bne	r2,zero,a7c <___vfprintf_internal_r+0x5f8>
    1314:	003e9f06 	br	d94 <___vfprintf_internal_r+0x910>
    1318:	d8c14117 	ldw	r3,1284(sp)
    131c:	9125883a 	add	r18,r18,r4
    1320:	8c400044 	addi	r17,r17,1
    1324:	008001c4 	movi	r2,7
    1328:	a8c00015 	stw	r3,0(r21)
    132c:	a9000115 	stw	r4,4(r21)
    1330:	dc800e15 	stw	r18,56(sp)
    1334:	dc400d15 	stw	r17,52(sp)
    1338:	14426c16 	blt	r2,r17,1cec <___vfprintf_internal_r+0x1868>
    133c:	a8c00204 	addi	r3,r21,8
    1340:	d9414917 	ldw	r5,1316(sp)
    1344:	00800044 	movi	r2,1
    1348:	94800044 	addi	r18,r18,1
    134c:	8c400044 	addi	r17,r17,1
    1350:	18800115 	stw	r2,4(r3)
    1354:	008001c4 	movi	r2,7
    1358:	19400015 	stw	r5,0(r3)
    135c:	dc800e15 	stw	r18,56(sp)
    1360:	dc400d15 	stw	r17,52(sp)
    1364:	2021883a 	mov	r16,r4
    1368:	14425616 	blt	r2,r17,1cc4 <___vfprintf_internal_r+0x1840>
    136c:	19400204 	addi	r5,r3,8
    1370:	d9814717 	ldw	r6,1308(sp)
    1374:	8c400044 	addi	r17,r17,1
    1378:	dc400d15 	stw	r17,52(sp)
    137c:	3107c83a 	sub	r3,r6,r4
    1380:	d9014117 	ldw	r4,1284(sp)
    1384:	90e5883a 	add	r18,r18,r3
    1388:	28c00115 	stw	r3,4(r5)
    138c:	8105883a 	add	r2,r16,r4
    1390:	28800015 	stw	r2,0(r5)
    1394:	008001c4 	movi	r2,7
    1398:	dc800e15 	stw	r18,56(sp)
    139c:	147f1d16 	blt	r2,r17,1014 <___vfprintf_internal_r+0xb90>
    13a0:	28c00204 	addi	r3,r5,8
    13a4:	003db506 	br	a7c <___vfprintf_internal_r+0x5f8>
    13a8:	3c000017 	ldw	r16,0(r7)
    13ac:	3c400117 	ldw	r17,4(r7)
    13b0:	39800204 	addi	r6,r7,8
    13b4:	01000044 	movi	r4,1
    13b8:	d9814015 	stw	r6,1280(sp)
    13bc:	d8000405 	stb	zero,16(sp)
    13c0:	003ebe06 	br	ebc <___vfprintf_internal_r+0xa38>
    13c4:	3c000017 	ldw	r16,0(r7)
    13c8:	3c400117 	ldw	r17,4(r7)
    13cc:	38800204 	addi	r2,r7,8
    13d0:	d8814015 	stw	r2,1280(sp)
    13d4:	003eb706 	br	eb4 <___vfprintf_internal_r+0xa30>
    13d8:	3c000017 	ldw	r16,0(r7)
    13dc:	3c400117 	ldw	r17,4(r7)
    13e0:	39000204 	addi	r4,r7,8
    13e4:	d9014015 	stw	r4,1280(sp)
    13e8:	0009883a 	mov	r4,zero
    13ec:	d8000405 	stb	zero,16(sp)
    13f0:	003eb206 	br	ebc <___vfprintf_internal_r+0xa38>
    13f4:	38c00017 	ldw	r3,0(r7)
    13f8:	39c00104 	addi	r7,r7,4
    13fc:	d8c14a15 	stw	r3,1320(sp)
    1400:	1800d70e 	bge	r3,zero,1760 <___vfprintf_internal_r+0x12dc>
    1404:	00c7c83a 	sub	r3,zero,r3
    1408:	d8c14a15 	stw	r3,1320(sp)
    140c:	d9014c17 	ldw	r4,1328(sp)
    1410:	b8c00007 	ldb	r3,0(r23)
    1414:	21000114 	ori	r4,r4,4
    1418:	d9014c15 	stw	r4,1328(sp)
    141c:	003c9806 	br	680 <___vfprintf_internal_r+0x1fc>
    1420:	d9814c17 	ldw	r6,1328(sp)
    1424:	3080080c 	andi	r2,r6,32
    1428:	1001f626 	beq	r2,zero,1c04 <___vfprintf_internal_r+0x1780>
    142c:	d9014b17 	ldw	r4,1324(sp)
    1430:	38800017 	ldw	r2,0(r7)
    1434:	39c00104 	addi	r7,r7,4
    1438:	d9c14015 	stw	r7,1280(sp)
    143c:	2007d7fa 	srai	r3,r4,31
    1440:	d9c14017 	ldw	r7,1280(sp)
    1444:	11000015 	stw	r4,0(r2)
    1448:	10c00115 	stw	r3,4(r2)
    144c:	003c6906 	br	5f4 <___vfprintf_internal_r+0x170>
    1450:	b8c00007 	ldb	r3,0(r23)
    1454:	00801b04 	movi	r2,108
    1458:	18825526 	beq	r3,r2,1db0 <___vfprintf_internal_r+0x192c>
    145c:	d9414c17 	ldw	r5,1328(sp)
    1460:	29400414 	ori	r5,r5,16
    1464:	d9414c15 	stw	r5,1328(sp)
    1468:	003c8506 	br	680 <___vfprintf_internal_r+0x1fc>
    146c:	d9814c17 	ldw	r6,1328(sp)
    1470:	b8c00007 	ldb	r3,0(r23)
    1474:	31800814 	ori	r6,r6,32
    1478:	d9814c15 	stw	r6,1328(sp)
    147c:	003c8006 	br	680 <___vfprintf_internal_r+0x1fc>
    1480:	d8814c17 	ldw	r2,1328(sp)
    1484:	3c000017 	ldw	r16,0(r7)
    1488:	00c01e04 	movi	r3,120
    148c:	10800094 	ori	r2,r2,2
    1490:	d8814c15 	stw	r2,1328(sp)
    1494:	39c00104 	addi	r7,r7,4
    1498:	01400074 	movhi	r5,1
    149c:	2974ca04 	addi	r5,r5,-11480
    14a0:	00800c04 	movi	r2,48
    14a4:	0023883a 	mov	r17,zero
    14a8:	01000084 	movi	r4,2
    14ac:	d9c14015 	stw	r7,1280(sp)
    14b0:	d8c14d15 	stw	r3,1332(sp)
    14b4:	d9414415 	stw	r5,1296(sp)
    14b8:	d8800445 	stb	r2,17(sp)
    14bc:	d8c00485 	stb	r3,18(sp)
    14c0:	d8000405 	stb	zero,16(sp)
    14c4:	003e7d06 	br	ebc <___vfprintf_internal_r+0xa38>
    14c8:	d8814c17 	ldw	r2,1328(sp)
    14cc:	b8c00007 	ldb	r3,0(r23)
    14d0:	10801014 	ori	r2,r2,64
    14d4:	d8814c15 	stw	r2,1328(sp)
    14d8:	003c6906 	br	680 <___vfprintf_internal_r+0x1fc>
    14dc:	d9414c17 	ldw	r5,1328(sp)
    14e0:	2880020c 	andi	r2,r5,8
    14e4:	1001e526 	beq	r2,zero,1c7c <___vfprintf_internal_r+0x17f8>
    14e8:	39800017 	ldw	r6,0(r7)
    14ec:	38800204 	addi	r2,r7,8
    14f0:	d8814015 	stw	r2,1280(sp)
    14f4:	d9814215 	stw	r6,1288(sp)
    14f8:	39c00117 	ldw	r7,4(r7)
    14fc:	d9c14315 	stw	r7,1292(sp)
    1500:	d9014217 	ldw	r4,1288(sp)
    1504:	d9414317 	ldw	r5,1292(sp)
    1508:	0006f340 	call	6f34 <__isinfd>
    150c:	10021d26 	beq	r2,zero,1d84 <___vfprintf_internal_r+0x1900>
    1510:	d9014217 	ldw	r4,1288(sp)
    1514:	d9414317 	ldw	r5,1292(sp)
    1518:	000d883a 	mov	r6,zero
    151c:	000f883a 	mov	r7,zero
    1520:	00091440 	call	9144 <__ltdf2>
    1524:	1002d016 	blt	r2,zero,2068 <___vfprintf_internal_r+0x1be4>
    1528:	d9414d17 	ldw	r5,1332(sp)
    152c:	008011c4 	movi	r2,71
    1530:	11421016 	blt	r2,r5,1d74 <___vfprintf_internal_r+0x18f0>
    1534:	01800074 	movhi	r6,1
    1538:	31b4cf04 	addi	r6,r6,-11460
    153c:	d9814115 	stw	r6,1284(sp)
    1540:	d9014c17 	ldw	r4,1328(sp)
    1544:	00c000c4 	movi	r3,3
    1548:	00bfdfc4 	movi	r2,-129
    154c:	2088703a 	and	r4,r4,r2
    1550:	180f883a 	mov	r7,r3
    1554:	d8c14515 	stw	r3,1300(sp)
    1558:	d9014c15 	stw	r4,1328(sp)
    155c:	d8014615 	stw	zero,1304(sp)
    1560:	003e6a06 	br	f0c <___vfprintf_internal_r+0xa88>
    1564:	38800017 	ldw	r2,0(r7)
    1568:	00c00044 	movi	r3,1
    156c:	39c00104 	addi	r7,r7,4
    1570:	d9c14015 	stw	r7,1280(sp)
    1574:	d9000f04 	addi	r4,sp,60
    1578:	180f883a 	mov	r7,r3
    157c:	d8c14515 	stw	r3,1300(sp)
    1580:	d9014115 	stw	r4,1284(sp)
    1584:	d8800f05 	stb	r2,60(sp)
    1588:	d8000405 	stb	zero,16(sp)
    158c:	003cac06 	br	840 <___vfprintf_internal_r+0x3bc>
    1590:	01400074 	movhi	r5,1
    1594:	2974d504 	addi	r5,r5,-11436
    1598:	d9414415 	stw	r5,1296(sp)
    159c:	d9814c17 	ldw	r6,1328(sp)
    15a0:	3080080c 	andi	r2,r6,32
    15a4:	1000ff26 	beq	r2,zero,19a4 <___vfprintf_internal_r+0x1520>
    15a8:	3c000017 	ldw	r16,0(r7)
    15ac:	3c400117 	ldw	r17,4(r7)
    15b0:	38800204 	addi	r2,r7,8
    15b4:	d8814015 	stw	r2,1280(sp)
    15b8:	d9414c17 	ldw	r5,1328(sp)
    15bc:	2880004c 	andi	r2,r5,1
    15c0:	1005003a 	cmpeq	r2,r2,zero
    15c4:	1000b91e 	bne	r2,zero,18ac <___vfprintf_internal_r+0x1428>
    15c8:	8444b03a 	or	r2,r16,r17
    15cc:	1000b726 	beq	r2,zero,18ac <___vfprintf_internal_r+0x1428>
    15d0:	d9814d17 	ldw	r6,1332(sp)
    15d4:	29400094 	ori	r5,r5,2
    15d8:	00800c04 	movi	r2,48
    15dc:	01000084 	movi	r4,2
    15e0:	d9414c15 	stw	r5,1328(sp)
    15e4:	d8800445 	stb	r2,17(sp)
    15e8:	d9800485 	stb	r6,18(sp)
    15ec:	d8000405 	stb	zero,16(sp)
    15f0:	003e3206 	br	ebc <___vfprintf_internal_r+0xa38>
    15f4:	01800074 	movhi	r6,1
    15f8:	31b4ca04 	addi	r6,r6,-11480
    15fc:	d9814415 	stw	r6,1296(sp)
    1600:	003fe606 	br	159c <___vfprintf_internal_r+0x1118>
    1604:	00800ac4 	movi	r2,43
    1608:	d8800405 	stb	r2,16(sp)
    160c:	b8c00007 	ldb	r3,0(r23)
    1610:	003c1b06 	br	680 <___vfprintf_internal_r+0x1fc>
    1614:	d8814c17 	ldw	r2,1328(sp)
    1618:	b8c00007 	ldb	r3,0(r23)
    161c:	10800054 	ori	r2,r2,1
    1620:	d8814c15 	stw	r2,1328(sp)
    1624:	003c1606 	br	680 <___vfprintf_internal_r+0x1fc>
    1628:	d8800407 	ldb	r2,16(sp)
    162c:	10004c1e 	bne	r2,zero,1760 <___vfprintf_internal_r+0x12dc>
    1630:	00800804 	movi	r2,32
    1634:	d8800405 	stb	r2,16(sp)
    1638:	b8c00007 	ldb	r3,0(r23)
    163c:	003c1006 	br	680 <___vfprintf_internal_r+0x1fc>
    1640:	d9814c17 	ldw	r6,1328(sp)
    1644:	b8c00007 	ldb	r3,0(r23)
    1648:	31800214 	ori	r6,r6,8
    164c:	d9814c15 	stw	r6,1328(sp)
    1650:	003c0b06 	br	680 <___vfprintf_internal_r+0x1fc>
    1654:	0009883a 	mov	r4,zero
    1658:	04000244 	movi	r16,9
    165c:	01400284 	movi	r5,10
    1660:	d9c15115 	stw	r7,1348(sp)
    1664:	000967c0 	call	967c <__mulsi3>
    1668:	b9000007 	ldb	r4,0(r23)
    166c:	d8c14d17 	ldw	r3,1332(sp)
    1670:	bdc00044 	addi	r23,r23,1
    1674:	d9014d15 	stw	r4,1332(sp)
    1678:	d9414d17 	ldw	r5,1332(sp)
    167c:	1885883a 	add	r2,r3,r2
    1680:	113ff404 	addi	r4,r2,-48
    1684:	28bff404 	addi	r2,r5,-48
    1688:	d9c15117 	ldw	r7,1348(sp)
    168c:	80bff32e 	bgeu	r16,r2,165c <___vfprintf_internal_r+0x11d8>
    1690:	d9014a15 	stw	r4,1320(sp)
    1694:	003bfc06 	br	688 <___vfprintf_internal_r+0x204>
    1698:	d8814c17 	ldw	r2,1328(sp)
    169c:	b8c00007 	ldb	r3,0(r23)
    16a0:	10802014 	ori	r2,r2,128
    16a4:	d8814c15 	stw	r2,1328(sp)
    16a8:	003bf506 	br	680 <___vfprintf_internal_r+0x1fc>
    16ac:	b8c00007 	ldb	r3,0(r23)
    16b0:	00800a84 	movi	r2,42
    16b4:	bdc00044 	addi	r23,r23,1
    16b8:	18831826 	beq	r3,r2,231c <___vfprintf_internal_r+0x1e98>
    16bc:	d8c14d15 	stw	r3,1332(sp)
    16c0:	18bff404 	addi	r2,r3,-48
    16c4:	00c00244 	movi	r3,9
    16c8:	18827b36 	bltu	r3,r2,20b8 <___vfprintf_internal_r+0x1c34>
    16cc:	1821883a 	mov	r16,r3
    16d0:	0009883a 	mov	r4,zero
    16d4:	01400284 	movi	r5,10
    16d8:	d9c15115 	stw	r7,1348(sp)
    16dc:	000967c0 	call	967c <__mulsi3>
    16e0:	d9414d17 	ldw	r5,1332(sp)
    16e4:	b9800007 	ldb	r6,0(r23)
    16e8:	d9c15117 	ldw	r7,1348(sp)
    16ec:	1145883a 	add	r2,r2,r5
    16f0:	113ff404 	addi	r4,r2,-48
    16f4:	30bff404 	addi	r2,r6,-48
    16f8:	d9814d15 	stw	r6,1332(sp)
    16fc:	bdc00044 	addi	r23,r23,1
    1700:	80bff42e 	bgeu	r16,r2,16d4 <___vfprintf_internal_r+0x1250>
    1704:	2027883a 	mov	r19,r4
    1708:	203bdf0e 	bge	r4,zero,688 <___vfprintf_internal_r+0x204>
    170c:	04ffffc4 	movi	r19,-1
    1710:	003bdd06 	br	688 <___vfprintf_internal_r+0x204>
    1714:	d8000405 	stb	zero,16(sp)
    1718:	39800017 	ldw	r6,0(r7)
    171c:	39c00104 	addi	r7,r7,4
    1720:	d9c14015 	stw	r7,1280(sp)
    1724:	d9814115 	stw	r6,1284(sp)
    1728:	3001c926 	beq	r6,zero,1e50 <___vfprintf_internal_r+0x19cc>
    172c:	98000e16 	blt	r19,zero,1768 <___vfprintf_internal_r+0x12e4>
    1730:	d9014117 	ldw	r4,1284(sp)
    1734:	000b883a 	mov	r5,zero
    1738:	980d883a 	mov	r6,r19
    173c:	00055b80 	call	55b8 <memchr>
    1740:	10025926 	beq	r2,zero,20a8 <___vfprintf_internal_r+0x1c24>
    1744:	d8c14117 	ldw	r3,1284(sp)
    1748:	10cfc83a 	sub	r7,r2,r3
    174c:	99c19e16 	blt	r19,r7,1dc8 <___vfprintf_internal_r+0x1944>
    1750:	d9c14515 	stw	r7,1300(sp)
    1754:	38000916 	blt	r7,zero,177c <___vfprintf_internal_r+0x12f8>
    1758:	d8014615 	stw	zero,1304(sp)
    175c:	003deb06 	br	f0c <___vfprintf_internal_r+0xa88>
    1760:	b8c00007 	ldb	r3,0(r23)
    1764:	003bc606 	br	680 <___vfprintf_internal_r+0x1fc>
    1768:	d9014117 	ldw	r4,1284(sp)
    176c:	000721c0 	call	721c <strlen>
    1770:	d8814515 	stw	r2,1300(sp)
    1774:	100f883a 	mov	r7,r2
    1778:	103ff70e 	bge	r2,zero,1758 <___vfprintf_internal_r+0x12d4>
    177c:	d8014515 	stw	zero,1300(sp)
    1780:	d8014615 	stw	zero,1304(sp)
    1784:	003de106 	br	f0c <___vfprintf_internal_r+0xa88>
    1788:	20c03fcc 	andi	r3,r4,255
    178c:	00800044 	movi	r2,1
    1790:	18802d26 	beq	r3,r2,1848 <___vfprintf_internal_r+0x13c4>
    1794:	18800e36 	bltu	r3,r2,17d0 <___vfprintf_internal_r+0x134c>
    1798:	00800084 	movi	r2,2
    179c:	1880fa26 	beq	r3,r2,1b88 <___vfprintf_internal_r+0x1704>
    17a0:	01000074 	movhi	r4,1
    17a4:	2134da04 	addi	r4,r4,-11416
    17a8:	000721c0 	call	721c <strlen>
    17ac:	100f883a 	mov	r7,r2
    17b0:	dcc14515 	stw	r19,1300(sp)
    17b4:	9880010e 	bge	r19,r2,17bc <___vfprintf_internal_r+0x1338>
    17b8:	d8814515 	stw	r2,1300(sp)
    17bc:	00800074 	movhi	r2,1
    17c0:	10b4da04 	addi	r2,r2,-11416
    17c4:	dcc14615 	stw	r19,1304(sp)
    17c8:	d8814115 	stw	r2,1284(sp)
    17cc:	003dcf06 	br	f0c <___vfprintf_internal_r+0xa88>
    17d0:	d9401904 	addi	r5,sp,100
    17d4:	dd000f04 	addi	r20,sp,60
    17d8:	d9414115 	stw	r5,1284(sp)
    17dc:	880a977a 	slli	r5,r17,29
    17e0:	d9814117 	ldw	r6,1284(sp)
    17e4:	8004d0fa 	srli	r2,r16,3
    17e8:	8806d0fa 	srli	r3,r17,3
    17ec:	810001cc 	andi	r4,r16,7
    17f0:	2884b03a 	or	r2,r5,r2
    17f4:	31bfffc4 	addi	r6,r6,-1
    17f8:	21000c04 	addi	r4,r4,48
    17fc:	d9814115 	stw	r6,1284(sp)
    1800:	10cab03a 	or	r5,r2,r3
    1804:	31000005 	stb	r4,0(r6)
    1808:	1021883a 	mov	r16,r2
    180c:	1823883a 	mov	r17,r3
    1810:	283ff21e 	bne	r5,zero,17dc <___vfprintf_internal_r+0x1358>
    1814:	d8c14c17 	ldw	r3,1328(sp)
    1818:	1880004c 	andi	r2,r3,1
    181c:	1005003a 	cmpeq	r2,r2,zero
    1820:	103db31e 	bne	r2,zero,ef0 <___vfprintf_internal_r+0xa6c>
    1824:	20803fcc 	andi	r2,r4,255
    1828:	1080201c 	xori	r2,r2,128
    182c:	10bfe004 	addi	r2,r2,-128
    1830:	00c00c04 	movi	r3,48
    1834:	10fdae26 	beq	r2,r3,ef0 <___vfprintf_internal_r+0xa6c>
    1838:	31bfffc4 	addi	r6,r6,-1
    183c:	d9814115 	stw	r6,1284(sp)
    1840:	30c00005 	stb	r3,0(r6)
    1844:	003daa06 	br	ef0 <___vfprintf_internal_r+0xa6c>
    1848:	88800068 	cmpgeui	r2,r17,1
    184c:	10002c1e 	bne	r2,zero,1900 <___vfprintf_internal_r+0x147c>
    1850:	8800021e 	bne	r17,zero,185c <___vfprintf_internal_r+0x13d8>
    1854:	00800244 	movi	r2,9
    1858:	14002936 	bltu	r2,r16,1900 <___vfprintf_internal_r+0x147c>
    185c:	d90018c4 	addi	r4,sp,99
    1860:	dd000f04 	addi	r20,sp,60
    1864:	d9014115 	stw	r4,1284(sp)
    1868:	d9014117 	ldw	r4,1284(sp)
    186c:	80800c04 	addi	r2,r16,48
    1870:	20800005 	stb	r2,0(r4)
    1874:	003d9e06 	br	ef0 <___vfprintf_internal_r+0xa6c>
    1878:	dc400d17 	ldw	r17,52(sp)
    187c:	07000074 	movhi	fp,1
    1880:	e734e184 	addi	fp,fp,-11386
    1884:	9425883a 	add	r18,r18,r16
    1888:	8c400044 	addi	r17,r17,1
    188c:	008001c4 	movi	r2,7
    1890:	1f000015 	stw	fp,0(r3)
    1894:	1c000115 	stw	r16,4(r3)
    1898:	dc800e15 	stw	r18,56(sp)
    189c:	dc400d15 	stw	r17,52(sp)
    18a0:	147ddc16 	blt	r2,r17,1014 <___vfprintf_internal_r+0xb90>
    18a4:	18c00204 	addi	r3,r3,8
    18a8:	003c7406 	br	a7c <___vfprintf_internal_r+0x5f8>
    18ac:	01000084 	movi	r4,2
    18b0:	d8000405 	stb	zero,16(sp)
    18b4:	003d8106 	br	ebc <___vfprintf_internal_r+0xa38>
    18b8:	d9814c17 	ldw	r6,1328(sp)
    18bc:	30c4703a 	and	r2,r6,r3
    18c0:	1005003a 	cmpeq	r2,r2,zero
    18c4:	103cb326 	beq	r2,zero,b94 <___vfprintf_internal_r+0x710>
    18c8:	d9014117 	ldw	r4,1284(sp)
    18cc:	94800044 	addi	r18,r18,1
    18d0:	8c400044 	addi	r17,r17,1
    18d4:	008001c4 	movi	r2,7
    18d8:	a9000015 	stw	r4,0(r21)
    18dc:	a8c00115 	stw	r3,4(r21)
    18e0:	dc800e15 	stw	r18,56(sp)
    18e4:	dc400d15 	stw	r17,52(sp)
    18e8:	147e6016 	blt	r2,r17,126c <___vfprintf_internal_r+0xde8>
    18ec:	acc00204 	addi	r19,r21,8
    18f0:	003cd106 	br	c38 <___vfprintf_internal_r+0x7b4>
    18f4:	07000074 	movhi	fp,1
    18f8:	e734e184 	addi	fp,fp,-11386
    18fc:	003c4906 	br	a24 <___vfprintf_internal_r+0x5a0>
    1900:	dd000f04 	addi	r20,sp,60
    1904:	dc801904 	addi	r18,sp,100
    1908:	8009883a 	mov	r4,r16
    190c:	880b883a 	mov	r5,r17
    1910:	01800284 	movi	r6,10
    1914:	000f883a 	mov	r7,zero
    1918:	0007da40 	call	7da4 <__umoddi3>
    191c:	12000c04 	addi	r8,r2,48
    1920:	94bfffc4 	addi	r18,r18,-1
    1924:	8009883a 	mov	r4,r16
    1928:	880b883a 	mov	r5,r17
    192c:	01800284 	movi	r6,10
    1930:	000f883a 	mov	r7,zero
    1934:	92000005 	stb	r8,0(r18)
    1938:	00077380 	call	7738 <__udivdi3>
    193c:	1009883a 	mov	r4,r2
    1940:	1021883a 	mov	r16,r2
    1944:	18800068 	cmpgeui	r2,r3,1
    1948:	1823883a 	mov	r17,r3
    194c:	103fee1e 	bne	r2,zero,1908 <___vfprintf_internal_r+0x1484>
    1950:	1800021e 	bne	r3,zero,195c <___vfprintf_internal_r+0x14d8>
    1954:	00800244 	movi	r2,9
    1958:	113feb36 	bltu	r2,r4,1908 <___vfprintf_internal_r+0x1484>
    195c:	94bfffc4 	addi	r18,r18,-1
    1960:	dc814115 	stw	r18,1284(sp)
    1964:	003fc006 	br	1868 <___vfprintf_internal_r+0x13e4>
    1968:	d9014c17 	ldw	r4,1328(sp)
    196c:	2080004c 	andi	r2,r4,1
    1970:	10009a1e 	bne	r2,zero,1bdc <___vfprintf_internal_r+0x1758>
    1974:	d9401904 	addi	r5,sp,100
    1978:	dd000f04 	addi	r20,sp,60
    197c:	d9414115 	stw	r5,1284(sp)
    1980:	003d5b06 	br	ef0 <___vfprintf_internal_r+0xa6c>
    1984:	d9014f17 	ldw	r4,1340(sp)
    1988:	b00b883a 	mov	r5,r22
    198c:	d9800c04 	addi	r6,sp,48
    1990:	000042c0 	call	42c <__sprint_r>
    1994:	103c731e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1998:	dc800e17 	ldw	r18,56(sp)
    199c:	d8c01904 	addi	r3,sp,100
    19a0:	003cf906 	br	d88 <___vfprintf_internal_r+0x904>
    19a4:	d8c14c17 	ldw	r3,1328(sp)
    19a8:	1880040c 	andi	r2,r3,16
    19ac:	1000711e 	bne	r2,zero,1b74 <___vfprintf_internal_r+0x16f0>
    19b0:	d9014c17 	ldw	r4,1328(sp)
    19b4:	2080100c 	andi	r2,r4,64
    19b8:	10006e26 	beq	r2,zero,1b74 <___vfprintf_internal_r+0x16f0>
    19bc:	3c00000b 	ldhu	r16,0(r7)
    19c0:	0023883a 	mov	r17,zero
    19c4:	39c00104 	addi	r7,r7,4
    19c8:	d9c14015 	stw	r7,1280(sp)
    19cc:	003efa06 	br	15b8 <___vfprintf_internal_r+0x1134>
    19d0:	dc400d17 	ldw	r17,52(sp)
    19d4:	07000074 	movhi	fp,1
    19d8:	e734e184 	addi	fp,fp,-11386
    19dc:	9425883a 	add	r18,r18,r16
    19e0:	8c400044 	addi	r17,r17,1
    19e4:	008001c4 	movi	r2,7
    19e8:	1f000015 	stw	fp,0(r3)
    19ec:	1c000115 	stw	r16,4(r3)
    19f0:	dc800e15 	stw	r18,56(sp)
    19f4:	dc400d15 	stw	r17,52(sp)
    19f8:	147d7016 	blt	r2,r17,fbc <___vfprintf_internal_r+0xb38>
    19fc:	18c00204 	addi	r3,r3,8
    1a00:	003d7506 	br	fd8 <___vfprintf_internal_r+0xb54>
    1a04:	dc800e17 	ldw	r18,56(sp)
    1a08:	dc400d17 	ldw	r17,52(sp)
    1a0c:	07000074 	movhi	fp,1
    1a10:	e734e584 	addi	fp,fp,-11370
    1a14:	003bba06 	br	900 <___vfprintf_internal_r+0x47c>
    1a18:	d9014f17 	ldw	r4,1340(sp)
    1a1c:	b00b883a 	mov	r5,r22
    1a20:	d9800c04 	addi	r6,sp,48
    1a24:	000042c0 	call	42c <__sprint_r>
    1a28:	103c4e1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1a2c:	dc800e17 	ldw	r18,56(sp)
    1a30:	d8c01904 	addi	r3,sp,100
    1a34:	003ce306 	br	dc4 <___vfprintf_internal_r+0x940>
    1a38:	3c000017 	ldw	r16,0(r7)
    1a3c:	0009883a 	mov	r4,zero
    1a40:	39c00104 	addi	r7,r7,4
    1a44:	0023883a 	mov	r17,zero
    1a48:	d9c14015 	stw	r7,1280(sp)
    1a4c:	d8000405 	stb	zero,16(sp)
    1a50:	003d1a06 	br	ebc <___vfprintf_internal_r+0xa38>
    1a54:	38800017 	ldw	r2,0(r7)
    1a58:	39c00104 	addi	r7,r7,4
    1a5c:	d9c14015 	stw	r7,1280(sp)
    1a60:	1023d7fa 	srai	r17,r2,31
    1a64:	1021883a 	mov	r16,r2
    1a68:	003d1206 	br	eb4 <___vfprintf_internal_r+0xa30>
    1a6c:	3c000017 	ldw	r16,0(r7)
    1a70:	01000044 	movi	r4,1
    1a74:	39c00104 	addi	r7,r7,4
    1a78:	0023883a 	mov	r17,zero
    1a7c:	d9c14015 	stw	r7,1280(sp)
    1a80:	d8000405 	stb	zero,16(sp)
    1a84:	003d0d06 	br	ebc <___vfprintf_internal_r+0xa38>
    1a88:	00800074 	movhi	r2,1
    1a8c:	10b4e104 	addi	r2,r2,-11388
    1a90:	94800044 	addi	r18,r18,1
    1a94:	8c400044 	addi	r17,r17,1
    1a98:	a8800015 	stw	r2,0(r21)
    1a9c:	00c00044 	movi	r3,1
    1aa0:	008001c4 	movi	r2,7
    1aa4:	a8c00115 	stw	r3,4(r21)
    1aa8:	dc800e15 	stw	r18,56(sp)
    1aac:	dc400d15 	stw	r17,52(sp)
    1ab0:	1440ca16 	blt	r2,r17,1ddc <___vfprintf_internal_r+0x1958>
    1ab4:	a8c00204 	addi	r3,r21,8
    1ab8:	2000061e 	bne	r4,zero,1ad4 <___vfprintf_internal_r+0x1650>
    1abc:	d9414717 	ldw	r5,1308(sp)
    1ac0:	2800041e 	bne	r5,zero,1ad4 <___vfprintf_internal_r+0x1650>
    1ac4:	d9814c17 	ldw	r6,1328(sp)
    1ac8:	3080004c 	andi	r2,r6,1
    1acc:	1005003a 	cmpeq	r2,r2,zero
    1ad0:	103bea1e 	bne	r2,zero,a7c <___vfprintf_internal_r+0x5f8>
    1ad4:	00800044 	movi	r2,1
    1ad8:	dc400d17 	ldw	r17,52(sp)
    1adc:	18800115 	stw	r2,4(r3)
    1ae0:	d8814917 	ldw	r2,1316(sp)
    1ae4:	94800044 	addi	r18,r18,1
    1ae8:	8c400044 	addi	r17,r17,1
    1aec:	18800015 	stw	r2,0(r3)
    1af0:	008001c4 	movi	r2,7
    1af4:	dc800e15 	stw	r18,56(sp)
    1af8:	dc400d15 	stw	r17,52(sp)
    1afc:	1440ca16 	blt	r2,r17,1e28 <___vfprintf_internal_r+0x19a4>
    1b00:	18c00204 	addi	r3,r3,8
    1b04:	0121c83a 	sub	r16,zero,r4
    1b08:	0400500e 	bge	zero,r16,1c4c <___vfprintf_internal_r+0x17c8>
    1b0c:	00800404 	movi	r2,16
    1b10:	1400800e 	bge	r2,r16,1d14 <___vfprintf_internal_r+0x1890>
    1b14:	1027883a 	mov	r19,r2
    1b18:	07000074 	movhi	fp,1
    1b1c:	e734e184 	addi	fp,fp,-11386
    1b20:	050001c4 	movi	r20,7
    1b24:	00000306 	br	1b34 <___vfprintf_internal_r+0x16b0>
    1b28:	18c00204 	addi	r3,r3,8
    1b2c:	843ffc04 	addi	r16,r16,-16
    1b30:	9c007a0e 	bge	r19,r16,1d1c <___vfprintf_internal_r+0x1898>
    1b34:	94800404 	addi	r18,r18,16
    1b38:	8c400044 	addi	r17,r17,1
    1b3c:	1f000015 	stw	fp,0(r3)
    1b40:	1cc00115 	stw	r19,4(r3)
    1b44:	dc800e15 	stw	r18,56(sp)
    1b48:	dc400d15 	stw	r17,52(sp)
    1b4c:	a47ff60e 	bge	r20,r17,1b28 <___vfprintf_internal_r+0x16a4>
    1b50:	d9014f17 	ldw	r4,1340(sp)
    1b54:	b00b883a 	mov	r5,r22
    1b58:	d9800c04 	addi	r6,sp,48
    1b5c:	000042c0 	call	42c <__sprint_r>
    1b60:	103c001e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1b64:	dc800e17 	ldw	r18,56(sp)
    1b68:	dc400d17 	ldw	r17,52(sp)
    1b6c:	d8c01904 	addi	r3,sp,100
    1b70:	003fee06 	br	1b2c <___vfprintf_internal_r+0x16a8>
    1b74:	3c000017 	ldw	r16,0(r7)
    1b78:	0023883a 	mov	r17,zero
    1b7c:	39c00104 	addi	r7,r7,4
    1b80:	d9c14015 	stw	r7,1280(sp)
    1b84:	003e8c06 	br	15b8 <___vfprintf_internal_r+0x1134>
    1b88:	d9401904 	addi	r5,sp,100
    1b8c:	dd000f04 	addi	r20,sp,60
    1b90:	d9414115 	stw	r5,1284(sp)
    1b94:	d9814417 	ldw	r6,1296(sp)
    1b98:	880a973a 	slli	r5,r17,28
    1b9c:	8004d13a 	srli	r2,r16,4
    1ba0:	810003cc 	andi	r4,r16,15
    1ba4:	3109883a 	add	r4,r6,r4
    1ba8:	2884b03a 	or	r2,r5,r2
    1bac:	21400003 	ldbu	r5,0(r4)
    1bb0:	d9014117 	ldw	r4,1284(sp)
    1bb4:	8806d13a 	srli	r3,r17,4
    1bb8:	1021883a 	mov	r16,r2
    1bbc:	213fffc4 	addi	r4,r4,-1
    1bc0:	d9014115 	stw	r4,1284(sp)
    1bc4:	d9814117 	ldw	r6,1284(sp)
    1bc8:	10c8b03a 	or	r4,r2,r3
    1bcc:	1823883a 	mov	r17,r3
    1bd0:	31400005 	stb	r5,0(r6)
    1bd4:	203fef1e 	bne	r4,zero,1b94 <___vfprintf_internal_r+0x1710>
    1bd8:	003cc506 	br	ef0 <___vfprintf_internal_r+0xa6c>
    1bdc:	00800c04 	movi	r2,48
    1be0:	d98018c4 	addi	r6,sp,99
    1be4:	dd000f04 	addi	r20,sp,60
    1be8:	d88018c5 	stb	r2,99(sp)
    1bec:	d9814115 	stw	r6,1284(sp)
    1bf0:	003cbf06 	br	ef0 <___vfprintf_internal_r+0xa6c>
    1bf4:	dc400d17 	ldw	r17,52(sp)
    1bf8:	07000074 	movhi	fp,1
    1bfc:	e734e584 	addi	fp,fp,-11370
    1c00:	003bc106 	br	b08 <___vfprintf_internal_r+0x684>
    1c04:	d9414c17 	ldw	r5,1328(sp)
    1c08:	2880040c 	andi	r2,r5,16
    1c0c:	10007c26 	beq	r2,zero,1e00 <___vfprintf_internal_r+0x197c>
    1c10:	38800017 	ldw	r2,0(r7)
    1c14:	39c00104 	addi	r7,r7,4
    1c18:	d9c14015 	stw	r7,1280(sp)
    1c1c:	d9814b17 	ldw	r6,1324(sp)
    1c20:	d9c14017 	ldw	r7,1280(sp)
    1c24:	11800015 	stw	r6,0(r2)
    1c28:	003a7206 	br	5f4 <___vfprintf_internal_r+0x170>
    1c2c:	d9014f17 	ldw	r4,1340(sp)
    1c30:	b00b883a 	mov	r5,r22
    1c34:	d9800c04 	addi	r6,sp,48
    1c38:	000042c0 	call	42c <__sprint_r>
    1c3c:	103bc91e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1c40:	dc800e17 	ldw	r18,56(sp)
    1c44:	dc400d17 	ldw	r17,52(sp)
    1c48:	d8c01904 	addi	r3,sp,100
    1c4c:	d9014717 	ldw	r4,1308(sp)
    1c50:	d9414117 	ldw	r5,1284(sp)
    1c54:	8c400044 	addi	r17,r17,1
    1c58:	9125883a 	add	r18,r18,r4
    1c5c:	008001c4 	movi	r2,7
    1c60:	19400015 	stw	r5,0(r3)
    1c64:	19000115 	stw	r4,4(r3)
    1c68:	dc800e15 	stw	r18,56(sp)
    1c6c:	dc400d15 	stw	r17,52(sp)
    1c70:	147ce816 	blt	r2,r17,1014 <___vfprintf_internal_r+0xb90>
    1c74:	18c00204 	addi	r3,r3,8
    1c78:	003b8006 	br	a7c <___vfprintf_internal_r+0x5f8>
    1c7c:	38c00017 	ldw	r3,0(r7)
    1c80:	39000204 	addi	r4,r7,8
    1c84:	d9014015 	stw	r4,1280(sp)
    1c88:	d8c14215 	stw	r3,1288(sp)
    1c8c:	39c00117 	ldw	r7,4(r7)
    1c90:	d9c14315 	stw	r7,1292(sp)
    1c94:	003e1a06 	br	1500 <___vfprintf_internal_r+0x107c>
    1c98:	0005883a 	mov	r2,zero
    1c9c:	1409c83a 	sub	r4,r2,r16
    1ca0:	1105803a 	cmpltu	r2,r2,r4
    1ca4:	044bc83a 	sub	r5,zero,r17
    1ca8:	2885c83a 	sub	r2,r5,r2
    1cac:	2021883a 	mov	r16,r4
    1cb0:	1023883a 	mov	r17,r2
    1cb4:	01000044 	movi	r4,1
    1cb8:	00800b44 	movi	r2,45
    1cbc:	d8800405 	stb	r2,16(sp)
    1cc0:	003c7e06 	br	ebc <___vfprintf_internal_r+0xa38>
    1cc4:	d9014f17 	ldw	r4,1340(sp)
    1cc8:	b00b883a 	mov	r5,r22
    1ccc:	d9800c04 	addi	r6,sp,48
    1cd0:	000042c0 	call	42c <__sprint_r>
    1cd4:	103ba31e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1cd8:	dc800e17 	ldw	r18,56(sp)
    1cdc:	dc400d17 	ldw	r17,52(sp)
    1ce0:	d9000517 	ldw	r4,20(sp)
    1ce4:	d9401904 	addi	r5,sp,100
    1ce8:	003da106 	br	1370 <___vfprintf_internal_r+0xeec>
    1cec:	d9014f17 	ldw	r4,1340(sp)
    1cf0:	b00b883a 	mov	r5,r22
    1cf4:	d9800c04 	addi	r6,sp,48
    1cf8:	000042c0 	call	42c <__sprint_r>
    1cfc:	103b991e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1d00:	dc800e17 	ldw	r18,56(sp)
    1d04:	dc400d17 	ldw	r17,52(sp)
    1d08:	d9000517 	ldw	r4,20(sp)
    1d0c:	d8c01904 	addi	r3,sp,100
    1d10:	003d8b06 	br	1340 <___vfprintf_internal_r+0xebc>
    1d14:	07000074 	movhi	fp,1
    1d18:	e734e184 	addi	fp,fp,-11386
    1d1c:	9425883a 	add	r18,r18,r16
    1d20:	8c400044 	addi	r17,r17,1
    1d24:	008001c4 	movi	r2,7
    1d28:	1f000015 	stw	fp,0(r3)
    1d2c:	1c000115 	stw	r16,4(r3)
    1d30:	dc800e15 	stw	r18,56(sp)
    1d34:	dc400d15 	stw	r17,52(sp)
    1d38:	147fbc16 	blt	r2,r17,1c2c <___vfprintf_internal_r+0x17a8>
    1d3c:	18c00204 	addi	r3,r3,8
    1d40:	003fc206 	br	1c4c <___vfprintf_internal_r+0x17c8>
    1d44:	d9014f17 	ldw	r4,1340(sp)
    1d48:	b00b883a 	mov	r5,r22
    1d4c:	d9800c04 	addi	r6,sp,48
    1d50:	000042c0 	call	42c <__sprint_r>
    1d54:	103b831e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1d58:	dc800e17 	ldw	r18,56(sp)
    1d5c:	d9000517 	ldw	r4,20(sp)
    1d60:	d8c01904 	addi	r3,sp,100
    1d64:	003cfc06 	br	1158 <___vfprintf_internal_r+0xcd4>
    1d68:	07000074 	movhi	fp,1
    1d6c:	e734e184 	addi	fp,fp,-11386
    1d70:	003bde06 	br	cec <___vfprintf_internal_r+0x868>
    1d74:	00800074 	movhi	r2,1
    1d78:	10b4d004 	addi	r2,r2,-11456
    1d7c:	d8814115 	stw	r2,1284(sp)
    1d80:	003def06 	br	1540 <___vfprintf_internal_r+0x10bc>
    1d84:	d9014217 	ldw	r4,1288(sp)
    1d88:	d9414317 	ldw	r5,1292(sp)
    1d8c:	0006f740 	call	6f74 <__isnand>
    1d90:	10003926 	beq	r2,zero,1e78 <___vfprintf_internal_r+0x19f4>
    1d94:	d9414d17 	ldw	r5,1332(sp)
    1d98:	008011c4 	movi	r2,71
    1d9c:	1140ce16 	blt	r2,r5,20d8 <___vfprintf_internal_r+0x1c54>
    1da0:	01800074 	movhi	r6,1
    1da4:	31b4d104 	addi	r6,r6,-11452
    1da8:	d9814115 	stw	r6,1284(sp)
    1dac:	003de406 	br	1540 <___vfprintf_internal_r+0x10bc>
    1db0:	d9014c17 	ldw	r4,1328(sp)
    1db4:	bdc00044 	addi	r23,r23,1
    1db8:	b8c00007 	ldb	r3,0(r23)
    1dbc:	21000814 	ori	r4,r4,32
    1dc0:	d9014c15 	stw	r4,1328(sp)
    1dc4:	003a2e06 	br	680 <___vfprintf_internal_r+0x1fc>
    1dc8:	dcc14515 	stw	r19,1300(sp)
    1dcc:	98011016 	blt	r19,zero,2210 <___vfprintf_internal_r+0x1d8c>
    1dd0:	980f883a 	mov	r7,r19
    1dd4:	d8014615 	stw	zero,1304(sp)
    1dd8:	003c4c06 	br	f0c <___vfprintf_internal_r+0xa88>
    1ddc:	d9014f17 	ldw	r4,1340(sp)
    1de0:	b00b883a 	mov	r5,r22
    1de4:	d9800c04 	addi	r6,sp,48
    1de8:	000042c0 	call	42c <__sprint_r>
    1dec:	103b5d1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1df0:	dc800e17 	ldw	r18,56(sp)
    1df4:	d9000517 	ldw	r4,20(sp)
    1df8:	d8c01904 	addi	r3,sp,100
    1dfc:	003f2e06 	br	1ab8 <___vfprintf_internal_r+0x1634>
    1e00:	d8c14c17 	ldw	r3,1328(sp)
    1e04:	1880100c 	andi	r2,r3,64
    1e08:	1000a026 	beq	r2,zero,208c <___vfprintf_internal_r+0x1c08>
    1e0c:	38800017 	ldw	r2,0(r7)
    1e10:	39c00104 	addi	r7,r7,4
    1e14:	d9c14015 	stw	r7,1280(sp)
    1e18:	d9014b17 	ldw	r4,1324(sp)
    1e1c:	d9c14017 	ldw	r7,1280(sp)
    1e20:	1100000d 	sth	r4,0(r2)
    1e24:	0039f306 	br	5f4 <___vfprintf_internal_r+0x170>
    1e28:	d9014f17 	ldw	r4,1340(sp)
    1e2c:	b00b883a 	mov	r5,r22
    1e30:	d9800c04 	addi	r6,sp,48
    1e34:	000042c0 	call	42c <__sprint_r>
    1e38:	103b4a1e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    1e3c:	dc800e17 	ldw	r18,56(sp)
    1e40:	dc400d17 	ldw	r17,52(sp)
    1e44:	d9000517 	ldw	r4,20(sp)
    1e48:	d8c01904 	addi	r3,sp,100
    1e4c:	003f2d06 	br	1b04 <___vfprintf_internal_r+0x1680>
    1e50:	00800184 	movi	r2,6
    1e54:	14c09a36 	bltu	r2,r19,20c0 <___vfprintf_internal_r+0x1c3c>
    1e58:	dcc14515 	stw	r19,1300(sp)
    1e5c:	9800010e 	bge	r19,zero,1e64 <___vfprintf_internal_r+0x19e0>
    1e60:	d8014515 	stw	zero,1300(sp)
    1e64:	00800074 	movhi	r2,1
    1e68:	10b4d304 	addi	r2,r2,-11444
    1e6c:	980f883a 	mov	r7,r19
    1e70:	d8814115 	stw	r2,1284(sp)
    1e74:	003a7206 	br	840 <___vfprintf_internal_r+0x3bc>
    1e78:	00bfffc4 	movi	r2,-1
    1e7c:	9880e226 	beq	r19,r2,2208 <___vfprintf_internal_r+0x1d84>
    1e80:	d9414d17 	ldw	r5,1332(sp)
    1e84:	008019c4 	movi	r2,103
    1e88:	2880dc26 	beq	r5,r2,21fc <___vfprintf_internal_r+0x1d78>
    1e8c:	008011c4 	movi	r2,71
    1e90:	2880da26 	beq	r5,r2,21fc <___vfprintf_internal_r+0x1d78>
    1e94:	d9414c17 	ldw	r5,1328(sp)
    1e98:	d9014317 	ldw	r4,1292(sp)
    1e9c:	d9814217 	ldw	r6,1288(sp)
    1ea0:	29404014 	ori	r5,r5,256
    1ea4:	d9414c15 	stw	r5,1328(sp)
    1ea8:	2000cc16 	blt	r4,zero,21dc <___vfprintf_internal_r+0x1d58>
    1eac:	3021883a 	mov	r16,r6
    1eb0:	2023883a 	mov	r17,r4
    1eb4:	0039883a 	mov	fp,zero
    1eb8:	d9414d17 	ldw	r5,1332(sp)
    1ebc:	00801984 	movi	r2,102
    1ec0:	2880b726 	beq	r5,r2,21a0 <___vfprintf_internal_r+0x1d1c>
    1ec4:	00801184 	movi	r2,70
    1ec8:	2880b526 	beq	r5,r2,21a0 <___vfprintf_internal_r+0x1d1c>
    1ecc:	00801944 	movi	r2,101
    1ed0:	2880c826 	beq	r5,r2,21f4 <___vfprintf_internal_r+0x1d70>
    1ed4:	00801144 	movi	r2,69
    1ed8:	2880c626 	beq	r5,r2,21f4 <___vfprintf_internal_r+0x1d70>
    1edc:	9829883a 	mov	r20,r19
    1ee0:	d9014f17 	ldw	r4,1340(sp)
    1ee4:	d8800504 	addi	r2,sp,20
    1ee8:	880d883a 	mov	r6,r17
    1eec:	d8800115 	stw	r2,4(sp)
    1ef0:	d8c00604 	addi	r3,sp,24
    1ef4:	d8800704 	addi	r2,sp,28
    1ef8:	800b883a 	mov	r5,r16
    1efc:	01c00084 	movi	r7,2
    1f00:	d8c00215 	stw	r3,8(sp)
    1f04:	d8800315 	stw	r2,12(sp)
    1f08:	dd000015 	stw	r20,0(sp)
    1f0c:	00026ec0 	call	26ec <_dtoa_r>
    1f10:	d9814d17 	ldw	r6,1332(sp)
    1f14:	d8814115 	stw	r2,1284(sp)
    1f18:	008019c4 	movi	r2,103
    1f1c:	30809526 	beq	r6,r2,2174 <___vfprintf_internal_r+0x1cf0>
    1f20:	d8c14d17 	ldw	r3,1332(sp)
    1f24:	008011c4 	movi	r2,71
    1f28:	18809226 	beq	r3,r2,2174 <___vfprintf_internal_r+0x1cf0>
    1f2c:	d9414117 	ldw	r5,1284(sp)
    1f30:	d9814d17 	ldw	r6,1332(sp)
    1f34:	00801984 	movi	r2,102
    1f38:	2d25883a 	add	r18,r5,r20
    1f3c:	30808626 	beq	r6,r2,2158 <___vfprintf_internal_r+0x1cd4>
    1f40:	00801184 	movi	r2,70
    1f44:	30808426 	beq	r6,r2,2158 <___vfprintf_internal_r+0x1cd4>
    1f48:	000d883a 	mov	r6,zero
    1f4c:	000f883a 	mov	r7,zero
    1f50:	880b883a 	mov	r5,r17
    1f54:	8009883a 	mov	r4,r16
    1f58:	0008f240 	call	8f24 <__eqdf2>
    1f5c:	1000751e 	bne	r2,zero,2134 <___vfprintf_internal_r+0x1cb0>
    1f60:	9005883a 	mov	r2,r18
    1f64:	dc800715 	stw	r18,28(sp)
    1f68:	d9014117 	ldw	r4,1284(sp)
    1f6c:	d9414d17 	ldw	r5,1332(sp)
    1f70:	00c019c4 	movi	r3,103
    1f74:	1125c83a 	sub	r18,r2,r4
    1f78:	28c06826 	beq	r5,r3,211c <___vfprintf_internal_r+0x1c98>
    1f7c:	008011c4 	movi	r2,71
    1f80:	28806626 	beq	r5,r2,211c <___vfprintf_internal_r+0x1c98>
    1f84:	d9000517 	ldw	r4,20(sp)
    1f88:	d8c14d17 	ldw	r3,1332(sp)
    1f8c:	00801944 	movi	r2,101
    1f90:	10c05516 	blt	r2,r3,20e8 <___vfprintf_internal_r+0x1c64>
    1f94:	213fffc4 	addi	r4,r4,-1
    1f98:	d9000515 	stw	r4,20(sp)
    1f9c:	d8c00805 	stb	r3,32(sp)
    1fa0:	2021883a 	mov	r16,r4
    1fa4:	2000c116 	blt	r4,zero,22ac <___vfprintf_internal_r+0x1e28>
    1fa8:	00800ac4 	movi	r2,43
    1fac:	d8800845 	stb	r2,33(sp)
    1fb0:	00800244 	movi	r2,9
    1fb4:	1400af0e 	bge	r2,r16,2274 <___vfprintf_internal_r+0x1df0>
    1fb8:	1027883a 	mov	r19,r2
    1fbc:	dc400b84 	addi	r17,sp,46
    1fc0:	8009883a 	mov	r4,r16
    1fc4:	01400284 	movi	r5,10
    1fc8:	000960c0 	call	960c <__modsi3>
    1fcc:	10800c04 	addi	r2,r2,48
    1fd0:	8c7fffc4 	addi	r17,r17,-1
    1fd4:	8009883a 	mov	r4,r16
    1fd8:	01400284 	movi	r5,10
    1fdc:	88800005 	stb	r2,0(r17)
    1fe0:	00095ac0 	call	95ac <__divsi3>
    1fe4:	1021883a 	mov	r16,r2
    1fe8:	98bff516 	blt	r19,r2,1fc0 <___vfprintf_internal_r+0x1b3c>
    1fec:	10c00c04 	addi	r3,r2,48
    1ff0:	d88009c4 	addi	r2,sp,39
    1ff4:	108001c4 	addi	r2,r2,7
    1ff8:	897fffc4 	addi	r5,r17,-1
    1ffc:	88ffffc5 	stb	r3,-1(r17)
    2000:	2880a72e 	bgeu	r5,r2,22a0 <___vfprintf_internal_r+0x1e1c>
    2004:	1009883a 	mov	r4,r2
    2008:	d9800804 	addi	r6,sp,32
    200c:	d8c00884 	addi	r3,sp,34
    2010:	28800003 	ldbu	r2,0(r5)
    2014:	29400044 	addi	r5,r5,1
    2018:	18800005 	stb	r2,0(r3)
    201c:	18c00044 	addi	r3,r3,1
    2020:	293ffb36 	bltu	r5,r4,2010 <___vfprintf_internal_r+0x1b8c>
    2024:	1987c83a 	sub	r3,r3,r6
    2028:	00800044 	movi	r2,1
    202c:	d8c14815 	stw	r3,1312(sp)
    2030:	90cf883a 	add	r7,r18,r3
    2034:	1480960e 	bge	r2,r18,2290 <___vfprintf_internal_r+0x1e0c>
    2038:	39c00044 	addi	r7,r7,1
    203c:	d9c14515 	stw	r7,1300(sp)
    2040:	38003416 	blt	r7,zero,2114 <___vfprintf_internal_r+0x1c90>
    2044:	e0803fcc 	andi	r2,fp,255
    2048:	1080201c 	xori	r2,r2,128
    204c:	10bfe004 	addi	r2,r2,-128
    2050:	10004e26 	beq	r2,zero,218c <___vfprintf_internal_r+0x1d08>
    2054:	00800b44 	movi	r2,45
    2058:	dc814715 	stw	r18,1308(sp)
    205c:	d8014615 	stw	zero,1304(sp)
    2060:	d8800405 	stb	r2,16(sp)
    2064:	003bab06 	br	f14 <___vfprintf_internal_r+0xa90>
    2068:	00800b44 	movi	r2,45
    206c:	d8800405 	stb	r2,16(sp)
    2070:	003d2d06 	br	1528 <___vfprintf_internal_r+0x10a4>
    2074:	d9014f17 	ldw	r4,1340(sp)
    2078:	b00b883a 	mov	r5,r22
    207c:	d9800c04 	addi	r6,sp,48
    2080:	000042c0 	call	42c <__sprint_r>
    2084:	103ab71e 	bne	r2,zero,b64 <___vfprintf_internal_r+0x6e0>
    2088:	003ab506 	br	b60 <___vfprintf_internal_r+0x6dc>
    208c:	38800017 	ldw	r2,0(r7)
    2090:	39c00104 	addi	r7,r7,4
    2094:	d9c14015 	stw	r7,1280(sp)
    2098:	d9414b17 	ldw	r5,1324(sp)
    209c:	d9c14017 	ldw	r7,1280(sp)
    20a0:	11400015 	stw	r5,0(r2)
    20a4:	00395306 	br	5f4 <___vfprintf_internal_r+0x170>
    20a8:	980f883a 	mov	r7,r19
    20ac:	dcc14515 	stw	r19,1300(sp)
    20b0:	d8014615 	stw	zero,1304(sp)
    20b4:	003b9506 	br	f0c <___vfprintf_internal_r+0xa88>
    20b8:	0027883a 	mov	r19,zero
    20bc:	00397206 	br	688 <___vfprintf_internal_r+0x204>
    20c0:	00c00074 	movhi	r3,1
    20c4:	18f4d304 	addi	r3,r3,-11444
    20c8:	100f883a 	mov	r7,r2
    20cc:	d8814515 	stw	r2,1300(sp)
    20d0:	d8c14115 	stw	r3,1284(sp)
    20d4:	0039da06 	br	840 <___vfprintf_internal_r+0x3bc>
    20d8:	00800074 	movhi	r2,1
    20dc:	10b4d204 	addi	r2,r2,-11448
    20e0:	d8814115 	stw	r2,1284(sp)
    20e4:	003d1606 	br	1540 <___vfprintf_internal_r+0x10bc>
    20e8:	d9414d17 	ldw	r5,1332(sp)
    20ec:	00801984 	movi	r2,102
    20f0:	28804926 	beq	r5,r2,2218 <___vfprintf_internal_r+0x1d94>
    20f4:	200f883a 	mov	r7,r4
    20f8:	24805716 	blt	r4,r18,2258 <___vfprintf_internal_r+0x1dd4>
    20fc:	d9414c17 	ldw	r5,1328(sp)
    2100:	2880004c 	andi	r2,r5,1
    2104:	10000126 	beq	r2,zero,210c <___vfprintf_internal_r+0x1c88>
    2108:	21c00044 	addi	r7,r4,1
    210c:	d9c14515 	stw	r7,1300(sp)
    2110:	383fcc0e 	bge	r7,zero,2044 <___vfprintf_internal_r+0x1bc0>
    2114:	d8014515 	stw	zero,1300(sp)
    2118:	003fca06 	br	2044 <___vfprintf_internal_r+0x1bc0>
    211c:	d9000517 	ldw	r4,20(sp)
    2120:	00bfff04 	movi	r2,-4
    2124:	1100480e 	bge	r2,r4,2248 <___vfprintf_internal_r+0x1dc4>
    2128:	99004716 	blt	r19,r4,2248 <___vfprintf_internal_r+0x1dc4>
    212c:	d8c14d15 	stw	r3,1332(sp)
    2130:	003ff006 	br	20f4 <___vfprintf_internal_r+0x1c70>
    2134:	d8800717 	ldw	r2,28(sp)
    2138:	14bf8b2e 	bgeu	r2,r18,1f68 <___vfprintf_internal_r+0x1ae4>
    213c:	9007883a 	mov	r3,r18
    2140:	01000c04 	movi	r4,48
    2144:	11000005 	stb	r4,0(r2)
    2148:	10800044 	addi	r2,r2,1
    214c:	d8800715 	stw	r2,28(sp)
    2150:	18bffc1e 	bne	r3,r2,2144 <___vfprintf_internal_r+0x1cc0>
    2154:	003f8406 	br	1f68 <___vfprintf_internal_r+0x1ae4>
    2158:	d8814117 	ldw	r2,1284(sp)
    215c:	10c00007 	ldb	r3,0(r2)
    2160:	00800c04 	movi	r2,48
    2164:	18805b26 	beq	r3,r2,22d4 <___vfprintf_internal_r+0x1e50>
    2168:	d9000517 	ldw	r4,20(sp)
    216c:	9125883a 	add	r18,r18,r4
    2170:	003f7506 	br	1f48 <___vfprintf_internal_r+0x1ac4>
    2174:	d9014c17 	ldw	r4,1328(sp)
    2178:	2080004c 	andi	r2,r4,1
    217c:	1005003a 	cmpeq	r2,r2,zero
    2180:	103f6a26 	beq	r2,zero,1f2c <___vfprintf_internal_r+0x1aa8>
    2184:	d8800717 	ldw	r2,28(sp)
    2188:	003f7706 	br	1f68 <___vfprintf_internal_r+0x1ae4>
    218c:	d9c14515 	stw	r7,1300(sp)
    2190:	38004d16 	blt	r7,zero,22c8 <___vfprintf_internal_r+0x1e44>
    2194:	dc814715 	stw	r18,1308(sp)
    2198:	d8014615 	stw	zero,1304(sp)
    219c:	003b5b06 	br	f0c <___vfprintf_internal_r+0xa88>
    21a0:	d9014f17 	ldw	r4,1340(sp)
    21a4:	d8800504 	addi	r2,sp,20
    21a8:	d8800115 	stw	r2,4(sp)
    21ac:	d8c00604 	addi	r3,sp,24
    21b0:	d8800704 	addi	r2,sp,28
    21b4:	800b883a 	mov	r5,r16
    21b8:	880d883a 	mov	r6,r17
    21bc:	01c000c4 	movi	r7,3
    21c0:	d8c00215 	stw	r3,8(sp)
    21c4:	d8800315 	stw	r2,12(sp)
    21c8:	dcc00015 	stw	r19,0(sp)
    21cc:	9829883a 	mov	r20,r19
    21d0:	00026ec0 	call	26ec <_dtoa_r>
    21d4:	d8814115 	stw	r2,1284(sp)
    21d8:	003f5106 	br	1f20 <___vfprintf_internal_r+0x1a9c>
    21dc:	d8c14217 	ldw	r3,1288(sp)
    21e0:	d9014317 	ldw	r4,1292(sp)
    21e4:	07000b44 	movi	fp,45
    21e8:	1821883a 	mov	r16,r3
    21ec:	2460003c 	xorhi	r17,r4,32768
    21f0:	003f3106 	br	1eb8 <___vfprintf_internal_r+0x1a34>
    21f4:	9d000044 	addi	r20,r19,1
    21f8:	003f3906 	br	1ee0 <___vfprintf_internal_r+0x1a5c>
    21fc:	983f251e 	bne	r19,zero,1e94 <___vfprintf_internal_r+0x1a10>
    2200:	04c00044 	movi	r19,1
    2204:	003f2306 	br	1e94 <___vfprintf_internal_r+0x1a10>
    2208:	04c00184 	movi	r19,6
    220c:	003f2106 	br	1e94 <___vfprintf_internal_r+0x1a10>
    2210:	d8014515 	stw	zero,1300(sp)
    2214:	003eee06 	br	1dd0 <___vfprintf_internal_r+0x194c>
    2218:	200f883a 	mov	r7,r4
    221c:	0100370e 	bge	zero,r4,22fc <___vfprintf_internal_r+0x1e78>
    2220:	9800031e 	bne	r19,zero,2230 <___vfprintf_internal_r+0x1dac>
    2224:	d9814c17 	ldw	r6,1328(sp)
    2228:	3080004c 	andi	r2,r6,1
    222c:	103fb726 	beq	r2,zero,210c <___vfprintf_internal_r+0x1c88>
    2230:	20800044 	addi	r2,r4,1
    2234:	98a7883a 	add	r19,r19,r2
    2238:	dcc14515 	stw	r19,1300(sp)
    223c:	980f883a 	mov	r7,r19
    2240:	983f800e 	bge	r19,zero,2044 <___vfprintf_internal_r+0x1bc0>
    2244:	003fb306 	br	2114 <___vfprintf_internal_r+0x1c90>
    2248:	d9814d17 	ldw	r6,1332(sp)
    224c:	31bfff84 	addi	r6,r6,-2
    2250:	d9814d15 	stw	r6,1332(sp)
    2254:	003f4c06 	br	1f88 <___vfprintf_internal_r+0x1b04>
    2258:	0100180e 	bge	zero,r4,22bc <___vfprintf_internal_r+0x1e38>
    225c:	00800044 	movi	r2,1
    2260:	1485883a 	add	r2,r2,r18
    2264:	d8814515 	stw	r2,1300(sp)
    2268:	100f883a 	mov	r7,r2
    226c:	103f750e 	bge	r2,zero,2044 <___vfprintf_internal_r+0x1bc0>
    2270:	003fa806 	br	2114 <___vfprintf_internal_r+0x1c90>
    2274:	80c00c04 	addi	r3,r16,48
    2278:	00800c04 	movi	r2,48
    227c:	d8c008c5 	stb	r3,35(sp)
    2280:	d9800804 	addi	r6,sp,32
    2284:	d8c00904 	addi	r3,sp,36
    2288:	d8800885 	stb	r2,34(sp)
    228c:	003f6506 	br	2024 <___vfprintf_internal_r+0x1ba0>
    2290:	d9014c17 	ldw	r4,1328(sp)
    2294:	2084703a 	and	r2,r4,r2
    2298:	103f9c26 	beq	r2,zero,210c <___vfprintf_internal_r+0x1c88>
    229c:	003f6606 	br	2038 <___vfprintf_internal_r+0x1bb4>
    22a0:	d9800804 	addi	r6,sp,32
    22a4:	d8c00884 	addi	r3,sp,34
    22a8:	003f5e06 	br	2024 <___vfprintf_internal_r+0x1ba0>
    22ac:	00800b44 	movi	r2,45
    22b0:	0121c83a 	sub	r16,zero,r4
    22b4:	d8800845 	stb	r2,33(sp)
    22b8:	003f3d06 	br	1fb0 <___vfprintf_internal_r+0x1b2c>
    22bc:	00800084 	movi	r2,2
    22c0:	1105c83a 	sub	r2,r2,r4
    22c4:	003fe606 	br	2260 <___vfprintf_internal_r+0x1ddc>
    22c8:	d8014515 	stw	zero,1300(sp)
    22cc:	dc814715 	stw	r18,1308(sp)
    22d0:	003fb106 	br	2198 <___vfprintf_internal_r+0x1d14>
    22d4:	000d883a 	mov	r6,zero
    22d8:	000f883a 	mov	r7,zero
    22dc:	8009883a 	mov	r4,r16
    22e0:	880b883a 	mov	r5,r17
    22e4:	0008fac0 	call	8fac <__nedf2>
    22e8:	103f9f26 	beq	r2,zero,2168 <___vfprintf_internal_r+0x1ce4>
    22ec:	00800044 	movi	r2,1
    22f0:	1509c83a 	sub	r4,r2,r20
    22f4:	d9000515 	stw	r4,20(sp)
    22f8:	003f9b06 	br	2168 <___vfprintf_internal_r+0x1ce4>
    22fc:	98000d1e 	bne	r19,zero,2334 <___vfprintf_internal_r+0x1eb0>
    2300:	d8c14c17 	ldw	r3,1328(sp)
    2304:	1880004c 	andi	r2,r3,1
    2308:	10000a1e 	bne	r2,zero,2334 <___vfprintf_internal_r+0x1eb0>
    230c:	01000044 	movi	r4,1
    2310:	200f883a 	mov	r7,r4
    2314:	d9014515 	stw	r4,1300(sp)
    2318:	003f4a06 	br	2044 <___vfprintf_internal_r+0x1bc0>
    231c:	3cc00017 	ldw	r19,0(r7)
    2320:	39c00104 	addi	r7,r7,4
    2324:	983d0e0e 	bge	r19,zero,1760 <___vfprintf_internal_r+0x12dc>
    2328:	b8c00007 	ldb	r3,0(r23)
    232c:	04ffffc4 	movi	r19,-1
    2330:	0038d306 	br	680 <___vfprintf_internal_r+0x1fc>
    2334:	9cc00084 	addi	r19,r19,2
    2338:	dcc14515 	stw	r19,1300(sp)
    233c:	980f883a 	mov	r7,r19
    2340:	983f400e 	bge	r19,zero,2044 <___vfprintf_internal_r+0x1bc0>
    2344:	003f7306 	br	2114 <___vfprintf_internal_r+0x1c90>

00002348 <__vfprintf_internal>:
    2348:	00800074 	movhi	r2,1
    234c:	10bc5504 	addi	r2,r2,-3756
    2350:	2013883a 	mov	r9,r4
    2354:	11000017 	ldw	r4,0(r2)
    2358:	2805883a 	mov	r2,r5
    235c:	300f883a 	mov	r7,r6
    2360:	480b883a 	mov	r5,r9
    2364:	100d883a 	mov	r6,r2
    2368:	00004841 	jmpi	484 <___vfprintf_internal_r>

0000236c <__swsetup_r>:
    236c:	00800074 	movhi	r2,1
    2370:	10bc5504 	addi	r2,r2,-3756
    2374:	10c00017 	ldw	r3,0(r2)
    2378:	defffd04 	addi	sp,sp,-12
    237c:	dc400115 	stw	r17,4(sp)
    2380:	dc000015 	stw	r16,0(sp)
    2384:	dfc00215 	stw	ra,8(sp)
    2388:	2023883a 	mov	r17,r4
    238c:	2821883a 	mov	r16,r5
    2390:	18000226 	beq	r3,zero,239c <__swsetup_r+0x30>
    2394:	18800e17 	ldw	r2,56(r3)
    2398:	10001f26 	beq	r2,zero,2418 <__swsetup_r+0xac>
    239c:	8100030b 	ldhu	r4,12(r16)
    23a0:	2080020c 	andi	r2,r4,8
    23a4:	10002826 	beq	r2,zero,2448 <__swsetup_r+0xdc>
    23a8:	81400417 	ldw	r5,16(r16)
    23ac:	28001d26 	beq	r5,zero,2424 <__swsetup_r+0xb8>
    23b0:	2080004c 	andi	r2,r4,1
    23b4:	1005003a 	cmpeq	r2,r2,zero
    23b8:	10000b26 	beq	r2,zero,23e8 <__swsetup_r+0x7c>
    23bc:	2080008c 	andi	r2,r4,2
    23c0:	10001226 	beq	r2,zero,240c <__swsetup_r+0xa0>
    23c4:	0005883a 	mov	r2,zero
    23c8:	80800215 	stw	r2,8(r16)
    23cc:	28000b26 	beq	r5,zero,23fc <__swsetup_r+0x90>
    23d0:	0005883a 	mov	r2,zero
    23d4:	dfc00217 	ldw	ra,8(sp)
    23d8:	dc400117 	ldw	r17,4(sp)
    23dc:	dc000017 	ldw	r16,0(sp)
    23e0:	dec00304 	addi	sp,sp,12
    23e4:	f800283a 	ret
    23e8:	80800517 	ldw	r2,20(r16)
    23ec:	80000215 	stw	zero,8(r16)
    23f0:	0085c83a 	sub	r2,zero,r2
    23f4:	80800615 	stw	r2,24(r16)
    23f8:	283ff51e 	bne	r5,zero,23d0 <__swsetup_r+0x64>
    23fc:	2080200c 	andi	r2,r4,128
    2400:	103ff326 	beq	r2,zero,23d0 <__swsetup_r+0x64>
    2404:	00bfffc4 	movi	r2,-1
    2408:	003ff206 	br	23d4 <__swsetup_r+0x68>
    240c:	80800517 	ldw	r2,20(r16)
    2410:	80800215 	stw	r2,8(r16)
    2414:	003fed06 	br	23cc <__swsetup_r+0x60>
    2418:	1809883a 	mov	r4,r3
    241c:	0003f380 	call	3f38 <__sinit>
    2420:	003fde06 	br	239c <__swsetup_r+0x30>
    2424:	20c0a00c 	andi	r3,r4,640
    2428:	00808004 	movi	r2,512
    242c:	18bfe026 	beq	r3,r2,23b0 <__swsetup_r+0x44>
    2430:	8809883a 	mov	r4,r17
    2434:	800b883a 	mov	r5,r16
    2438:	0004ce40 	call	4ce4 <__smakebuf_r>
    243c:	8100030b 	ldhu	r4,12(r16)
    2440:	81400417 	ldw	r5,16(r16)
    2444:	003fda06 	br	23b0 <__swsetup_r+0x44>
    2448:	2080040c 	andi	r2,r4,16
    244c:	103fed26 	beq	r2,zero,2404 <__swsetup_r+0x98>
    2450:	2080010c 	andi	r2,r4,4
    2454:	10001226 	beq	r2,zero,24a0 <__swsetup_r+0x134>
    2458:	81400c17 	ldw	r5,48(r16)
    245c:	28000526 	beq	r5,zero,2474 <__swsetup_r+0x108>
    2460:	80801004 	addi	r2,r16,64
    2464:	28800226 	beq	r5,r2,2470 <__swsetup_r+0x104>
    2468:	8809883a 	mov	r4,r17
    246c:	00042f00 	call	42f0 <_free_r>
    2470:	80000c15 	stw	zero,48(r16)
    2474:	8080030b 	ldhu	r2,12(r16)
    2478:	81400417 	ldw	r5,16(r16)
    247c:	80000115 	stw	zero,4(r16)
    2480:	10bff6cc 	andi	r2,r2,65499
    2484:	8080030d 	sth	r2,12(r16)
    2488:	81400015 	stw	r5,0(r16)
    248c:	8080030b 	ldhu	r2,12(r16)
    2490:	10800214 	ori	r2,r2,8
    2494:	113fffcc 	andi	r4,r2,65535
    2498:	8080030d 	sth	r2,12(r16)
    249c:	003fc306 	br	23ac <__swsetup_r+0x40>
    24a0:	81400417 	ldw	r5,16(r16)
    24a4:	003ff906 	br	248c <__swsetup_r+0x120>

000024a8 <quorem>:
    24a8:	28c00417 	ldw	r3,16(r5)
    24ac:	20800417 	ldw	r2,16(r4)
    24b0:	defff104 	addi	sp,sp,-60
    24b4:	dfc00e15 	stw	ra,56(sp)
    24b8:	df000d15 	stw	fp,52(sp)
    24bc:	ddc00c15 	stw	r23,48(sp)
    24c0:	dd800b15 	stw	r22,44(sp)
    24c4:	dd400a15 	stw	r21,40(sp)
    24c8:	dd000915 	stw	r20,36(sp)
    24cc:	dcc00815 	stw	r19,32(sp)
    24d0:	dc800715 	stw	r18,28(sp)
    24d4:	dc400615 	stw	r17,24(sp)
    24d8:	dc000515 	stw	r16,20(sp)
    24dc:	d9000315 	stw	r4,12(sp)
    24e0:	d9400415 	stw	r5,16(sp)
    24e4:	10c07f16 	blt	r2,r3,26e4 <quorem+0x23c>
    24e8:	1d3fffc4 	addi	r20,r3,-1
    24ec:	d8c00417 	ldw	r3,16(sp)
    24f0:	d9000317 	ldw	r4,12(sp)
    24f4:	a505883a 	add	r2,r20,r20
    24f8:	1085883a 	add	r2,r2,r2
    24fc:	1cc00504 	addi	r19,r3,20
    2500:	25c00504 	addi	r23,r4,20
    2504:	98ad883a 	add	r22,r19,r2
    2508:	15c7883a 	add	r3,r2,r23
    250c:	b1400017 	ldw	r5,0(r22)
    2510:	19000017 	ldw	r4,0(r3)
    2514:	d8c00015 	stw	r3,0(sp)
    2518:	29400044 	addi	r5,r5,1
    251c:	d9000215 	stw	r4,8(sp)
    2520:	000966c0 	call	966c <__udivsi3>
    2524:	1039883a 	mov	fp,r2
    2528:	10003d1e 	bne	r2,zero,2620 <quorem+0x178>
    252c:	d9400417 	ldw	r5,16(sp)
    2530:	d9000317 	ldw	r4,12(sp)
    2534:	0005a100 	call	5a10 <__mcmp>
    2538:	10002c16 	blt	r2,zero,25ec <quorem+0x144>
    253c:	e7000044 	addi	fp,fp,1
    2540:	b80f883a 	mov	r7,r23
    2544:	0011883a 	mov	r8,zero
    2548:	0009883a 	mov	r4,zero
    254c:	99400017 	ldw	r5,0(r19)
    2550:	38c00017 	ldw	r3,0(r7)
    2554:	9cc00104 	addi	r19,r19,4
    2558:	28bfffcc 	andi	r2,r5,65535
    255c:	2085883a 	add	r2,r4,r2
    2560:	11bfffcc 	andi	r6,r2,65535
    2564:	193fffcc 	andi	r4,r3,65535
    2568:	1004d43a 	srli	r2,r2,16
    256c:	280ad43a 	srli	r5,r5,16
    2570:	2189c83a 	sub	r4,r4,r6
    2574:	2209883a 	add	r4,r4,r8
    2578:	1806d43a 	srli	r3,r3,16
    257c:	288b883a 	add	r5,r5,r2
    2580:	200dd43a 	srai	r6,r4,16
    2584:	28bfffcc 	andi	r2,r5,65535
    2588:	1887c83a 	sub	r3,r3,r2
    258c:	1987883a 	add	r3,r3,r6
    2590:	3900000d 	sth	r4,0(r7)
    2594:	38c0008d 	sth	r3,2(r7)
    2598:	2808d43a 	srli	r4,r5,16
    259c:	39c00104 	addi	r7,r7,4
    25a0:	1811d43a 	srai	r8,r3,16
    25a4:	b4ffe92e 	bgeu	r22,r19,254c <quorem+0xa4>
    25a8:	a505883a 	add	r2,r20,r20
    25ac:	1085883a 	add	r2,r2,r2
    25b0:	b885883a 	add	r2,r23,r2
    25b4:	10c00017 	ldw	r3,0(r2)
    25b8:	18000c1e 	bne	r3,zero,25ec <quorem+0x144>
    25bc:	113fff04 	addi	r4,r2,-4
    25c0:	b900082e 	bgeu	r23,r4,25e4 <quorem+0x13c>
    25c4:	10bfff17 	ldw	r2,-4(r2)
    25c8:	10000326 	beq	r2,zero,25d8 <quorem+0x130>
    25cc:	00000506 	br	25e4 <quorem+0x13c>
    25d0:	20800017 	ldw	r2,0(r4)
    25d4:	1000031e 	bne	r2,zero,25e4 <quorem+0x13c>
    25d8:	213fff04 	addi	r4,r4,-4
    25dc:	a53fffc4 	addi	r20,r20,-1
    25e0:	b93ffb36 	bltu	r23,r4,25d0 <quorem+0x128>
    25e4:	d9000317 	ldw	r4,12(sp)
    25e8:	25000415 	stw	r20,16(r4)
    25ec:	e005883a 	mov	r2,fp
    25f0:	dfc00e17 	ldw	ra,56(sp)
    25f4:	df000d17 	ldw	fp,52(sp)
    25f8:	ddc00c17 	ldw	r23,48(sp)
    25fc:	dd800b17 	ldw	r22,44(sp)
    2600:	dd400a17 	ldw	r21,40(sp)
    2604:	dd000917 	ldw	r20,36(sp)
    2608:	dcc00817 	ldw	r19,32(sp)
    260c:	dc800717 	ldw	r18,28(sp)
    2610:	dc400617 	ldw	r17,24(sp)
    2614:	dc000517 	ldw	r16,20(sp)
    2618:	dec00f04 	addi	sp,sp,60
    261c:	f800283a 	ret
    2620:	b823883a 	mov	r17,r23
    2624:	9825883a 	mov	r18,r19
    2628:	d8000115 	stw	zero,4(sp)
    262c:	002b883a 	mov	r21,zero
    2630:	94000017 	ldw	r16,0(r18)
    2634:	e009883a 	mov	r4,fp
    2638:	94800104 	addi	r18,r18,4
    263c:	817fffcc 	andi	r5,r16,65535
    2640:	000967c0 	call	967c <__mulsi3>
    2644:	800ad43a 	srli	r5,r16,16
    2648:	e009883a 	mov	r4,fp
    264c:	a8a1883a 	add	r16,r21,r2
    2650:	000967c0 	call	967c <__mulsi3>
    2654:	89000017 	ldw	r4,0(r17)
    2658:	80ffffcc 	andi	r3,r16,65535
    265c:	8020d43a 	srli	r16,r16,16
    2660:	217fffcc 	andi	r5,r4,65535
    2664:	28cbc83a 	sub	r5,r5,r3
    2668:	d8c00117 	ldw	r3,4(sp)
    266c:	2008d43a 	srli	r4,r4,16
    2670:	1405883a 	add	r2,r2,r16
    2674:	28cb883a 	add	r5,r5,r3
    2678:	280dd43a 	srai	r6,r5,16
    267c:	10ffffcc 	andi	r3,r2,65535
    2680:	20c9c83a 	sub	r4,r4,r3
    2684:	2189883a 	add	r4,r4,r6
    2688:	8900008d 	sth	r4,2(r17)
    268c:	2009d43a 	srai	r4,r4,16
    2690:	8940000d 	sth	r5,0(r17)
    2694:	102ad43a 	srli	r21,r2,16
    2698:	8c400104 	addi	r17,r17,4
    269c:	d9000115 	stw	r4,4(sp)
    26a0:	b4bfe32e 	bgeu	r22,r18,2630 <quorem+0x188>
    26a4:	d9000217 	ldw	r4,8(sp)
    26a8:	203fa01e 	bne	r4,zero,252c <quorem+0x84>
    26ac:	d8800017 	ldw	r2,0(sp)
    26b0:	10ffff04 	addi	r3,r2,-4
    26b4:	b8c0082e 	bgeu	r23,r3,26d8 <quorem+0x230>
    26b8:	10bfff17 	ldw	r2,-4(r2)
    26bc:	10000326 	beq	r2,zero,26cc <quorem+0x224>
    26c0:	00000506 	br	26d8 <quorem+0x230>
    26c4:	18800017 	ldw	r2,0(r3)
    26c8:	1000031e 	bne	r2,zero,26d8 <quorem+0x230>
    26cc:	18ffff04 	addi	r3,r3,-4
    26d0:	a53fffc4 	addi	r20,r20,-1
    26d4:	b8fffb36 	bltu	r23,r3,26c4 <quorem+0x21c>
    26d8:	d8c00317 	ldw	r3,12(sp)
    26dc:	1d000415 	stw	r20,16(r3)
    26e0:	003f9206 	br	252c <quorem+0x84>
    26e4:	0005883a 	mov	r2,zero
    26e8:	003fc106 	br	25f0 <quorem+0x148>

000026ec <_dtoa_r>:
    26ec:	22001017 	ldw	r8,64(r4)
    26f0:	deffda04 	addi	sp,sp,-152
    26f4:	dd402115 	stw	r21,132(sp)
    26f8:	dd002015 	stw	r20,128(sp)
    26fc:	dc801e15 	stw	r18,120(sp)
    2700:	dc401d15 	stw	r17,116(sp)
    2704:	dfc02515 	stw	ra,148(sp)
    2708:	df002415 	stw	fp,144(sp)
    270c:	ddc02315 	stw	r23,140(sp)
    2710:	dd802215 	stw	r22,136(sp)
    2714:	dcc01f15 	stw	r19,124(sp)
    2718:	dc001c15 	stw	r16,112(sp)
    271c:	d9001615 	stw	r4,88(sp)
    2720:	3023883a 	mov	r17,r6
    2724:	2829883a 	mov	r20,r5
    2728:	d9c01715 	stw	r7,92(sp)
    272c:	dc802817 	ldw	r18,160(sp)
    2730:	302b883a 	mov	r21,r6
    2734:	40000a26 	beq	r8,zero,2760 <_dtoa_r+0x74>
    2738:	20801117 	ldw	r2,68(r4)
    273c:	400b883a 	mov	r5,r8
    2740:	40800115 	stw	r2,4(r8)
    2744:	20c01117 	ldw	r3,68(r4)
    2748:	00800044 	movi	r2,1
    274c:	10c4983a 	sll	r2,r2,r3
    2750:	40800215 	stw	r2,8(r8)
    2754:	00058b40 	call	58b4 <_Bfree>
    2758:	d8c01617 	ldw	r3,88(sp)
    275c:	18001015 	stw	zero,64(r3)
    2760:	8800a316 	blt	r17,zero,29f0 <_dtoa_r+0x304>
    2764:	90000015 	stw	zero,0(r18)
    2768:	a8dffc2c 	andhi	r3,r21,32752
    276c:	009ffc34 	movhi	r2,32752
    2770:	18809126 	beq	r3,r2,29b8 <_dtoa_r+0x2cc>
    2774:	000d883a 	mov	r6,zero
    2778:	000f883a 	mov	r7,zero
    277c:	a009883a 	mov	r4,r20
    2780:	a80b883a 	mov	r5,r21
    2784:	dd001215 	stw	r20,72(sp)
    2788:	dd401315 	stw	r21,76(sp)
    278c:	0008fac0 	call	8fac <__nedf2>
    2790:	1000171e 	bne	r2,zero,27f0 <_dtoa_r+0x104>
    2794:	d9802717 	ldw	r6,156(sp)
    2798:	00800044 	movi	r2,1
    279c:	30800015 	stw	r2,0(r6)
    27a0:	d8802917 	ldw	r2,164(sp)
    27a4:	10029b26 	beq	r2,zero,3214 <_dtoa_r+0xb28>
    27a8:	d9002917 	ldw	r4,164(sp)
    27ac:	00800074 	movhi	r2,1
    27b0:	10b4e144 	addi	r2,r2,-11387
    27b4:	10ffffc4 	addi	r3,r2,-1
    27b8:	20800015 	stw	r2,0(r4)
    27bc:	1805883a 	mov	r2,r3
    27c0:	dfc02517 	ldw	ra,148(sp)
    27c4:	df002417 	ldw	fp,144(sp)
    27c8:	ddc02317 	ldw	r23,140(sp)
    27cc:	dd802217 	ldw	r22,136(sp)
    27d0:	dd402117 	ldw	r21,132(sp)
    27d4:	dd002017 	ldw	r20,128(sp)
    27d8:	dcc01f17 	ldw	r19,124(sp)
    27dc:	dc801e17 	ldw	r18,120(sp)
    27e0:	dc401d17 	ldw	r17,116(sp)
    27e4:	dc001c17 	ldw	r16,112(sp)
    27e8:	dec02604 	addi	sp,sp,152
    27ec:	f800283a 	ret
    27f0:	d9001617 	ldw	r4,88(sp)
    27f4:	d9401217 	ldw	r5,72(sp)
    27f8:	d8800104 	addi	r2,sp,4
    27fc:	a80d883a 	mov	r6,r21
    2800:	d9c00204 	addi	r7,sp,8
    2804:	d8800015 	stw	r2,0(sp)
    2808:	0005ef00 	call	5ef0 <__d2b>
    280c:	d8800715 	stw	r2,28(sp)
    2810:	a804d53a 	srli	r2,r21,20
    2814:	1101ffcc 	andi	r4,r2,2047
    2818:	20008626 	beq	r4,zero,2a34 <_dtoa_r+0x348>
    281c:	d8c01217 	ldw	r3,72(sp)
    2820:	00800434 	movhi	r2,16
    2824:	10bfffc4 	addi	r2,r2,-1
    2828:	ddc00117 	ldw	r23,4(sp)
    282c:	a884703a 	and	r2,r21,r2
    2830:	1811883a 	mov	r8,r3
    2834:	124ffc34 	orhi	r9,r2,16368
    2838:	25bf0044 	addi	r22,r4,-1023
    283c:	d8000815 	stw	zero,32(sp)
    2840:	0005883a 	mov	r2,zero
    2844:	00cffe34 	movhi	r3,16376
    2848:	480b883a 	mov	r5,r9
    284c:	4009883a 	mov	r4,r8
    2850:	180f883a 	mov	r7,r3
    2854:	100d883a 	mov	r6,r2
    2858:	00088140 	call	8814 <__subdf3>
    285c:	0218dbf4 	movhi	r8,25455
    2860:	4210d844 	addi	r8,r8,17249
    2864:	024ff4f4 	movhi	r9,16339
    2868:	4a61e9c4 	addi	r9,r9,-30809
    286c:	480f883a 	mov	r7,r9
    2870:	400d883a 	mov	r6,r8
    2874:	180b883a 	mov	r5,r3
    2878:	1009883a 	mov	r4,r2
    287c:	00089080 	call	8908 <__muldf3>
    2880:	0222d874 	movhi	r8,35681
    2884:	42322cc4 	addi	r8,r8,-14157
    2888:	024ff1f4 	movhi	r9,16327
    288c:	4a628a04 	addi	r9,r9,-30168
    2890:	480f883a 	mov	r7,r9
    2894:	400d883a 	mov	r6,r8
    2898:	180b883a 	mov	r5,r3
    289c:	1009883a 	mov	r4,r2
    28a0:	00088940 	call	8894 <__adddf3>
    28a4:	b009883a 	mov	r4,r22
    28a8:	1021883a 	mov	r16,r2
    28ac:	1823883a 	mov	r17,r3
    28b0:	00091cc0 	call	91cc <__floatsidf>
    28b4:	021427f4 	movhi	r8,20639
    28b8:	421e7ec4 	addi	r8,r8,31227
    28bc:	024ff4f4 	movhi	r9,16339
    28c0:	4a5104c4 	addi	r9,r9,17427
    28c4:	480f883a 	mov	r7,r9
    28c8:	400d883a 	mov	r6,r8
    28cc:	180b883a 	mov	r5,r3
    28d0:	1009883a 	mov	r4,r2
    28d4:	00089080 	call	8908 <__muldf3>
    28d8:	180f883a 	mov	r7,r3
    28dc:	880b883a 	mov	r5,r17
    28e0:	100d883a 	mov	r6,r2
    28e4:	8009883a 	mov	r4,r16
    28e8:	00088940 	call	8894 <__adddf3>
    28ec:	1009883a 	mov	r4,r2
    28f0:	180b883a 	mov	r5,r3
    28f4:	1021883a 	mov	r16,r2
    28f8:	1823883a 	mov	r17,r3
    28fc:	00092c40 	call	92c4 <__fixdfsi>
    2900:	000d883a 	mov	r6,zero
    2904:	000f883a 	mov	r7,zero
    2908:	8009883a 	mov	r4,r16
    290c:	880b883a 	mov	r5,r17
    2910:	d8800d15 	stw	r2,52(sp)
    2914:	00091440 	call	9144 <__ltdf2>
    2918:	10031716 	blt	r2,zero,3578 <_dtoa_r+0xe8c>
    291c:	d8c00d17 	ldw	r3,52(sp)
    2920:	00800584 	movi	r2,22
    2924:	10c1482e 	bgeu	r2,r3,2e48 <_dtoa_r+0x75c>
    2928:	01000044 	movi	r4,1
    292c:	d9000c15 	stw	r4,48(sp)
    2930:	bd85c83a 	sub	r2,r23,r22
    2934:	11bfffc4 	addi	r6,r2,-1
    2938:	30030b16 	blt	r6,zero,3568 <_dtoa_r+0xe7c>
    293c:	d9800a15 	stw	r6,40(sp)
    2940:	d8001115 	stw	zero,68(sp)
    2944:	d8c00d17 	ldw	r3,52(sp)
    2948:	1802ff16 	blt	r3,zero,3548 <_dtoa_r+0xe5c>
    294c:	d9000a17 	ldw	r4,40(sp)
    2950:	d8c00915 	stw	r3,36(sp)
    2954:	d8001015 	stw	zero,64(sp)
    2958:	20c9883a 	add	r4,r4,r3
    295c:	d9000a15 	stw	r4,40(sp)
    2960:	d9001717 	ldw	r4,92(sp)
    2964:	00800244 	movi	r2,9
    2968:	11004636 	bltu	r2,r4,2a84 <_dtoa_r+0x398>
    296c:	00800144 	movi	r2,5
    2970:	11020416 	blt	r2,r4,3184 <_dtoa_r+0xa98>
    2974:	04400044 	movi	r17,1
    2978:	d8c01717 	ldw	r3,92(sp)
    297c:	00800144 	movi	r2,5
    2980:	10c1ed36 	bltu	r2,r3,3138 <_dtoa_r+0xa4c>
    2984:	18c5883a 	add	r2,r3,r3
    2988:	1085883a 	add	r2,r2,r2
    298c:	00c00034 	movhi	r3,0
    2990:	18ca6804 	addi	r3,r3,10656
    2994:	10c5883a 	add	r2,r2,r3
    2998:	11000017 	ldw	r4,0(r2)
    299c:	2000683a 	jmp	r4
    29a0:	00002a8c 	andi	zero,zero,170
    29a4:	00002a8c 	andi	zero,zero,170
    29a8:	0000348c 	andi	zero,zero,210
    29ac:	00003464 	muli	zero,zero,209
    29b0:	000034a8 	cmpgeui	zero,zero,210
    29b4:	000034b4 	movhi	zero,210
    29b8:	d9002717 	ldw	r4,156(sp)
    29bc:	0089c3c4 	movi	r2,9999
    29c0:	20800015 	stw	r2,0(r4)
    29c4:	a0001026 	beq	r20,zero,2a08 <_dtoa_r+0x31c>
    29c8:	00c00074 	movhi	r3,1
    29cc:	18f4ed04 	addi	r3,r3,-11340
    29d0:	d9802917 	ldw	r6,164(sp)
    29d4:	303f7926 	beq	r6,zero,27bc <_dtoa_r+0xd0>
    29d8:	188000c7 	ldb	r2,3(r3)
    29dc:	190000c4 	addi	r4,r3,3
    29e0:	1000101e 	bne	r2,zero,2a24 <_dtoa_r+0x338>
    29e4:	d8802917 	ldw	r2,164(sp)
    29e8:	11000015 	stw	r4,0(r2)
    29ec:	003f7306 	br	27bc <_dtoa_r+0xd0>
    29f0:	00a00034 	movhi	r2,32768
    29f4:	10bfffc4 	addi	r2,r2,-1
    29f8:	00c00044 	movi	r3,1
    29fc:	88aa703a 	and	r21,r17,r2
    2a00:	90c00015 	stw	r3,0(r18)
    2a04:	003f5806 	br	2768 <_dtoa_r+0x7c>
    2a08:	00800434 	movhi	r2,16
    2a0c:	10bfffc4 	addi	r2,r2,-1
    2a10:	a884703a 	and	r2,r21,r2
    2a14:	103fec1e 	bne	r2,zero,29c8 <_dtoa_r+0x2dc>
    2a18:	00c00074 	movhi	r3,1
    2a1c:	18f4ea04 	addi	r3,r3,-11352
    2a20:	003feb06 	br	29d0 <_dtoa_r+0x2e4>
    2a24:	d8802917 	ldw	r2,164(sp)
    2a28:	19000204 	addi	r4,r3,8
    2a2c:	11000015 	stw	r4,0(r2)
    2a30:	003f6206 	br	27bc <_dtoa_r+0xd0>
    2a34:	ddc00117 	ldw	r23,4(sp)
    2a38:	d8800217 	ldw	r2,8(sp)
    2a3c:	01000804 	movi	r4,32
    2a40:	b8c10c84 	addi	r3,r23,1074
    2a44:	18a3883a 	add	r17,r3,r2
    2a48:	2441b80e 	bge	r4,r17,312c <_dtoa_r+0xa40>
    2a4c:	00c01004 	movi	r3,64
    2a50:	1c47c83a 	sub	r3,r3,r17
    2a54:	88bff804 	addi	r2,r17,-32
    2a58:	a8c6983a 	sll	r3,r21,r3
    2a5c:	a084d83a 	srl	r2,r20,r2
    2a60:	1888b03a 	or	r4,r3,r2
    2a64:	000939c0 	call	939c <__floatunsidf>
    2a68:	1011883a 	mov	r8,r2
    2a6c:	00bf8434 	movhi	r2,65040
    2a70:	01000044 	movi	r4,1
    2a74:	10d3883a 	add	r9,r2,r3
    2a78:	8dbef344 	addi	r22,r17,-1075
    2a7c:	d9000815 	stw	r4,32(sp)
    2a80:	003f6f06 	br	2840 <_dtoa_r+0x154>
    2a84:	d8001715 	stw	zero,92(sp)
    2a88:	04400044 	movi	r17,1
    2a8c:	00bfffc4 	movi	r2,-1
    2a90:	00c00044 	movi	r3,1
    2a94:	d8800e15 	stw	r2,56(sp)
    2a98:	d8002615 	stw	zero,152(sp)
    2a9c:	d8800f15 	stw	r2,60(sp)
    2aa0:	d8c00b15 	stw	r3,44(sp)
    2aa4:	1021883a 	mov	r16,r2
    2aa8:	d8801617 	ldw	r2,88(sp)
    2aac:	10001115 	stw	zero,68(r2)
    2ab0:	d8801617 	ldw	r2,88(sp)
    2ab4:	11401117 	ldw	r5,68(r2)
    2ab8:	1009883a 	mov	r4,r2
    2abc:	0005e340 	call	5e34 <_Balloc>
    2ac0:	d8c01617 	ldw	r3,88(sp)
    2ac4:	d8800515 	stw	r2,20(sp)
    2ac8:	18801015 	stw	r2,64(r3)
    2acc:	00800384 	movi	r2,14
    2ad0:	14006836 	bltu	r2,r16,2c74 <_dtoa_r+0x588>
    2ad4:	8805003a 	cmpeq	r2,r17,zero
    2ad8:	1000661e 	bne	r2,zero,2c74 <_dtoa_r+0x588>
    2adc:	d9000d17 	ldw	r4,52(sp)
    2ae0:	0102300e 	bge	zero,r4,33a4 <_dtoa_r+0xcb8>
    2ae4:	208003cc 	andi	r2,r4,15
    2ae8:	100490fa 	slli	r2,r2,3
    2aec:	2025d13a 	srai	r18,r4,4
    2af0:	00c00074 	movhi	r3,1
    2af4:	18f4ff04 	addi	r3,r3,-11268
    2af8:	10c5883a 	add	r2,r2,r3
    2afc:	90c0040c 	andi	r3,r18,16
    2b00:	14000017 	ldw	r16,0(r2)
    2b04:	14400117 	ldw	r17,4(r2)
    2b08:	18036a1e 	bne	r3,zero,38b4 <_dtoa_r+0x11c8>
    2b0c:	05800084 	movi	r22,2
    2b10:	90001026 	beq	r18,zero,2b54 <_dtoa_r+0x468>
    2b14:	04c00074 	movhi	r19,1
    2b18:	9cf53104 	addi	r19,r19,-11068
    2b1c:	9080004c 	andi	r2,r18,1
    2b20:	1005003a 	cmpeq	r2,r2,zero
    2b24:	1000081e 	bne	r2,zero,2b48 <_dtoa_r+0x45c>
    2b28:	99800017 	ldw	r6,0(r19)
    2b2c:	99c00117 	ldw	r7,4(r19)
    2b30:	880b883a 	mov	r5,r17
    2b34:	8009883a 	mov	r4,r16
    2b38:	00089080 	call	8908 <__muldf3>
    2b3c:	1021883a 	mov	r16,r2
    2b40:	b5800044 	addi	r22,r22,1
    2b44:	1823883a 	mov	r17,r3
    2b48:	9025d07a 	srai	r18,r18,1
    2b4c:	9cc00204 	addi	r19,r19,8
    2b50:	903ff21e 	bne	r18,zero,2b1c <_dtoa_r+0x430>
    2b54:	a80b883a 	mov	r5,r21
    2b58:	a009883a 	mov	r4,r20
    2b5c:	880f883a 	mov	r7,r17
    2b60:	800d883a 	mov	r6,r16
    2b64:	0008ccc0 	call	8ccc <__divdf3>
    2b68:	1029883a 	mov	r20,r2
    2b6c:	182b883a 	mov	r21,r3
    2b70:	d8c00c17 	ldw	r3,48(sp)
    2b74:	1805003a 	cmpeq	r2,r3,zero
    2b78:	1000081e 	bne	r2,zero,2b9c <_dtoa_r+0x4b0>
    2b7c:	0005883a 	mov	r2,zero
    2b80:	00cffc34 	movhi	r3,16368
    2b84:	180f883a 	mov	r7,r3
    2b88:	a009883a 	mov	r4,r20
    2b8c:	a80b883a 	mov	r5,r21
    2b90:	100d883a 	mov	r6,r2
    2b94:	00091440 	call	9144 <__ltdf2>
    2b98:	1003fe16 	blt	r2,zero,3b94 <_dtoa_r+0x14a8>
    2b9c:	b009883a 	mov	r4,r22
    2ba0:	00091cc0 	call	91cc <__floatsidf>
    2ba4:	180b883a 	mov	r5,r3
    2ba8:	1009883a 	mov	r4,r2
    2bac:	a00d883a 	mov	r6,r20
    2bb0:	a80f883a 	mov	r7,r21
    2bb4:	00089080 	call	8908 <__muldf3>
    2bb8:	0011883a 	mov	r8,zero
    2bbc:	02500734 	movhi	r9,16412
    2bc0:	1009883a 	mov	r4,r2
    2bc4:	180b883a 	mov	r5,r3
    2bc8:	480f883a 	mov	r7,r9
    2bcc:	400d883a 	mov	r6,r8
    2bd0:	00088940 	call	8894 <__adddf3>
    2bd4:	d9000f17 	ldw	r4,60(sp)
    2bd8:	102d883a 	mov	r22,r2
    2bdc:	00bf3034 	movhi	r2,64704
    2be0:	18b9883a 	add	fp,r3,r2
    2be4:	e02f883a 	mov	r23,fp
    2be8:	20028f1e 	bne	r4,zero,3628 <_dtoa_r+0xf3c>
    2bec:	0005883a 	mov	r2,zero
    2bf0:	00d00534 	movhi	r3,16404
    2bf4:	a009883a 	mov	r4,r20
    2bf8:	a80b883a 	mov	r5,r21
    2bfc:	180f883a 	mov	r7,r3
    2c00:	100d883a 	mov	r6,r2
    2c04:	00088140 	call	8814 <__subdf3>
    2c08:	1009883a 	mov	r4,r2
    2c0c:	e00f883a 	mov	r7,fp
    2c10:	180b883a 	mov	r5,r3
    2c14:	b00d883a 	mov	r6,r22
    2c18:	1025883a 	mov	r18,r2
    2c1c:	1827883a 	mov	r19,r3
    2c20:	00090340 	call	9034 <__gtdf2>
    2c24:	00834f16 	blt	zero,r2,3964 <_dtoa_r+0x1278>
    2c28:	e0e0003c 	xorhi	r3,fp,32768
    2c2c:	9009883a 	mov	r4,r18
    2c30:	980b883a 	mov	r5,r19
    2c34:	180f883a 	mov	r7,r3
    2c38:	b00d883a 	mov	r6,r22
    2c3c:	00091440 	call	9144 <__ltdf2>
    2c40:	1000080e 	bge	r2,zero,2c64 <_dtoa_r+0x578>
    2c44:	0027883a 	mov	r19,zero
    2c48:	0025883a 	mov	r18,zero
    2c4c:	d8802617 	ldw	r2,152(sp)
    2c50:	df000517 	ldw	fp,20(sp)
    2c54:	d8000615 	stw	zero,24(sp)
    2c58:	0084303a 	nor	r2,zero,r2
    2c5c:	d8800d15 	stw	r2,52(sp)
    2c60:	00019b06 	br	32d0 <_dtoa_r+0xbe4>
    2c64:	d9801217 	ldw	r6,72(sp)
    2c68:	d8801317 	ldw	r2,76(sp)
    2c6c:	3029883a 	mov	r20,r6
    2c70:	102b883a 	mov	r21,r2
    2c74:	d8c00217 	ldw	r3,8(sp)
    2c78:	18008516 	blt	r3,zero,2e90 <_dtoa_r+0x7a4>
    2c7c:	d9000d17 	ldw	r4,52(sp)
    2c80:	00800384 	movi	r2,14
    2c84:	11008216 	blt	r2,r4,2e90 <_dtoa_r+0x7a4>
    2c88:	200490fa 	slli	r2,r4,3
    2c8c:	d9802617 	ldw	r6,152(sp)
    2c90:	00c00074 	movhi	r3,1
    2c94:	18f4ff04 	addi	r3,r3,-11268
    2c98:	10c5883a 	add	r2,r2,r3
    2c9c:	14800017 	ldw	r18,0(r2)
    2ca0:	14c00117 	ldw	r19,4(r2)
    2ca4:	30031e16 	blt	r6,zero,3920 <_dtoa_r+0x1234>
    2ca8:	d9000517 	ldw	r4,20(sp)
    2cac:	d8c00f17 	ldw	r3,60(sp)
    2cb0:	a823883a 	mov	r17,r21
    2cb4:	a021883a 	mov	r16,r20
    2cb8:	192b883a 	add	r21,r3,r4
    2cbc:	2039883a 	mov	fp,r4
    2cc0:	00000f06 	br	2d00 <_dtoa_r+0x614>
    2cc4:	0005883a 	mov	r2,zero
    2cc8:	00d00934 	movhi	r3,16420
    2ccc:	5009883a 	mov	r4,r10
    2cd0:	580b883a 	mov	r5,r11
    2cd4:	180f883a 	mov	r7,r3
    2cd8:	100d883a 	mov	r6,r2
    2cdc:	00089080 	call	8908 <__muldf3>
    2ce0:	180b883a 	mov	r5,r3
    2ce4:	000d883a 	mov	r6,zero
    2ce8:	000f883a 	mov	r7,zero
    2cec:	1009883a 	mov	r4,r2
    2cf0:	1021883a 	mov	r16,r2
    2cf4:	1823883a 	mov	r17,r3
    2cf8:	0008fac0 	call	8fac <__nedf2>
    2cfc:	10004526 	beq	r2,zero,2e14 <_dtoa_r+0x728>
    2d00:	900d883a 	mov	r6,r18
    2d04:	980f883a 	mov	r7,r19
    2d08:	8009883a 	mov	r4,r16
    2d0c:	880b883a 	mov	r5,r17
    2d10:	0008ccc0 	call	8ccc <__divdf3>
    2d14:	180b883a 	mov	r5,r3
    2d18:	1009883a 	mov	r4,r2
    2d1c:	00092c40 	call	92c4 <__fixdfsi>
    2d20:	1009883a 	mov	r4,r2
    2d24:	1029883a 	mov	r20,r2
    2d28:	00091cc0 	call	91cc <__floatsidf>
    2d2c:	180f883a 	mov	r7,r3
    2d30:	9009883a 	mov	r4,r18
    2d34:	980b883a 	mov	r5,r19
    2d38:	100d883a 	mov	r6,r2
    2d3c:	00089080 	call	8908 <__muldf3>
    2d40:	180f883a 	mov	r7,r3
    2d44:	880b883a 	mov	r5,r17
    2d48:	8009883a 	mov	r4,r16
    2d4c:	100d883a 	mov	r6,r2
    2d50:	00088140 	call	8814 <__subdf3>
    2d54:	1015883a 	mov	r10,r2
    2d58:	a0800c04 	addi	r2,r20,48
    2d5c:	e0800005 	stb	r2,0(fp)
    2d60:	e7000044 	addi	fp,fp,1
    2d64:	1817883a 	mov	r11,r3
    2d68:	e57fd61e 	bne	fp,r21,2cc4 <_dtoa_r+0x5d8>
    2d6c:	500d883a 	mov	r6,r10
    2d70:	180f883a 	mov	r7,r3
    2d74:	5009883a 	mov	r4,r10
    2d78:	180b883a 	mov	r5,r3
    2d7c:	00088940 	call	8894 <__adddf3>
    2d80:	100d883a 	mov	r6,r2
    2d84:	9009883a 	mov	r4,r18
    2d88:	980b883a 	mov	r5,r19
    2d8c:	180f883a 	mov	r7,r3
    2d90:	1021883a 	mov	r16,r2
    2d94:	1823883a 	mov	r17,r3
    2d98:	00091440 	call	9144 <__ltdf2>
    2d9c:	10000816 	blt	r2,zero,2dc0 <_dtoa_r+0x6d4>
    2da0:	980b883a 	mov	r5,r19
    2da4:	800d883a 	mov	r6,r16
    2da8:	880f883a 	mov	r7,r17
    2dac:	9009883a 	mov	r4,r18
    2db0:	0008f240 	call	8f24 <__eqdf2>
    2db4:	1000171e 	bne	r2,zero,2e14 <_dtoa_r+0x728>
    2db8:	a080004c 	andi	r2,r20,1
    2dbc:	10001526 	beq	r2,zero,2e14 <_dtoa_r+0x728>
    2dc0:	d8800d17 	ldw	r2,52(sp)
    2dc4:	d8800415 	stw	r2,16(sp)
    2dc8:	e009883a 	mov	r4,fp
    2dcc:	213fffc4 	addi	r4,r4,-1
    2dd0:	20c00007 	ldb	r3,0(r4)
    2dd4:	00800e44 	movi	r2,57
    2dd8:	1880081e 	bne	r3,r2,2dfc <_dtoa_r+0x710>
    2ddc:	d8800517 	ldw	r2,20(sp)
    2de0:	113ffa1e 	bne	r2,r4,2dcc <_dtoa_r+0x6e0>
    2de4:	d8c00417 	ldw	r3,16(sp)
    2de8:	d9800517 	ldw	r6,20(sp)
    2dec:	00800c04 	movi	r2,48
    2df0:	18c00044 	addi	r3,r3,1
    2df4:	d8c00415 	stw	r3,16(sp)
    2df8:	30800005 	stb	r2,0(r6)
    2dfc:	20800003 	ldbu	r2,0(r4)
    2e00:	d8c00417 	ldw	r3,16(sp)
    2e04:	27000044 	addi	fp,r4,1
    2e08:	10800044 	addi	r2,r2,1
    2e0c:	d8c00d15 	stw	r3,52(sp)
    2e10:	20800005 	stb	r2,0(r4)
    2e14:	d9001617 	ldw	r4,88(sp)
    2e18:	d9400717 	ldw	r5,28(sp)
    2e1c:	00058b40 	call	58b4 <_Bfree>
    2e20:	e0000005 	stb	zero,0(fp)
    2e24:	d9800d17 	ldw	r6,52(sp)
    2e28:	d8c02717 	ldw	r3,156(sp)
    2e2c:	d9002917 	ldw	r4,164(sp)
    2e30:	30800044 	addi	r2,r6,1
    2e34:	18800015 	stw	r2,0(r3)
    2e38:	20029c26 	beq	r4,zero,38ac <_dtoa_r+0x11c0>
    2e3c:	d8c00517 	ldw	r3,20(sp)
    2e40:	27000015 	stw	fp,0(r4)
    2e44:	003e5d06 	br	27bc <_dtoa_r+0xd0>
    2e48:	d9800d17 	ldw	r6,52(sp)
    2e4c:	00c00074 	movhi	r3,1
    2e50:	18f4ff04 	addi	r3,r3,-11268
    2e54:	d9001217 	ldw	r4,72(sp)
    2e58:	300490fa 	slli	r2,r6,3
    2e5c:	d9401317 	ldw	r5,76(sp)
    2e60:	10c5883a 	add	r2,r2,r3
    2e64:	12000017 	ldw	r8,0(r2)
    2e68:	12400117 	ldw	r9,4(r2)
    2e6c:	400d883a 	mov	r6,r8
    2e70:	480f883a 	mov	r7,r9
    2e74:	00091440 	call	9144 <__ltdf2>
    2e78:	1000030e 	bge	r2,zero,2e88 <_dtoa_r+0x79c>
    2e7c:	d8800d17 	ldw	r2,52(sp)
    2e80:	10bfffc4 	addi	r2,r2,-1
    2e84:	d8800d15 	stw	r2,52(sp)
    2e88:	d8000c15 	stw	zero,48(sp)
    2e8c:	003ea806 	br	2930 <_dtoa_r+0x244>
    2e90:	d9000b17 	ldw	r4,44(sp)
    2e94:	202cc03a 	cmpne	r22,r4,zero
    2e98:	b000c71e 	bne	r22,zero,31b8 <_dtoa_r+0xacc>
    2e9c:	dc001117 	ldw	r16,68(sp)
    2ea0:	dc801017 	ldw	r18,64(sp)
    2ea4:	0027883a 	mov	r19,zero
    2ea8:	04000b0e 	bge	zero,r16,2ed8 <_dtoa_r+0x7ec>
    2eac:	d8c00a17 	ldw	r3,40(sp)
    2eb0:	00c0090e 	bge	zero,r3,2ed8 <_dtoa_r+0x7ec>
    2eb4:	8005883a 	mov	r2,r16
    2eb8:	1c011316 	blt	r3,r16,3308 <_dtoa_r+0xc1c>
    2ebc:	d9000a17 	ldw	r4,40(sp)
    2ec0:	d9801117 	ldw	r6,68(sp)
    2ec4:	80a1c83a 	sub	r16,r16,r2
    2ec8:	2089c83a 	sub	r4,r4,r2
    2ecc:	308dc83a 	sub	r6,r6,r2
    2ed0:	d9000a15 	stw	r4,40(sp)
    2ed4:	d9801115 	stw	r6,68(sp)
    2ed8:	d8801017 	ldw	r2,64(sp)
    2edc:	0080150e 	bge	zero,r2,2f34 <_dtoa_r+0x848>
    2ee0:	d8c00b17 	ldw	r3,44(sp)
    2ee4:	1805003a 	cmpeq	r2,r3,zero
    2ee8:	1001c91e 	bne	r2,zero,3610 <_dtoa_r+0xf24>
    2eec:	04800e0e 	bge	zero,r18,2f28 <_dtoa_r+0x83c>
    2ef0:	d9001617 	ldw	r4,88(sp)
    2ef4:	980b883a 	mov	r5,r19
    2ef8:	900d883a 	mov	r6,r18
    2efc:	00067000 	call	6700 <__pow5mult>
    2f00:	d9001617 	ldw	r4,88(sp)
    2f04:	d9800717 	ldw	r6,28(sp)
    2f08:	100b883a 	mov	r5,r2
    2f0c:	1027883a 	mov	r19,r2
    2f10:	00063440 	call	6344 <__multiply>
    2f14:	d9001617 	ldw	r4,88(sp)
    2f18:	d9400717 	ldw	r5,28(sp)
    2f1c:	1023883a 	mov	r17,r2
    2f20:	00058b40 	call	58b4 <_Bfree>
    2f24:	dc400715 	stw	r17,28(sp)
    2f28:	d9001017 	ldw	r4,64(sp)
    2f2c:	248dc83a 	sub	r6,r4,r18
    2f30:	30010e1e 	bne	r6,zero,336c <_dtoa_r+0xc80>
    2f34:	d9001617 	ldw	r4,88(sp)
    2f38:	04400044 	movi	r17,1
    2f3c:	880b883a 	mov	r5,r17
    2f40:	00065980 	call	6598 <__i2b>
    2f44:	d9800917 	ldw	r6,36(sp)
    2f48:	1025883a 	mov	r18,r2
    2f4c:	0180040e 	bge	zero,r6,2f60 <_dtoa_r+0x874>
    2f50:	d9001617 	ldw	r4,88(sp)
    2f54:	100b883a 	mov	r5,r2
    2f58:	00067000 	call	6700 <__pow5mult>
    2f5c:	1025883a 	mov	r18,r2
    2f60:	d8801717 	ldw	r2,92(sp)
    2f64:	8880f30e 	bge	r17,r2,3334 <_dtoa_r+0xc48>
    2f68:	0023883a 	mov	r17,zero
    2f6c:	d9800917 	ldw	r6,36(sp)
    2f70:	30019e1e 	bne	r6,zero,35ec <_dtoa_r+0xf00>
    2f74:	00c00044 	movi	r3,1
    2f78:	d9000a17 	ldw	r4,40(sp)
    2f7c:	20c5883a 	add	r2,r4,r3
    2f80:	10c007cc 	andi	r3,r2,31
    2f84:	1800841e 	bne	r3,zero,3198 <_dtoa_r+0xaac>
    2f88:	00800704 	movi	r2,28
    2f8c:	d9000a17 	ldw	r4,40(sp)
    2f90:	d9801117 	ldw	r6,68(sp)
    2f94:	80a1883a 	add	r16,r16,r2
    2f98:	2089883a 	add	r4,r4,r2
    2f9c:	308d883a 	add	r6,r6,r2
    2fa0:	d9000a15 	stw	r4,40(sp)
    2fa4:	d9801115 	stw	r6,68(sp)
    2fa8:	d8801117 	ldw	r2,68(sp)
    2fac:	0080050e 	bge	zero,r2,2fc4 <_dtoa_r+0x8d8>
    2fb0:	d9400717 	ldw	r5,28(sp)
    2fb4:	d9001617 	ldw	r4,88(sp)
    2fb8:	100d883a 	mov	r6,r2
    2fbc:	00061f80 	call	61f8 <__lshift>
    2fc0:	d8800715 	stw	r2,28(sp)
    2fc4:	d8c00a17 	ldw	r3,40(sp)
    2fc8:	00c0050e 	bge	zero,r3,2fe0 <_dtoa_r+0x8f4>
    2fcc:	d9001617 	ldw	r4,88(sp)
    2fd0:	900b883a 	mov	r5,r18
    2fd4:	180d883a 	mov	r6,r3
    2fd8:	00061f80 	call	61f8 <__lshift>
    2fdc:	1025883a 	mov	r18,r2
    2fe0:	d9000c17 	ldw	r4,48(sp)
    2fe4:	2005003a 	cmpeq	r2,r4,zero
    2fe8:	10016f26 	beq	r2,zero,35a8 <_dtoa_r+0xebc>
    2fec:	d9000f17 	ldw	r4,60(sp)
    2ff0:	0102170e 	bge	zero,r4,3850 <_dtoa_r+0x1164>
    2ff4:	d9800b17 	ldw	r6,44(sp)
    2ff8:	3005003a 	cmpeq	r2,r6,zero
    2ffc:	1000881e 	bne	r2,zero,3220 <_dtoa_r+0xb34>
    3000:	0400050e 	bge	zero,r16,3018 <_dtoa_r+0x92c>
    3004:	d9001617 	ldw	r4,88(sp)
    3008:	980b883a 	mov	r5,r19
    300c:	800d883a 	mov	r6,r16
    3010:	00061f80 	call	61f8 <__lshift>
    3014:	1027883a 	mov	r19,r2
    3018:	8804c03a 	cmpne	r2,r17,zero
    301c:	1002541e 	bne	r2,zero,3970 <_dtoa_r+0x1284>
    3020:	980b883a 	mov	r5,r19
    3024:	dd800517 	ldw	r22,20(sp)
    3028:	dcc00615 	stw	r19,24(sp)
    302c:	a700004c 	andi	fp,r20,1
    3030:	2827883a 	mov	r19,r5
    3034:	d9000717 	ldw	r4,28(sp)
    3038:	900b883a 	mov	r5,r18
    303c:	00024a80 	call	24a8 <quorem>
    3040:	d9000717 	ldw	r4,28(sp)
    3044:	d9400617 	ldw	r5,24(sp)
    3048:	1023883a 	mov	r17,r2
    304c:	8dc00c04 	addi	r23,r17,48
    3050:	0005a100 	call	5a10 <__mcmp>
    3054:	d9001617 	ldw	r4,88(sp)
    3058:	900b883a 	mov	r5,r18
    305c:	980d883a 	mov	r6,r19
    3060:	1029883a 	mov	r20,r2
    3064:	000606c0 	call	606c <__mdiff>
    3068:	102b883a 	mov	r21,r2
    306c:	10800317 	ldw	r2,12(r2)
    3070:	1001281e 	bne	r2,zero,3514 <_dtoa_r+0xe28>
    3074:	d9000717 	ldw	r4,28(sp)
    3078:	a80b883a 	mov	r5,r21
    307c:	0005a100 	call	5a10 <__mcmp>
    3080:	d9001617 	ldw	r4,88(sp)
    3084:	1021883a 	mov	r16,r2
    3088:	a80b883a 	mov	r5,r21
    308c:	00058b40 	call	58b4 <_Bfree>
    3090:	8000041e 	bne	r16,zero,30a4 <_dtoa_r+0x9b8>
    3094:	d8801717 	ldw	r2,92(sp)
    3098:	1000021e 	bne	r2,zero,30a4 <_dtoa_r+0x9b8>
    309c:	e004c03a 	cmpne	r2,fp,zero
    30a0:	10011726 	beq	r2,zero,3500 <_dtoa_r+0xe14>
    30a4:	a0010616 	blt	r20,zero,34c0 <_dtoa_r+0xdd4>
    30a8:	a000041e 	bne	r20,zero,30bc <_dtoa_r+0x9d0>
    30ac:	d8c01717 	ldw	r3,92(sp)
    30b0:	1800021e 	bne	r3,zero,30bc <_dtoa_r+0x9d0>
    30b4:	e004c03a 	cmpne	r2,fp,zero
    30b8:	10010126 	beq	r2,zero,34c0 <_dtoa_r+0xdd4>
    30bc:	04023d16 	blt	zero,r16,39b4 <_dtoa_r+0x12c8>
    30c0:	b5c00005 	stb	r23,0(r22)
    30c4:	d9800517 	ldw	r6,20(sp)
    30c8:	d9000f17 	ldw	r4,60(sp)
    30cc:	b5800044 	addi	r22,r22,1
    30d0:	3105883a 	add	r2,r6,r4
    30d4:	b0806526 	beq	r22,r2,326c <_dtoa_r+0xb80>
    30d8:	d9400717 	ldw	r5,28(sp)
    30dc:	d9001617 	ldw	r4,88(sp)
    30e0:	01800284 	movi	r6,10
    30e4:	000f883a 	mov	r7,zero
    30e8:	00065d40 	call	65d4 <__multadd>
    30ec:	d8800715 	stw	r2,28(sp)
    30f0:	d8800617 	ldw	r2,24(sp)
    30f4:	14c10c26 	beq	r2,r19,3528 <_dtoa_r+0xe3c>
    30f8:	d9400617 	ldw	r5,24(sp)
    30fc:	d9001617 	ldw	r4,88(sp)
    3100:	01800284 	movi	r6,10
    3104:	000f883a 	mov	r7,zero
    3108:	00065d40 	call	65d4 <__multadd>
    310c:	d9001617 	ldw	r4,88(sp)
    3110:	980b883a 	mov	r5,r19
    3114:	01800284 	movi	r6,10
    3118:	000f883a 	mov	r7,zero
    311c:	d8800615 	stw	r2,24(sp)
    3120:	00065d40 	call	65d4 <__multadd>
    3124:	1027883a 	mov	r19,r2
    3128:	003fc206 	br	3034 <_dtoa_r+0x948>
    312c:	2445c83a 	sub	r2,r4,r17
    3130:	a088983a 	sll	r4,r20,r2
    3134:	003e4b06 	br	2a64 <_dtoa_r+0x378>
    3138:	01bfffc4 	movi	r6,-1
    313c:	00800044 	movi	r2,1
    3140:	d9800e15 	stw	r6,56(sp)
    3144:	d9800f15 	stw	r6,60(sp)
    3148:	d8800b15 	stw	r2,44(sp)
    314c:	d8c01617 	ldw	r3,88(sp)
    3150:	008005c4 	movi	r2,23
    3154:	18001115 	stw	zero,68(r3)
    3158:	1580082e 	bgeu	r2,r22,317c <_dtoa_r+0xa90>
    315c:	00c00104 	movi	r3,4
    3160:	0009883a 	mov	r4,zero
    3164:	18c7883a 	add	r3,r3,r3
    3168:	18800504 	addi	r2,r3,20
    316c:	21000044 	addi	r4,r4,1
    3170:	b0bffc2e 	bgeu	r22,r2,3164 <_dtoa_r+0xa78>
    3174:	d9801617 	ldw	r6,88(sp)
    3178:	31001115 	stw	r4,68(r6)
    317c:	dc000f17 	ldw	r16,60(sp)
    3180:	003e4b06 	br	2ab0 <_dtoa_r+0x3c4>
    3184:	d9801717 	ldw	r6,92(sp)
    3188:	0023883a 	mov	r17,zero
    318c:	31bfff04 	addi	r6,r6,-4
    3190:	d9801715 	stw	r6,92(sp)
    3194:	003df806 	br	2978 <_dtoa_r+0x28c>
    3198:	00800804 	movi	r2,32
    319c:	10c9c83a 	sub	r4,r2,r3
    31a0:	00c00104 	movi	r3,4
    31a4:	19005a16 	blt	r3,r4,3310 <_dtoa_r+0xc24>
    31a8:	008000c4 	movi	r2,3
    31ac:	113f7e16 	blt	r2,r4,2fa8 <_dtoa_r+0x8bc>
    31b0:	20800704 	addi	r2,r4,28
    31b4:	003f7506 	br	2f8c <_dtoa_r+0x8a0>
    31b8:	d9801717 	ldw	r6,92(sp)
    31bc:	00800044 	movi	r2,1
    31c0:	1180a10e 	bge	r2,r6,3448 <_dtoa_r+0xd5c>
    31c4:	d9800f17 	ldw	r6,60(sp)
    31c8:	d8c01017 	ldw	r3,64(sp)
    31cc:	30bfffc4 	addi	r2,r6,-1
    31d0:	1881c616 	blt	r3,r2,38ec <_dtoa_r+0x1200>
    31d4:	18a5c83a 	sub	r18,r3,r2
    31d8:	d8800f17 	ldw	r2,60(sp)
    31dc:	10026216 	blt	r2,zero,3b68 <_dtoa_r+0x147c>
    31e0:	dc001117 	ldw	r16,68(sp)
    31e4:	1007883a 	mov	r3,r2
    31e8:	d9800a17 	ldw	r6,40(sp)
    31ec:	d8801117 	ldw	r2,68(sp)
    31f0:	d9001617 	ldw	r4,88(sp)
    31f4:	30cd883a 	add	r6,r6,r3
    31f8:	10c5883a 	add	r2,r2,r3
    31fc:	01400044 	movi	r5,1
    3200:	d9800a15 	stw	r6,40(sp)
    3204:	d8801115 	stw	r2,68(sp)
    3208:	00065980 	call	6598 <__i2b>
    320c:	1027883a 	mov	r19,r2
    3210:	003f2506 	br	2ea8 <_dtoa_r+0x7bc>
    3214:	00c00074 	movhi	r3,1
    3218:	18f4e104 	addi	r3,r3,-11388
    321c:	003d6706 	br	27bc <_dtoa_r+0xd0>
    3220:	dd800517 	ldw	r22,20(sp)
    3224:	04000044 	movi	r16,1
    3228:	00000706 	br	3248 <_dtoa_r+0xb5c>
    322c:	d9400717 	ldw	r5,28(sp)
    3230:	d9001617 	ldw	r4,88(sp)
    3234:	01800284 	movi	r6,10
    3238:	000f883a 	mov	r7,zero
    323c:	00065d40 	call	65d4 <__multadd>
    3240:	d8800715 	stw	r2,28(sp)
    3244:	84000044 	addi	r16,r16,1
    3248:	d9000717 	ldw	r4,28(sp)
    324c:	900b883a 	mov	r5,r18
    3250:	00024a80 	call	24a8 <quorem>
    3254:	15c00c04 	addi	r23,r2,48
    3258:	b5c00005 	stb	r23,0(r22)
    325c:	d8c00f17 	ldw	r3,60(sp)
    3260:	b5800044 	addi	r22,r22,1
    3264:	80fff116 	blt	r16,r3,322c <_dtoa_r+0xb40>
    3268:	d8000615 	stw	zero,24(sp)
    326c:	d9400717 	ldw	r5,28(sp)
    3270:	d9001617 	ldw	r4,88(sp)
    3274:	01800044 	movi	r6,1
    3278:	00061f80 	call	61f8 <__lshift>
    327c:	1009883a 	mov	r4,r2
    3280:	900b883a 	mov	r5,r18
    3284:	d8800715 	stw	r2,28(sp)
    3288:	0005a100 	call	5a10 <__mcmp>
    328c:	00803c0e 	bge	zero,r2,3380 <_dtoa_r+0xc94>
    3290:	b009883a 	mov	r4,r22
    3294:	213fffc4 	addi	r4,r4,-1
    3298:	21400003 	ldbu	r5,0(r4)
    329c:	00800e44 	movi	r2,57
    32a0:	28c03fcc 	andi	r3,r5,255
    32a4:	18c0201c 	xori	r3,r3,128
    32a8:	18ffe004 	addi	r3,r3,-128
    32ac:	1881981e 	bne	r3,r2,3910 <_dtoa_r+0x1224>
    32b0:	d9800517 	ldw	r6,20(sp)
    32b4:	21bff71e 	bne	r4,r6,3294 <_dtoa_r+0xba8>
    32b8:	d8800d17 	ldw	r2,52(sp)
    32bc:	37000044 	addi	fp,r6,1
    32c0:	10800044 	addi	r2,r2,1
    32c4:	d8800d15 	stw	r2,52(sp)
    32c8:	00800c44 	movi	r2,49
    32cc:	30800005 	stb	r2,0(r6)
    32d0:	d9001617 	ldw	r4,88(sp)
    32d4:	900b883a 	mov	r5,r18
    32d8:	00058b40 	call	58b4 <_Bfree>
    32dc:	983ecd26 	beq	r19,zero,2e14 <_dtoa_r+0x728>
    32e0:	d8c00617 	ldw	r3,24(sp)
    32e4:	18000426 	beq	r3,zero,32f8 <_dtoa_r+0xc0c>
    32e8:	1cc00326 	beq	r3,r19,32f8 <_dtoa_r+0xc0c>
    32ec:	d9001617 	ldw	r4,88(sp)
    32f0:	180b883a 	mov	r5,r3
    32f4:	00058b40 	call	58b4 <_Bfree>
    32f8:	d9001617 	ldw	r4,88(sp)
    32fc:	980b883a 	mov	r5,r19
    3300:	00058b40 	call	58b4 <_Bfree>
    3304:	003ec306 	br	2e14 <_dtoa_r+0x728>
    3308:	1805883a 	mov	r2,r3
    330c:	003eeb06 	br	2ebc <_dtoa_r+0x7d0>
    3310:	d9800a17 	ldw	r6,40(sp)
    3314:	d8c01117 	ldw	r3,68(sp)
    3318:	20bfff04 	addi	r2,r4,-4
    331c:	308d883a 	add	r6,r6,r2
    3320:	1887883a 	add	r3,r3,r2
    3324:	80a1883a 	add	r16,r16,r2
    3328:	d9800a15 	stw	r6,40(sp)
    332c:	d8c01115 	stw	r3,68(sp)
    3330:	003f1d06 	br	2fa8 <_dtoa_r+0x8bc>
    3334:	a03f0c1e 	bne	r20,zero,2f68 <_dtoa_r+0x87c>
    3338:	00800434 	movhi	r2,16
    333c:	10bfffc4 	addi	r2,r2,-1
    3340:	a884703a 	and	r2,r21,r2
    3344:	103f081e 	bne	r2,zero,2f68 <_dtoa_r+0x87c>
    3348:	a89ffc2c 	andhi	r2,r21,32752
    334c:	103f0626 	beq	r2,zero,2f68 <_dtoa_r+0x87c>
    3350:	d8c01117 	ldw	r3,68(sp)
    3354:	d9000a17 	ldw	r4,40(sp)
    3358:	18c00044 	addi	r3,r3,1
    335c:	21000044 	addi	r4,r4,1
    3360:	d8c01115 	stw	r3,68(sp)
    3364:	d9000a15 	stw	r4,40(sp)
    3368:	003f0006 	br	2f6c <_dtoa_r+0x880>
    336c:	d9400717 	ldw	r5,28(sp)
    3370:	d9001617 	ldw	r4,88(sp)
    3374:	00067000 	call	6700 <__pow5mult>
    3378:	d8800715 	stw	r2,28(sp)
    337c:	003eed06 	br	2f34 <_dtoa_r+0x848>
    3380:	1000021e 	bne	r2,zero,338c <_dtoa_r+0xca0>
    3384:	b880004c 	andi	r2,r23,1
    3388:	103fc11e 	bne	r2,zero,3290 <_dtoa_r+0xba4>
    338c:	b5bfffc4 	addi	r22,r22,-1
    3390:	b0c00007 	ldb	r3,0(r22)
    3394:	00800c04 	movi	r2,48
    3398:	18bffc26 	beq	r3,r2,338c <_dtoa_r+0xca0>
    339c:	b7000044 	addi	fp,r22,1
    33a0:	003fcb06 	br	32d0 <_dtoa_r+0xbe4>
    33a4:	d9800d17 	ldw	r6,52(sp)
    33a8:	018fc83a 	sub	r7,zero,r6
    33ac:	3801f726 	beq	r7,zero,3b8c <_dtoa_r+0x14a0>
    33b0:	398003cc 	andi	r6,r7,15
    33b4:	300c90fa 	slli	r6,r6,3
    33b8:	01400074 	movhi	r5,1
    33bc:	2974ff04 	addi	r5,r5,-11268
    33c0:	d9001217 	ldw	r4,72(sp)
    33c4:	314d883a 	add	r6,r6,r5
    33c8:	30c00117 	ldw	r3,4(r6)
    33cc:	30800017 	ldw	r2,0(r6)
    33d0:	d9401317 	ldw	r5,76(sp)
    33d4:	3821d13a 	srai	r16,r7,4
    33d8:	100d883a 	mov	r6,r2
    33dc:	180f883a 	mov	r7,r3
    33e0:	00089080 	call	8908 <__muldf3>
    33e4:	1011883a 	mov	r8,r2
    33e8:	1813883a 	mov	r9,r3
    33ec:	1029883a 	mov	r20,r2
    33f0:	182b883a 	mov	r21,r3
    33f4:	8001e526 	beq	r16,zero,3b8c <_dtoa_r+0x14a0>
    33f8:	05800084 	movi	r22,2
    33fc:	04400074 	movhi	r17,1
    3400:	8c753104 	addi	r17,r17,-11068
    3404:	8080004c 	andi	r2,r16,1
    3408:	1005003a 	cmpeq	r2,r2,zero
    340c:	1000081e 	bne	r2,zero,3430 <_dtoa_r+0xd44>
    3410:	89800017 	ldw	r6,0(r17)
    3414:	89c00117 	ldw	r7,4(r17)
    3418:	480b883a 	mov	r5,r9
    341c:	4009883a 	mov	r4,r8
    3420:	00089080 	call	8908 <__muldf3>
    3424:	1011883a 	mov	r8,r2
    3428:	b5800044 	addi	r22,r22,1
    342c:	1813883a 	mov	r9,r3
    3430:	8021d07a 	srai	r16,r16,1
    3434:	8c400204 	addi	r17,r17,8
    3438:	803ff21e 	bne	r16,zero,3404 <_dtoa_r+0xd18>
    343c:	4029883a 	mov	r20,r8
    3440:	482b883a 	mov	r21,r9
    3444:	003dca06 	br	2b70 <_dtoa_r+0x484>
    3448:	d9000817 	ldw	r4,32(sp)
    344c:	2005003a 	cmpeq	r2,r4,zero
    3450:	1001f61e 	bne	r2,zero,3c2c <_dtoa_r+0x1540>
    3454:	dc001117 	ldw	r16,68(sp)
    3458:	dc801017 	ldw	r18,64(sp)
    345c:	18c10cc4 	addi	r3,r3,1075
    3460:	003f6106 	br	31e8 <_dtoa_r+0xafc>
    3464:	d8000b15 	stw	zero,44(sp)
    3468:	d9802617 	ldw	r6,152(sp)
    346c:	d8c00d17 	ldw	r3,52(sp)
    3470:	30800044 	addi	r2,r6,1
    3474:	18ad883a 	add	r22,r3,r2
    3478:	b13fffc4 	addi	r4,r22,-1
    347c:	d9000e15 	stw	r4,56(sp)
    3480:	0581f60e 	bge	zero,r22,3c5c <_dtoa_r+0x1570>
    3484:	dd800f15 	stw	r22,60(sp)
    3488:	003f3006 	br	314c <_dtoa_r+0xa60>
    348c:	d8000b15 	stw	zero,44(sp)
    3490:	d9002617 	ldw	r4,152(sp)
    3494:	0101eb0e 	bge	zero,r4,3c44 <_dtoa_r+0x1558>
    3498:	202d883a 	mov	r22,r4
    349c:	d9000e15 	stw	r4,56(sp)
    34a0:	d9000f15 	stw	r4,60(sp)
    34a4:	003f2906 	br	314c <_dtoa_r+0xa60>
    34a8:	01800044 	movi	r6,1
    34ac:	d9800b15 	stw	r6,44(sp)
    34b0:	003ff706 	br	3490 <_dtoa_r+0xda4>
    34b4:	01000044 	movi	r4,1
    34b8:	d9000b15 	stw	r4,44(sp)
    34bc:	003fea06 	br	3468 <_dtoa_r+0xd7c>
    34c0:	04000c0e 	bge	zero,r16,34f4 <_dtoa_r+0xe08>
    34c4:	d9400717 	ldw	r5,28(sp)
    34c8:	d9001617 	ldw	r4,88(sp)
    34cc:	01800044 	movi	r6,1
    34d0:	00061f80 	call	61f8 <__lshift>
    34d4:	1009883a 	mov	r4,r2
    34d8:	900b883a 	mov	r5,r18
    34dc:	d8800715 	stw	r2,28(sp)
    34e0:	0005a100 	call	5a10 <__mcmp>
    34e4:	0081e00e 	bge	zero,r2,3c68 <_dtoa_r+0x157c>
    34e8:	bdc00044 	addi	r23,r23,1
    34ec:	00800e84 	movi	r2,58
    34f0:	b881a226 	beq	r23,r2,3b7c <_dtoa_r+0x1490>
    34f4:	b7000044 	addi	fp,r22,1
    34f8:	b5c00005 	stb	r23,0(r22)
    34fc:	003f7406 	br	32d0 <_dtoa_r+0xbe4>
    3500:	00800e44 	movi	r2,57
    3504:	b8819d26 	beq	r23,r2,3b7c <_dtoa_r+0x1490>
    3508:	053ffa0e 	bge	zero,r20,34f4 <_dtoa_r+0xe08>
    350c:	8dc00c44 	addi	r23,r17,49
    3510:	003ff806 	br	34f4 <_dtoa_r+0xe08>
    3514:	d9001617 	ldw	r4,88(sp)
    3518:	a80b883a 	mov	r5,r21
    351c:	04000044 	movi	r16,1
    3520:	00058b40 	call	58b4 <_Bfree>
    3524:	003edf06 	br	30a4 <_dtoa_r+0x9b8>
    3528:	d9001617 	ldw	r4,88(sp)
    352c:	980b883a 	mov	r5,r19
    3530:	01800284 	movi	r6,10
    3534:	000f883a 	mov	r7,zero
    3538:	00065d40 	call	65d4 <__multadd>
    353c:	1027883a 	mov	r19,r2
    3540:	d8800615 	stw	r2,24(sp)
    3544:	003ebb06 	br	3034 <_dtoa_r+0x948>
    3548:	d9801117 	ldw	r6,68(sp)
    354c:	d8800d17 	ldw	r2,52(sp)
    3550:	d8000915 	stw	zero,36(sp)
    3554:	308dc83a 	sub	r6,r6,r2
    3558:	0087c83a 	sub	r3,zero,r2
    355c:	d9801115 	stw	r6,68(sp)
    3560:	d8c01015 	stw	r3,64(sp)
    3564:	003cfe06 	br	2960 <_dtoa_r+0x274>
    3568:	018dc83a 	sub	r6,zero,r6
    356c:	d9801115 	stw	r6,68(sp)
    3570:	d8000a15 	stw	zero,40(sp)
    3574:	003cf306 	br	2944 <_dtoa_r+0x258>
    3578:	d9000d17 	ldw	r4,52(sp)
    357c:	00091cc0 	call	91cc <__floatsidf>
    3580:	880b883a 	mov	r5,r17
    3584:	8009883a 	mov	r4,r16
    3588:	180f883a 	mov	r7,r3
    358c:	100d883a 	mov	r6,r2
    3590:	0008fac0 	call	8fac <__nedf2>
    3594:	103ce126 	beq	r2,zero,291c <_dtoa_r+0x230>
    3598:	d9800d17 	ldw	r6,52(sp)
    359c:	31bfffc4 	addi	r6,r6,-1
    35a0:	d9800d15 	stw	r6,52(sp)
    35a4:	003cdd06 	br	291c <_dtoa_r+0x230>
    35a8:	d9000717 	ldw	r4,28(sp)
    35ac:	900b883a 	mov	r5,r18
    35b0:	0005a100 	call	5a10 <__mcmp>
    35b4:	103e8d0e 	bge	r2,zero,2fec <_dtoa_r+0x900>
    35b8:	d9400717 	ldw	r5,28(sp)
    35bc:	d9001617 	ldw	r4,88(sp)
    35c0:	01800284 	movi	r6,10
    35c4:	000f883a 	mov	r7,zero
    35c8:	00065d40 	call	65d4 <__multadd>
    35cc:	d9800d17 	ldw	r6,52(sp)
    35d0:	d8800715 	stw	r2,28(sp)
    35d4:	31bfffc4 	addi	r6,r6,-1
    35d8:	d9800d15 	stw	r6,52(sp)
    35dc:	b001a71e 	bne	r22,zero,3c7c <_dtoa_r+0x1590>
    35e0:	d8800e17 	ldw	r2,56(sp)
    35e4:	d8800f15 	stw	r2,60(sp)
    35e8:	003e8006 	br	2fec <_dtoa_r+0x900>
    35ec:	90800417 	ldw	r2,16(r18)
    35f0:	1085883a 	add	r2,r2,r2
    35f4:	1085883a 	add	r2,r2,r2
    35f8:	1485883a 	add	r2,r2,r18
    35fc:	11000417 	ldw	r4,16(r2)
    3600:	00058dc0 	call	58dc <__hi0bits>
    3604:	00c00804 	movi	r3,32
    3608:	1887c83a 	sub	r3,r3,r2
    360c:	003e5a06 	br	2f78 <_dtoa_r+0x88c>
    3610:	d9400717 	ldw	r5,28(sp)
    3614:	d9801017 	ldw	r6,64(sp)
    3618:	d9001617 	ldw	r4,88(sp)
    361c:	00067000 	call	6700 <__pow5mult>
    3620:	d8800715 	stw	r2,28(sp)
    3624:	003e4306 	br	2f34 <_dtoa_r+0x848>
    3628:	d9800f17 	ldw	r6,60(sp)
    362c:	d8800d17 	ldw	r2,52(sp)
    3630:	d9800315 	stw	r6,12(sp)
    3634:	d8800415 	stw	r2,16(sp)
    3638:	d8c00b17 	ldw	r3,44(sp)
    363c:	1805003a 	cmpeq	r2,r3,zero
    3640:	1000e21e 	bne	r2,zero,39cc <_dtoa_r+0x12e0>
    3644:	d9000317 	ldw	r4,12(sp)
    3648:	0005883a 	mov	r2,zero
    364c:	00cff834 	movhi	r3,16352
    3650:	200c90fa 	slli	r6,r4,3
    3654:	01000074 	movhi	r4,1
    3658:	2134ff04 	addi	r4,r4,-11268
    365c:	180b883a 	mov	r5,r3
    3660:	310d883a 	add	r6,r6,r4
    3664:	327fff17 	ldw	r9,-4(r6)
    3668:	323ffe17 	ldw	r8,-8(r6)
    366c:	1009883a 	mov	r4,r2
    3670:	480f883a 	mov	r7,r9
    3674:	400d883a 	mov	r6,r8
    3678:	0008ccc0 	call	8ccc <__divdf3>
    367c:	180b883a 	mov	r5,r3
    3680:	b00d883a 	mov	r6,r22
    3684:	b80f883a 	mov	r7,r23
    3688:	1009883a 	mov	r4,r2
    368c:	00088140 	call	8814 <__subdf3>
    3690:	a80b883a 	mov	r5,r21
    3694:	a009883a 	mov	r4,r20
    3698:	d8c01915 	stw	r3,100(sp)
    369c:	d8801815 	stw	r2,96(sp)
    36a0:	00092c40 	call	92c4 <__fixdfsi>
    36a4:	1009883a 	mov	r4,r2
    36a8:	1027883a 	mov	r19,r2
    36ac:	00091cc0 	call	91cc <__floatsidf>
    36b0:	a80b883a 	mov	r5,r21
    36b4:	a009883a 	mov	r4,r20
    36b8:	180f883a 	mov	r7,r3
    36bc:	100d883a 	mov	r6,r2
    36c0:	00088140 	call	8814 <__subdf3>
    36c4:	d9801817 	ldw	r6,96(sp)
    36c8:	1823883a 	mov	r17,r3
    36cc:	d8801415 	stw	r2,80(sp)
    36d0:	302d883a 	mov	r22,r6
    36d4:	d9800517 	ldw	r6,20(sp)
    36d8:	9cc00c04 	addi	r19,r19,48
    36dc:	dc401515 	stw	r17,84(sp)
    36e0:	d8c01917 	ldw	r3,100(sp)
    36e4:	34c00005 	stb	r19,0(r6)
    36e8:	d8800517 	ldw	r2,20(sp)
    36ec:	d9401917 	ldw	r5,100(sp)
    36f0:	d9801417 	ldw	r6,80(sp)
    36f4:	b009883a 	mov	r4,r22
    36f8:	880f883a 	mov	r7,r17
    36fc:	182f883a 	mov	r23,r3
    3700:	17000044 	addi	fp,r2,1
    3704:	00090340 	call	9034 <__gtdf2>
    3708:	00804e16 	blt	zero,r2,3844 <_dtoa_r+0x1158>
    370c:	d9801417 	ldw	r6,80(sp)
    3710:	0005883a 	mov	r2,zero
    3714:	00cffc34 	movhi	r3,16368
    3718:	180b883a 	mov	r5,r3
    371c:	880f883a 	mov	r7,r17
    3720:	1009883a 	mov	r4,r2
    3724:	00088140 	call	8814 <__subdf3>
    3728:	d9401917 	ldw	r5,100(sp)
    372c:	180f883a 	mov	r7,r3
    3730:	b009883a 	mov	r4,r22
    3734:	100d883a 	mov	r6,r2
    3738:	00090340 	call	9034 <__gtdf2>
    373c:	00bda216 	blt	zero,r2,2dc8 <_dtoa_r+0x6dc>
    3740:	d8c00317 	ldw	r3,12(sp)
    3744:	00800044 	movi	r2,1
    3748:	10c01216 	blt	r2,r3,3794 <_dtoa_r+0x10a8>
    374c:	003d4506 	br	2c64 <_dtoa_r+0x578>
    3750:	d9801417 	ldw	r6,80(sp)
    3754:	0005883a 	mov	r2,zero
    3758:	00cffc34 	movhi	r3,16368
    375c:	180b883a 	mov	r5,r3
    3760:	880f883a 	mov	r7,r17
    3764:	1009883a 	mov	r4,r2
    3768:	00088140 	call	8814 <__subdf3>
    376c:	d9c01b17 	ldw	r7,108(sp)
    3770:	180b883a 	mov	r5,r3
    3774:	1009883a 	mov	r4,r2
    3778:	b00d883a 	mov	r6,r22
    377c:	00091440 	call	9144 <__ltdf2>
    3780:	103d9116 	blt	r2,zero,2dc8 <_dtoa_r+0x6dc>
    3784:	d9800517 	ldw	r6,20(sp)
    3788:	d9000317 	ldw	r4,12(sp)
    378c:	3105883a 	add	r2,r6,r4
    3790:	e0bd3426 	beq	fp,r2,2c64 <_dtoa_r+0x578>
    3794:	04500934 	movhi	r17,16420
    3798:	0021883a 	mov	r16,zero
    379c:	b80b883a 	mov	r5,r23
    37a0:	b009883a 	mov	r4,r22
    37a4:	800d883a 	mov	r6,r16
    37a8:	880f883a 	mov	r7,r17
    37ac:	00089080 	call	8908 <__muldf3>
    37b0:	d9401517 	ldw	r5,84(sp)
    37b4:	d9001417 	ldw	r4,80(sp)
    37b8:	880f883a 	mov	r7,r17
    37bc:	000d883a 	mov	r6,zero
    37c0:	d8801a15 	stw	r2,104(sp)
    37c4:	d8c01b15 	stw	r3,108(sp)
    37c8:	00089080 	call	8908 <__muldf3>
    37cc:	180b883a 	mov	r5,r3
    37d0:	1009883a 	mov	r4,r2
    37d4:	1823883a 	mov	r17,r3
    37d8:	1021883a 	mov	r16,r2
    37dc:	00092c40 	call	92c4 <__fixdfsi>
    37e0:	1009883a 	mov	r4,r2
    37e4:	102b883a 	mov	r21,r2
    37e8:	00091cc0 	call	91cc <__floatsidf>
    37ec:	880b883a 	mov	r5,r17
    37f0:	8009883a 	mov	r4,r16
    37f4:	180f883a 	mov	r7,r3
    37f8:	100d883a 	mov	r6,r2
    37fc:	00088140 	call	8814 <__subdf3>
    3800:	1021883a 	mov	r16,r2
    3804:	d9001b17 	ldw	r4,108(sp)
    3808:	1823883a 	mov	r17,r3
    380c:	dc001415 	stw	r16,80(sp)
    3810:	ad400c04 	addi	r21,r21,48
    3814:	dc401515 	stw	r17,84(sp)
    3818:	d8801a17 	ldw	r2,104(sp)
    381c:	e5400005 	stb	r21,0(fp)
    3820:	202f883a 	mov	r23,r4
    3824:	d9c01b17 	ldw	r7,108(sp)
    3828:	d9001417 	ldw	r4,80(sp)
    382c:	880b883a 	mov	r5,r17
    3830:	100d883a 	mov	r6,r2
    3834:	102d883a 	mov	r22,r2
    3838:	e7000044 	addi	fp,fp,1
    383c:	00091440 	call	9144 <__ltdf2>
    3840:	103fc30e 	bge	r2,zero,3750 <_dtoa_r+0x1064>
    3844:	d9000417 	ldw	r4,16(sp)
    3848:	d9000d15 	stw	r4,52(sp)
    384c:	003d7106 	br	2e14 <_dtoa_r+0x728>
    3850:	d9801717 	ldw	r6,92(sp)
    3854:	00800084 	movi	r2,2
    3858:	11bde60e 	bge	r2,r6,2ff4 <_dtoa_r+0x908>
    385c:	203cfb1e 	bne	r4,zero,2c4c <_dtoa_r+0x560>
    3860:	d9001617 	ldw	r4,88(sp)
    3864:	900b883a 	mov	r5,r18
    3868:	01800144 	movi	r6,5
    386c:	000f883a 	mov	r7,zero
    3870:	00065d40 	call	65d4 <__multadd>
    3874:	d9000717 	ldw	r4,28(sp)
    3878:	100b883a 	mov	r5,r2
    387c:	1025883a 	mov	r18,r2
    3880:	0005a100 	call	5a10 <__mcmp>
    3884:	00bcf10e 	bge	zero,r2,2c4c <_dtoa_r+0x560>
    3888:	d8c00d17 	ldw	r3,52(sp)
    388c:	d9000517 	ldw	r4,20(sp)
    3890:	d8000615 	stw	zero,24(sp)
    3894:	18c00044 	addi	r3,r3,1
    3898:	d8c00d15 	stw	r3,52(sp)
    389c:	00800c44 	movi	r2,49
    38a0:	27000044 	addi	fp,r4,1
    38a4:	20800005 	stb	r2,0(r4)
    38a8:	003e8906 	br	32d0 <_dtoa_r+0xbe4>
    38ac:	d8c00517 	ldw	r3,20(sp)
    38b0:	003bc206 	br	27bc <_dtoa_r+0xd0>
    38b4:	01800074 	movhi	r6,1
    38b8:	31b53104 	addi	r6,r6,-11068
    38bc:	30c00917 	ldw	r3,36(r6)
    38c0:	30800817 	ldw	r2,32(r6)
    38c4:	d9001217 	ldw	r4,72(sp)
    38c8:	d9401317 	ldw	r5,76(sp)
    38cc:	180f883a 	mov	r7,r3
    38d0:	100d883a 	mov	r6,r2
    38d4:	0008ccc0 	call	8ccc <__divdf3>
    38d8:	948003cc 	andi	r18,r18,15
    38dc:	058000c4 	movi	r22,3
    38e0:	1029883a 	mov	r20,r2
    38e4:	182b883a 	mov	r21,r3
    38e8:	003c8906 	br	2b10 <_dtoa_r+0x424>
    38ec:	d9001017 	ldw	r4,64(sp)
    38f0:	d9800917 	ldw	r6,36(sp)
    38f4:	0025883a 	mov	r18,zero
    38f8:	1105c83a 	sub	r2,r2,r4
    38fc:	2089883a 	add	r4,r4,r2
    3900:	308d883a 	add	r6,r6,r2
    3904:	d9001015 	stw	r4,64(sp)
    3908:	d9800915 	stw	r6,36(sp)
    390c:	003e3206 	br	31d8 <_dtoa_r+0xaec>
    3910:	28800044 	addi	r2,r5,1
    3914:	27000044 	addi	fp,r4,1
    3918:	20800005 	stb	r2,0(r4)
    391c:	003e6c06 	br	32d0 <_dtoa_r+0xbe4>
    3920:	d8800f17 	ldw	r2,60(sp)
    3924:	00bce016 	blt	zero,r2,2ca8 <_dtoa_r+0x5bc>
    3928:	d9800f17 	ldw	r6,60(sp)
    392c:	303cc51e 	bne	r6,zero,2c44 <_dtoa_r+0x558>
    3930:	0005883a 	mov	r2,zero
    3934:	00d00534 	movhi	r3,16404
    3938:	980b883a 	mov	r5,r19
    393c:	180f883a 	mov	r7,r3
    3940:	9009883a 	mov	r4,r18
    3944:	100d883a 	mov	r6,r2
    3948:	00089080 	call	8908 <__muldf3>
    394c:	180b883a 	mov	r5,r3
    3950:	a80f883a 	mov	r7,r21
    3954:	1009883a 	mov	r4,r2
    3958:	a00d883a 	mov	r6,r20
    395c:	00090bc0 	call	90bc <__gedf2>
    3960:	103cb80e 	bge	r2,zero,2c44 <_dtoa_r+0x558>
    3964:	0027883a 	mov	r19,zero
    3968:	0025883a 	mov	r18,zero
    396c:	003fc606 	br	3888 <_dtoa_r+0x119c>
    3970:	99400117 	ldw	r5,4(r19)
    3974:	d9001617 	ldw	r4,88(sp)
    3978:	0005e340 	call	5e34 <_Balloc>
    397c:	99800417 	ldw	r6,16(r19)
    3980:	11000304 	addi	r4,r2,12
    3984:	99400304 	addi	r5,r19,12
    3988:	318d883a 	add	r6,r6,r6
    398c:	318d883a 	add	r6,r6,r6
    3990:	31800204 	addi	r6,r6,8
    3994:	1023883a 	mov	r17,r2
    3998:	000569c0 	call	569c <memcpy>
    399c:	d9001617 	ldw	r4,88(sp)
    39a0:	880b883a 	mov	r5,r17
    39a4:	01800044 	movi	r6,1
    39a8:	00061f80 	call	61f8 <__lshift>
    39ac:	100b883a 	mov	r5,r2
    39b0:	003d9c06 	br	3024 <_dtoa_r+0x938>
    39b4:	00800e44 	movi	r2,57
    39b8:	b8807026 	beq	r23,r2,3b7c <_dtoa_r+0x1490>
    39bc:	b8800044 	addi	r2,r23,1
    39c0:	b7000044 	addi	fp,r22,1
    39c4:	b0800005 	stb	r2,0(r22)
    39c8:	003e4106 	br	32d0 <_dtoa_r+0xbe4>
    39cc:	d8800317 	ldw	r2,12(sp)
    39d0:	01800074 	movhi	r6,1
    39d4:	31b4ff04 	addi	r6,r6,-11268
    39d8:	b009883a 	mov	r4,r22
    39dc:	100e90fa 	slli	r7,r2,3
    39e0:	b80b883a 	mov	r5,r23
    39e4:	398f883a 	add	r7,r7,r6
    39e8:	38bffe17 	ldw	r2,-8(r7)
    39ec:	d9800517 	ldw	r6,20(sp)
    39f0:	38ffff17 	ldw	r3,-4(r7)
    39f4:	37000044 	addi	fp,r6,1
    39f8:	180f883a 	mov	r7,r3
    39fc:	100d883a 	mov	r6,r2
    3a00:	00089080 	call	8908 <__muldf3>
    3a04:	a80b883a 	mov	r5,r21
    3a08:	a009883a 	mov	r4,r20
    3a0c:	182f883a 	mov	r23,r3
    3a10:	102d883a 	mov	r22,r2
    3a14:	00092c40 	call	92c4 <__fixdfsi>
    3a18:	1009883a 	mov	r4,r2
    3a1c:	1027883a 	mov	r19,r2
    3a20:	00091cc0 	call	91cc <__floatsidf>
    3a24:	a80b883a 	mov	r5,r21
    3a28:	a009883a 	mov	r4,r20
    3a2c:	180f883a 	mov	r7,r3
    3a30:	100d883a 	mov	r6,r2
    3a34:	00088140 	call	8814 <__subdf3>
    3a38:	180b883a 	mov	r5,r3
    3a3c:	d8c00517 	ldw	r3,20(sp)
    3a40:	9cc00c04 	addi	r19,r19,48
    3a44:	1009883a 	mov	r4,r2
    3a48:	1cc00005 	stb	r19,0(r3)
    3a4c:	2021883a 	mov	r16,r4
    3a50:	d9000317 	ldw	r4,12(sp)
    3a54:	00800044 	movi	r2,1
    3a58:	2823883a 	mov	r17,r5
    3a5c:	20802226 	beq	r4,r2,3ae8 <_dtoa_r+0x13fc>
    3a60:	1029883a 	mov	r20,r2
    3a64:	0005883a 	mov	r2,zero
    3a68:	00d00934 	movhi	r3,16420
    3a6c:	180f883a 	mov	r7,r3
    3a70:	100d883a 	mov	r6,r2
    3a74:	880b883a 	mov	r5,r17
    3a78:	8009883a 	mov	r4,r16
    3a7c:	00089080 	call	8908 <__muldf3>
    3a80:	180b883a 	mov	r5,r3
    3a84:	1009883a 	mov	r4,r2
    3a88:	1823883a 	mov	r17,r3
    3a8c:	1021883a 	mov	r16,r2
    3a90:	00092c40 	call	92c4 <__fixdfsi>
    3a94:	1009883a 	mov	r4,r2
    3a98:	102b883a 	mov	r21,r2
    3a9c:	00091cc0 	call	91cc <__floatsidf>
    3aa0:	880b883a 	mov	r5,r17
    3aa4:	8009883a 	mov	r4,r16
    3aa8:	180f883a 	mov	r7,r3
    3aac:	100d883a 	mov	r6,r2
    3ab0:	00088140 	call	8814 <__subdf3>
    3ab4:	180b883a 	mov	r5,r3
    3ab8:	d8c00517 	ldw	r3,20(sp)
    3abc:	1009883a 	mov	r4,r2
    3ac0:	ad400c04 	addi	r21,r21,48
    3ac4:	1d05883a 	add	r2,r3,r20
    3ac8:	15400005 	stb	r21,0(r2)
    3acc:	2021883a 	mov	r16,r4
    3ad0:	d9000317 	ldw	r4,12(sp)
    3ad4:	a5000044 	addi	r20,r20,1
    3ad8:	2823883a 	mov	r17,r5
    3adc:	a13fe11e 	bne	r20,r4,3a64 <_dtoa_r+0x1378>
    3ae0:	e505883a 	add	r2,fp,r20
    3ae4:	173fffc4 	addi	fp,r2,-1
    3ae8:	0025883a 	mov	r18,zero
    3aec:	04cff834 	movhi	r19,16352
    3af0:	b009883a 	mov	r4,r22
    3af4:	b80b883a 	mov	r5,r23
    3af8:	900d883a 	mov	r6,r18
    3afc:	980f883a 	mov	r7,r19
    3b00:	00088940 	call	8894 <__adddf3>
    3b04:	180b883a 	mov	r5,r3
    3b08:	1009883a 	mov	r4,r2
    3b0c:	800d883a 	mov	r6,r16
    3b10:	880f883a 	mov	r7,r17
    3b14:	00091440 	call	9144 <__ltdf2>
    3b18:	103cab16 	blt	r2,zero,2dc8 <_dtoa_r+0x6dc>
    3b1c:	0009883a 	mov	r4,zero
    3b20:	980b883a 	mov	r5,r19
    3b24:	b80f883a 	mov	r7,r23
    3b28:	b00d883a 	mov	r6,r22
    3b2c:	00088140 	call	8814 <__subdf3>
    3b30:	180b883a 	mov	r5,r3
    3b34:	880f883a 	mov	r7,r17
    3b38:	1009883a 	mov	r4,r2
    3b3c:	800d883a 	mov	r6,r16
    3b40:	00090340 	call	9034 <__gtdf2>
    3b44:	00bc470e 	bge	zero,r2,2c64 <_dtoa_r+0x578>
    3b48:	00c00c04 	movi	r3,48
    3b4c:	e73fffc4 	addi	fp,fp,-1
    3b50:	e0800007 	ldb	r2,0(fp)
    3b54:	10fffd26 	beq	r2,r3,3b4c <_dtoa_r+0x1460>
    3b58:	d9800417 	ldw	r6,16(sp)
    3b5c:	e7000044 	addi	fp,fp,1
    3b60:	d9800d15 	stw	r6,52(sp)
    3b64:	003cab06 	br	2e14 <_dtoa_r+0x728>
    3b68:	d8c00f17 	ldw	r3,60(sp)
    3b6c:	d9001117 	ldw	r4,68(sp)
    3b70:	20e1c83a 	sub	r16,r4,r3
    3b74:	0007883a 	mov	r3,zero
    3b78:	003d9b06 	br	31e8 <_dtoa_r+0xafc>
    3b7c:	00800e44 	movi	r2,57
    3b80:	b0800005 	stb	r2,0(r22)
    3b84:	b5800044 	addi	r22,r22,1
    3b88:	003dc106 	br	3290 <_dtoa_r+0xba4>
    3b8c:	05800084 	movi	r22,2
    3b90:	003bf706 	br	2b70 <_dtoa_r+0x484>
    3b94:	d9000f17 	ldw	r4,60(sp)
    3b98:	013c000e 	bge	zero,r4,2b9c <_dtoa_r+0x4b0>
    3b9c:	d9800e17 	ldw	r6,56(sp)
    3ba0:	01bc300e 	bge	zero,r6,2c64 <_dtoa_r+0x578>
    3ba4:	0005883a 	mov	r2,zero
    3ba8:	00d00934 	movhi	r3,16420
    3bac:	a80b883a 	mov	r5,r21
    3bb0:	180f883a 	mov	r7,r3
    3bb4:	a009883a 	mov	r4,r20
    3bb8:	100d883a 	mov	r6,r2
    3bbc:	00089080 	call	8908 <__muldf3>
    3bc0:	b1000044 	addi	r4,r22,1
    3bc4:	1021883a 	mov	r16,r2
    3bc8:	1823883a 	mov	r17,r3
    3bcc:	00091cc0 	call	91cc <__floatsidf>
    3bd0:	880b883a 	mov	r5,r17
    3bd4:	8009883a 	mov	r4,r16
    3bd8:	180f883a 	mov	r7,r3
    3bdc:	100d883a 	mov	r6,r2
    3be0:	00089080 	call	8908 <__muldf3>
    3be4:	0011883a 	mov	r8,zero
    3be8:	02500734 	movhi	r9,16412
    3bec:	180b883a 	mov	r5,r3
    3bf0:	480f883a 	mov	r7,r9
    3bf4:	1009883a 	mov	r4,r2
    3bf8:	400d883a 	mov	r6,r8
    3bfc:	00088940 	call	8894 <__adddf3>
    3c00:	102d883a 	mov	r22,r2
    3c04:	00bf3034 	movhi	r2,64704
    3c08:	10ef883a 	add	r23,r2,r3
    3c0c:	d8800d17 	ldw	r2,52(sp)
    3c10:	d8c00e17 	ldw	r3,56(sp)
    3c14:	8029883a 	mov	r20,r16
    3c18:	10bfffc4 	addi	r2,r2,-1
    3c1c:	882b883a 	mov	r21,r17
    3c20:	d8800415 	stw	r2,16(sp)
    3c24:	d8c00315 	stw	r3,12(sp)
    3c28:	003e8306 	br	3638 <_dtoa_r+0xf4c>
    3c2c:	d8800117 	ldw	r2,4(sp)
    3c30:	dc001117 	ldw	r16,68(sp)
    3c34:	dc801017 	ldw	r18,64(sp)
    3c38:	00c00d84 	movi	r3,54
    3c3c:	1887c83a 	sub	r3,r3,r2
    3c40:	003d6906 	br	31e8 <_dtoa_r+0xafc>
    3c44:	01800044 	movi	r6,1
    3c48:	3021883a 	mov	r16,r6
    3c4c:	d9800f15 	stw	r6,60(sp)
    3c50:	d9802615 	stw	r6,152(sp)
    3c54:	d9800e15 	stw	r6,56(sp)
    3c58:	003b9306 	br	2aa8 <_dtoa_r+0x3bc>
    3c5c:	b021883a 	mov	r16,r22
    3c60:	dd800f15 	stw	r22,60(sp)
    3c64:	003b9006 	br	2aa8 <_dtoa_r+0x3bc>
    3c68:	103e221e 	bne	r2,zero,34f4 <_dtoa_r+0xe08>
    3c6c:	b880004c 	andi	r2,r23,1
    3c70:	1005003a 	cmpeq	r2,r2,zero
    3c74:	103e1f1e 	bne	r2,zero,34f4 <_dtoa_r+0xe08>
    3c78:	003e1b06 	br	34e8 <_dtoa_r+0xdfc>
    3c7c:	d9001617 	ldw	r4,88(sp)
    3c80:	980b883a 	mov	r5,r19
    3c84:	01800284 	movi	r6,10
    3c88:	000f883a 	mov	r7,zero
    3c8c:	00065d40 	call	65d4 <__multadd>
    3c90:	d8c00e17 	ldw	r3,56(sp)
    3c94:	1027883a 	mov	r19,r2
    3c98:	d8c00f15 	stw	r3,60(sp)
    3c9c:	003cd306 	br	2fec <_dtoa_r+0x900>

00003ca0 <_fflush_r>:
    3ca0:	defffb04 	addi	sp,sp,-20
    3ca4:	dcc00315 	stw	r19,12(sp)
    3ca8:	dc800215 	stw	r18,8(sp)
    3cac:	dfc00415 	stw	ra,16(sp)
    3cb0:	dc400115 	stw	r17,4(sp)
    3cb4:	dc000015 	stw	r16,0(sp)
    3cb8:	2027883a 	mov	r19,r4
    3cbc:	2825883a 	mov	r18,r5
    3cc0:	20000226 	beq	r4,zero,3ccc <_fflush_r+0x2c>
    3cc4:	20800e17 	ldw	r2,56(r4)
    3cc8:	10005626 	beq	r2,zero,3e24 <_fflush_r+0x184>
    3ccc:	9100030b 	ldhu	r4,12(r18)
    3cd0:	20ffffcc 	andi	r3,r4,65535
    3cd4:	18e0001c 	xori	r3,r3,32768
    3cd8:	18e00004 	addi	r3,r3,-32768
    3cdc:	1880020c 	andi	r2,r3,8
    3ce0:	1000261e 	bne	r2,zero,3d7c <_fflush_r+0xdc>
    3ce4:	90c00117 	ldw	r3,4(r18)
    3ce8:	20820014 	ori	r2,r4,2048
    3cec:	9080030d 	sth	r2,12(r18)
    3cf0:	1009883a 	mov	r4,r2
    3cf4:	00c0400e 	bge	zero,r3,3df8 <_fflush_r+0x158>
    3cf8:	92000a17 	ldw	r8,40(r18)
    3cfc:	40004026 	beq	r8,zero,3e00 <_fflush_r+0x160>
    3d00:	2084000c 	andi	r2,r4,4096
    3d04:	10005326 	beq	r2,zero,3e54 <_fflush_r+0x1b4>
    3d08:	94001417 	ldw	r16,80(r18)
    3d0c:	9080030b 	ldhu	r2,12(r18)
    3d10:	1080010c 	andi	r2,r2,4
    3d14:	1000481e 	bne	r2,zero,3e38 <_fflush_r+0x198>
    3d18:	91400717 	ldw	r5,28(r18)
    3d1c:	9809883a 	mov	r4,r19
    3d20:	800d883a 	mov	r6,r16
    3d24:	000f883a 	mov	r7,zero
    3d28:	403ee83a 	callr	r8
    3d2c:	8080261e 	bne	r16,r2,3dc8 <_fflush_r+0x128>
    3d30:	9080030b 	ldhu	r2,12(r18)
    3d34:	91000417 	ldw	r4,16(r18)
    3d38:	90000115 	stw	zero,4(r18)
    3d3c:	10bdffcc 	andi	r2,r2,63487
    3d40:	10ffffcc 	andi	r3,r2,65535
    3d44:	18c4000c 	andi	r3,r3,4096
    3d48:	9080030d 	sth	r2,12(r18)
    3d4c:	91000015 	stw	r4,0(r18)
    3d50:	18002b26 	beq	r3,zero,3e00 <_fflush_r+0x160>
    3d54:	0007883a 	mov	r3,zero
    3d58:	1805883a 	mov	r2,r3
    3d5c:	94001415 	stw	r16,80(r18)
    3d60:	dfc00417 	ldw	ra,16(sp)
    3d64:	dcc00317 	ldw	r19,12(sp)
    3d68:	dc800217 	ldw	r18,8(sp)
    3d6c:	dc400117 	ldw	r17,4(sp)
    3d70:	dc000017 	ldw	r16,0(sp)
    3d74:	dec00504 	addi	sp,sp,20
    3d78:	f800283a 	ret
    3d7c:	94400417 	ldw	r17,16(r18)
    3d80:	88001f26 	beq	r17,zero,3e00 <_fflush_r+0x160>
    3d84:	90800017 	ldw	r2,0(r18)
    3d88:	18c000cc 	andi	r3,r3,3
    3d8c:	94400015 	stw	r17,0(r18)
    3d90:	1461c83a 	sub	r16,r2,r17
    3d94:	18002526 	beq	r3,zero,3e2c <_fflush_r+0x18c>
    3d98:	0005883a 	mov	r2,zero
    3d9c:	90800215 	stw	r2,8(r18)
    3da0:	0400170e 	bge	zero,r16,3e00 <_fflush_r+0x160>
    3da4:	90c00917 	ldw	r3,36(r18)
    3da8:	91400717 	ldw	r5,28(r18)
    3dac:	880d883a 	mov	r6,r17
    3db0:	800f883a 	mov	r7,r16
    3db4:	9809883a 	mov	r4,r19
    3db8:	183ee83a 	callr	r3
    3dbc:	88a3883a 	add	r17,r17,r2
    3dc0:	80a1c83a 	sub	r16,r16,r2
    3dc4:	00bff616 	blt	zero,r2,3da0 <_fflush_r+0x100>
    3dc8:	9080030b 	ldhu	r2,12(r18)
    3dcc:	00ffffc4 	movi	r3,-1
    3dd0:	10801014 	ori	r2,r2,64
    3dd4:	9080030d 	sth	r2,12(r18)
    3dd8:	1805883a 	mov	r2,r3
    3ddc:	dfc00417 	ldw	ra,16(sp)
    3de0:	dcc00317 	ldw	r19,12(sp)
    3de4:	dc800217 	ldw	r18,8(sp)
    3de8:	dc400117 	ldw	r17,4(sp)
    3dec:	dc000017 	ldw	r16,0(sp)
    3df0:	dec00504 	addi	sp,sp,20
    3df4:	f800283a 	ret
    3df8:	90800f17 	ldw	r2,60(r18)
    3dfc:	00bfbe16 	blt	zero,r2,3cf8 <_fflush_r+0x58>
    3e00:	0007883a 	mov	r3,zero
    3e04:	1805883a 	mov	r2,r3
    3e08:	dfc00417 	ldw	ra,16(sp)
    3e0c:	dcc00317 	ldw	r19,12(sp)
    3e10:	dc800217 	ldw	r18,8(sp)
    3e14:	dc400117 	ldw	r17,4(sp)
    3e18:	dc000017 	ldw	r16,0(sp)
    3e1c:	dec00504 	addi	sp,sp,20
    3e20:	f800283a 	ret
    3e24:	0003f380 	call	3f38 <__sinit>
    3e28:	003fa806 	br	3ccc <_fflush_r+0x2c>
    3e2c:	90800517 	ldw	r2,20(r18)
    3e30:	90800215 	stw	r2,8(r18)
    3e34:	003fda06 	br	3da0 <_fflush_r+0x100>
    3e38:	90800117 	ldw	r2,4(r18)
    3e3c:	90c00c17 	ldw	r3,48(r18)
    3e40:	80a1c83a 	sub	r16,r16,r2
    3e44:	183fb426 	beq	r3,zero,3d18 <_fflush_r+0x78>
    3e48:	90800f17 	ldw	r2,60(r18)
    3e4c:	80a1c83a 	sub	r16,r16,r2
    3e50:	003fb106 	br	3d18 <_fflush_r+0x78>
    3e54:	91400717 	ldw	r5,28(r18)
    3e58:	9809883a 	mov	r4,r19
    3e5c:	000d883a 	mov	r6,zero
    3e60:	01c00044 	movi	r7,1
    3e64:	403ee83a 	callr	r8
    3e68:	1021883a 	mov	r16,r2
    3e6c:	00bfffc4 	movi	r2,-1
    3e70:	80800226 	beq	r16,r2,3e7c <_fflush_r+0x1dc>
    3e74:	92000a17 	ldw	r8,40(r18)
    3e78:	003fa406 	br	3d0c <_fflush_r+0x6c>
    3e7c:	98c00017 	ldw	r3,0(r19)
    3e80:	00800744 	movi	r2,29
    3e84:	18bfde26 	beq	r3,r2,3e00 <_fflush_r+0x160>
    3e88:	9080030b 	ldhu	r2,12(r18)
    3e8c:	8007883a 	mov	r3,r16
    3e90:	10801014 	ori	r2,r2,64
    3e94:	9080030d 	sth	r2,12(r18)
    3e98:	003fcf06 	br	3dd8 <_fflush_r+0x138>

00003e9c <fflush>:
    3e9c:	01400034 	movhi	r5,0
    3ea0:	294f2804 	addi	r5,r5,15520
    3ea4:	2007883a 	mov	r3,r4
    3ea8:	20000526 	beq	r4,zero,3ec0 <fflush+0x24>
    3eac:	00800074 	movhi	r2,1
    3eb0:	10bc5504 	addi	r2,r2,-3756
    3eb4:	11000017 	ldw	r4,0(r2)
    3eb8:	180b883a 	mov	r5,r3
    3ebc:	0003ca01 	jmpi	3ca0 <_fflush_r>
    3ec0:	00800074 	movhi	r2,1
    3ec4:	10bc5604 	addi	r2,r2,-3752
    3ec8:	11000017 	ldw	r4,0(r2)
    3ecc:	0004aa01 	jmpi	4aa0 <_fwalk_reent>

00003ed0 <std>:
    3ed0:	00800034 	movhi	r2,0
    3ed4:	109c0504 	addi	r2,r2,28692
    3ed8:	20800b15 	stw	r2,44(r4)
    3edc:	00800034 	movhi	r2,0
    3ee0:	109c4004 	addi	r2,r2,28928
    3ee4:	20800815 	stw	r2,32(r4)
    3ee8:	00c00034 	movhi	r3,0
    3eec:	18dc2104 	addi	r3,r3,28804
    3ef0:	00800034 	movhi	r2,0
    3ef4:	109c0704 	addi	r2,r2,28700
    3ef8:	2140030d 	sth	r5,12(r4)
    3efc:	2180038d 	sth	r6,14(r4)
    3f00:	20c00915 	stw	r3,36(r4)
    3f04:	20800a15 	stw	r2,40(r4)
    3f08:	20000015 	stw	zero,0(r4)
    3f0c:	20000115 	stw	zero,4(r4)
    3f10:	20000215 	stw	zero,8(r4)
    3f14:	20000415 	stw	zero,16(r4)
    3f18:	20000515 	stw	zero,20(r4)
    3f1c:	20000615 	stw	zero,24(r4)
    3f20:	21000715 	stw	r4,28(r4)
    3f24:	f800283a 	ret

00003f28 <__sfp_lock_acquire>:
    3f28:	f800283a 	ret

00003f2c <__sfp_lock_release>:
    3f2c:	f800283a 	ret

00003f30 <__sinit_lock_acquire>:
    3f30:	f800283a 	ret

00003f34 <__sinit_lock_release>:
    3f34:	f800283a 	ret

00003f38 <__sinit>:
    3f38:	20800e17 	ldw	r2,56(r4)
    3f3c:	defffd04 	addi	sp,sp,-12
    3f40:	dc400115 	stw	r17,4(sp)
    3f44:	dc000015 	stw	r16,0(sp)
    3f48:	dfc00215 	stw	ra,8(sp)
    3f4c:	04400044 	movi	r17,1
    3f50:	01400104 	movi	r5,4
    3f54:	000d883a 	mov	r6,zero
    3f58:	2021883a 	mov	r16,r4
    3f5c:	2200bb04 	addi	r8,r4,748
    3f60:	200f883a 	mov	r7,r4
    3f64:	10000526 	beq	r2,zero,3f7c <__sinit+0x44>
    3f68:	dfc00217 	ldw	ra,8(sp)
    3f6c:	dc400117 	ldw	r17,4(sp)
    3f70:	dc000017 	ldw	r16,0(sp)
    3f74:	dec00304 	addi	sp,sp,12
    3f78:	f800283a 	ret
    3f7c:	21000117 	ldw	r4,4(r4)
    3f80:	00800034 	movhi	r2,0
    3f84:	10900704 	addi	r2,r2,16412
    3f88:	00c000c4 	movi	r3,3
    3f8c:	80800f15 	stw	r2,60(r16)
    3f90:	80c0b915 	stw	r3,740(r16)
    3f94:	8200ba15 	stw	r8,744(r16)
    3f98:	84400e15 	stw	r17,56(r16)
    3f9c:	8000b815 	stw	zero,736(r16)
    3fa0:	0003ed00 	call	3ed0 <std>
    3fa4:	81000217 	ldw	r4,8(r16)
    3fa8:	880d883a 	mov	r6,r17
    3fac:	800f883a 	mov	r7,r16
    3fb0:	01400284 	movi	r5,10
    3fb4:	0003ed00 	call	3ed0 <std>
    3fb8:	81000317 	ldw	r4,12(r16)
    3fbc:	800f883a 	mov	r7,r16
    3fc0:	01400484 	movi	r5,18
    3fc4:	01800084 	movi	r6,2
    3fc8:	dfc00217 	ldw	ra,8(sp)
    3fcc:	dc400117 	ldw	r17,4(sp)
    3fd0:	dc000017 	ldw	r16,0(sp)
    3fd4:	dec00304 	addi	sp,sp,12
    3fd8:	0003ed01 	jmpi	3ed0 <std>

00003fdc <__fp_lock>:
    3fdc:	0005883a 	mov	r2,zero
    3fe0:	f800283a 	ret

00003fe4 <__fp_unlock>:
    3fe4:	0005883a 	mov	r2,zero
    3fe8:	f800283a 	ret

00003fec <__fp_unlock_all>:
    3fec:	00800074 	movhi	r2,1
    3ff0:	10bc5504 	addi	r2,r2,-3756
    3ff4:	11000017 	ldw	r4,0(r2)
    3ff8:	01400034 	movhi	r5,0
    3ffc:	294ff904 	addi	r5,r5,16356
    4000:	0004b681 	jmpi	4b68 <_fwalk>

00004004 <__fp_lock_all>:
    4004:	00800074 	movhi	r2,1
    4008:	10bc5504 	addi	r2,r2,-3756
    400c:	11000017 	ldw	r4,0(r2)
    4010:	01400034 	movhi	r5,0
    4014:	294ff704 	addi	r5,r5,16348
    4018:	0004b681 	jmpi	4b68 <_fwalk>

0000401c <_cleanup_r>:
    401c:	01400034 	movhi	r5,0
    4020:	295d5404 	addi	r5,r5,30032
    4024:	0004b681 	jmpi	4b68 <_fwalk>

00004028 <_cleanup>:
    4028:	00800074 	movhi	r2,1
    402c:	10bc5604 	addi	r2,r2,-3752
    4030:	11000017 	ldw	r4,0(r2)
    4034:	000401c1 	jmpi	401c <_cleanup_r>

00004038 <__sfmoreglue>:
    4038:	defffc04 	addi	sp,sp,-16
    403c:	dc000015 	stw	r16,0(sp)
    4040:	2821883a 	mov	r16,r5
    4044:	dc400115 	stw	r17,4(sp)
    4048:	01401704 	movi	r5,92
    404c:	2023883a 	mov	r17,r4
    4050:	8009883a 	mov	r4,r16
    4054:	dfc00315 	stw	ra,12(sp)
    4058:	dcc00215 	stw	r19,8(sp)
    405c:	000967c0 	call	967c <__mulsi3>
    4060:	11400304 	addi	r5,r2,12
    4064:	8809883a 	mov	r4,r17
    4068:	1027883a 	mov	r19,r2
    406c:	0004e780 	call	4e78 <_malloc_r>
    4070:	10c00304 	addi	r3,r2,12
    4074:	1023883a 	mov	r17,r2
    4078:	1809883a 	mov	r4,r3
    407c:	980d883a 	mov	r6,r19
    4080:	000b883a 	mov	r5,zero
    4084:	10000b26 	beq	r2,zero,40b4 <__sfmoreglue+0x7c>
    4088:	14000115 	stw	r16,4(r2)
    408c:	10c00215 	stw	r3,8(r2)
    4090:	10000015 	stw	zero,0(r2)
    4094:	000581c0 	call	581c <memset>
    4098:	8805883a 	mov	r2,r17
    409c:	dfc00317 	ldw	ra,12(sp)
    40a0:	dcc00217 	ldw	r19,8(sp)
    40a4:	dc400117 	ldw	r17,4(sp)
    40a8:	dc000017 	ldw	r16,0(sp)
    40ac:	dec00404 	addi	sp,sp,16
    40b0:	f800283a 	ret
    40b4:	0023883a 	mov	r17,zero
    40b8:	8805883a 	mov	r2,r17
    40bc:	dfc00317 	ldw	ra,12(sp)
    40c0:	dcc00217 	ldw	r19,8(sp)
    40c4:	dc400117 	ldw	r17,4(sp)
    40c8:	dc000017 	ldw	r16,0(sp)
    40cc:	dec00404 	addi	sp,sp,16
    40d0:	f800283a 	ret

000040d4 <__sfp>:
    40d4:	defffd04 	addi	sp,sp,-12
    40d8:	00800074 	movhi	r2,1
    40dc:	10bc5604 	addi	r2,r2,-3752
    40e0:	dc000015 	stw	r16,0(sp)
    40e4:	14000017 	ldw	r16,0(r2)
    40e8:	dc400115 	stw	r17,4(sp)
    40ec:	dfc00215 	stw	ra,8(sp)
    40f0:	80800e17 	ldw	r2,56(r16)
    40f4:	2023883a 	mov	r17,r4
    40f8:	10002626 	beq	r2,zero,4194 <__sfp+0xc0>
    40fc:	8400b804 	addi	r16,r16,736
    4100:	80800117 	ldw	r2,4(r16)
    4104:	81000217 	ldw	r4,8(r16)
    4108:	10ffffc4 	addi	r3,r2,-1
    410c:	18000916 	blt	r3,zero,4134 <__sfp+0x60>
    4110:	2080030f 	ldh	r2,12(r4)
    4114:	10000b26 	beq	r2,zero,4144 <__sfp+0x70>
    4118:	017fffc4 	movi	r5,-1
    411c:	00000206 	br	4128 <__sfp+0x54>
    4120:	2080030f 	ldh	r2,12(r4)
    4124:	10000726 	beq	r2,zero,4144 <__sfp+0x70>
    4128:	18ffffc4 	addi	r3,r3,-1
    412c:	21001704 	addi	r4,r4,92
    4130:	197ffb1e 	bne	r3,r5,4120 <__sfp+0x4c>
    4134:	80800017 	ldw	r2,0(r16)
    4138:	10001926 	beq	r2,zero,41a0 <__sfp+0xcc>
    413c:	1021883a 	mov	r16,r2
    4140:	003fef06 	br	4100 <__sfp+0x2c>
    4144:	00bfffc4 	movi	r2,-1
    4148:	00c00044 	movi	r3,1
    414c:	2080038d 	sth	r2,14(r4)
    4150:	20c0030d 	sth	r3,12(r4)
    4154:	20000015 	stw	zero,0(r4)
    4158:	20000215 	stw	zero,8(r4)
    415c:	20000115 	stw	zero,4(r4)
    4160:	20000415 	stw	zero,16(r4)
    4164:	20000515 	stw	zero,20(r4)
    4168:	20000615 	stw	zero,24(r4)
    416c:	20000c15 	stw	zero,48(r4)
    4170:	20000d15 	stw	zero,52(r4)
    4174:	20001115 	stw	zero,68(r4)
    4178:	20001215 	stw	zero,72(r4)
    417c:	2005883a 	mov	r2,r4
    4180:	dfc00217 	ldw	ra,8(sp)
    4184:	dc400117 	ldw	r17,4(sp)
    4188:	dc000017 	ldw	r16,0(sp)
    418c:	dec00304 	addi	sp,sp,12
    4190:	f800283a 	ret
    4194:	8009883a 	mov	r4,r16
    4198:	0003f380 	call	3f38 <__sinit>
    419c:	003fd706 	br	40fc <__sfp+0x28>
    41a0:	8809883a 	mov	r4,r17
    41a4:	01400104 	movi	r5,4
    41a8:	00040380 	call	4038 <__sfmoreglue>
    41ac:	80800015 	stw	r2,0(r16)
    41b0:	103fe21e 	bne	r2,zero,413c <__sfp+0x68>
    41b4:	00800304 	movi	r2,12
    41b8:	0009883a 	mov	r4,zero
    41bc:	88800015 	stw	r2,0(r17)
    41c0:	003fee06 	br	417c <__sfp+0xa8>

000041c4 <_malloc_trim_r>:
    41c4:	defffb04 	addi	sp,sp,-20
    41c8:	dcc00315 	stw	r19,12(sp)
    41cc:	04c00074 	movhi	r19,1
    41d0:	9cf6a004 	addi	r19,r19,-9600
    41d4:	dc800215 	stw	r18,8(sp)
    41d8:	dc400115 	stw	r17,4(sp)
    41dc:	dc000015 	stw	r16,0(sp)
    41e0:	2823883a 	mov	r17,r5
    41e4:	2025883a 	mov	r18,r4
    41e8:	dfc00415 	stw	ra,16(sp)
    41ec:	000a4000 	call	a400 <__malloc_lock>
    41f0:	98800217 	ldw	r2,8(r19)
    41f4:	9009883a 	mov	r4,r18
    41f8:	000b883a 	mov	r5,zero
    41fc:	10c00117 	ldw	r3,4(r2)
    4200:	00bfff04 	movi	r2,-4
    4204:	18a0703a 	and	r16,r3,r2
    4208:	8463c83a 	sub	r17,r16,r17
    420c:	8c43fbc4 	addi	r17,r17,4079
    4210:	8822d33a 	srli	r17,r17,12
    4214:	0083ffc4 	movi	r2,4095
    4218:	8c7fffc4 	addi	r17,r17,-1
    421c:	8822933a 	slli	r17,r17,12
    4220:	1440060e 	bge	r2,r17,423c <_malloc_trim_r+0x78>
    4224:	0006fa40 	call	6fa4 <_sbrk_r>
    4228:	98c00217 	ldw	r3,8(r19)
    422c:	9009883a 	mov	r4,r18
    4230:	044bc83a 	sub	r5,zero,r17
    4234:	80c7883a 	add	r3,r16,r3
    4238:	10c00926 	beq	r2,r3,4260 <_malloc_trim_r+0x9c>
    423c:	000a4200 	call	a420 <__malloc_unlock>
    4240:	0005883a 	mov	r2,zero
    4244:	dfc00417 	ldw	ra,16(sp)
    4248:	dcc00317 	ldw	r19,12(sp)
    424c:	dc800217 	ldw	r18,8(sp)
    4250:	dc400117 	ldw	r17,4(sp)
    4254:	dc000017 	ldw	r16,0(sp)
    4258:	dec00504 	addi	sp,sp,20
    425c:	f800283a 	ret
    4260:	9009883a 	mov	r4,r18
    4264:	0006fa40 	call	6fa4 <_sbrk_r>
    4268:	844dc83a 	sub	r6,r16,r17
    426c:	00ffffc4 	movi	r3,-1
    4270:	9009883a 	mov	r4,r18
    4274:	000b883a 	mov	r5,zero
    4278:	01c00074 	movhi	r7,1
    427c:	39c33a04 	addi	r7,r7,3304
    4280:	31800054 	ori	r6,r6,1
    4284:	10c00926 	beq	r2,r3,42ac <_malloc_trim_r+0xe8>
    4288:	38800017 	ldw	r2,0(r7)
    428c:	98c00217 	ldw	r3,8(r19)
    4290:	9009883a 	mov	r4,r18
    4294:	1445c83a 	sub	r2,r2,r17
    4298:	38800015 	stw	r2,0(r7)
    429c:	19800115 	stw	r6,4(r3)
    42a0:	000a4200 	call	a420 <__malloc_unlock>
    42a4:	00800044 	movi	r2,1
    42a8:	003fe606 	br	4244 <_malloc_trim_r+0x80>
    42ac:	0006fa40 	call	6fa4 <_sbrk_r>
    42b0:	99800217 	ldw	r6,8(r19)
    42b4:	100f883a 	mov	r7,r2
    42b8:	9009883a 	mov	r4,r18
    42bc:	1187c83a 	sub	r3,r2,r6
    42c0:	008003c4 	movi	r2,15
    42c4:	19400054 	ori	r5,r3,1
    42c8:	10ffdc0e 	bge	r2,r3,423c <_malloc_trim_r+0x78>
    42cc:	00800074 	movhi	r2,1
    42d0:	10bc5a04 	addi	r2,r2,-3736
    42d4:	10c00017 	ldw	r3,0(r2)
    42d8:	00800074 	movhi	r2,1
    42dc:	10833a04 	addi	r2,r2,3304
    42e0:	31400115 	stw	r5,4(r6)
    42e4:	38c7c83a 	sub	r3,r7,r3
    42e8:	10c00015 	stw	r3,0(r2)
    42ec:	003fd306 	br	423c <_malloc_trim_r+0x78>

000042f0 <_free_r>:
    42f0:	defffd04 	addi	sp,sp,-12
    42f4:	dc400115 	stw	r17,4(sp)
    42f8:	dc000015 	stw	r16,0(sp)
    42fc:	dfc00215 	stw	ra,8(sp)
    4300:	2821883a 	mov	r16,r5
    4304:	2023883a 	mov	r17,r4
    4308:	28005a26 	beq	r5,zero,4474 <_free_r+0x184>
    430c:	000a4000 	call	a400 <__malloc_lock>
    4310:	823ffe04 	addi	r8,r16,-8
    4314:	41400117 	ldw	r5,4(r8)
    4318:	00bfff84 	movi	r2,-2
    431c:	02800074 	movhi	r10,1
    4320:	52b6a004 	addi	r10,r10,-9600
    4324:	288e703a 	and	r7,r5,r2
    4328:	41cd883a 	add	r6,r8,r7
    432c:	30c00117 	ldw	r3,4(r6)
    4330:	51000217 	ldw	r4,8(r10)
    4334:	00bfff04 	movi	r2,-4
    4338:	1892703a 	and	r9,r3,r2
    433c:	5017883a 	mov	r11,r10
    4340:	31006726 	beq	r6,r4,44e0 <_free_r+0x1f0>
    4344:	2880004c 	andi	r2,r5,1
    4348:	1005003a 	cmpeq	r2,r2,zero
    434c:	32400115 	stw	r9,4(r6)
    4350:	10001a1e 	bne	r2,zero,43bc <_free_r+0xcc>
    4354:	000b883a 	mov	r5,zero
    4358:	3247883a 	add	r3,r6,r9
    435c:	18800117 	ldw	r2,4(r3)
    4360:	1080004c 	andi	r2,r2,1
    4364:	1000231e 	bne	r2,zero,43f4 <_free_r+0x104>
    4368:	280ac03a 	cmpne	r5,r5,zero
    436c:	3a4f883a 	add	r7,r7,r9
    4370:	2800451e 	bne	r5,zero,4488 <_free_r+0x198>
    4374:	31000217 	ldw	r4,8(r6)
    4378:	00800074 	movhi	r2,1
    437c:	10b6a204 	addi	r2,r2,-9592
    4380:	20807b26 	beq	r4,r2,4570 <_free_r+0x280>
    4384:	30800317 	ldw	r2,12(r6)
    4388:	3a07883a 	add	r3,r7,r8
    438c:	19c00015 	stw	r7,0(r3)
    4390:	11000215 	stw	r4,8(r2)
    4394:	20800315 	stw	r2,12(r4)
    4398:	38800054 	ori	r2,r7,1
    439c:	40800115 	stw	r2,4(r8)
    43a0:	28001a26 	beq	r5,zero,440c <_free_r+0x11c>
    43a4:	8809883a 	mov	r4,r17
    43a8:	dfc00217 	ldw	ra,8(sp)
    43ac:	dc400117 	ldw	r17,4(sp)
    43b0:	dc000017 	ldw	r16,0(sp)
    43b4:	dec00304 	addi	sp,sp,12
    43b8:	000a4201 	jmpi	a420 <__malloc_unlock>
    43bc:	80bffe17 	ldw	r2,-8(r16)
    43c0:	50c00204 	addi	r3,r10,8
    43c4:	4091c83a 	sub	r8,r8,r2
    43c8:	41000217 	ldw	r4,8(r8)
    43cc:	388f883a 	add	r7,r7,r2
    43d0:	20c06126 	beq	r4,r3,4558 <_free_r+0x268>
    43d4:	40800317 	ldw	r2,12(r8)
    43d8:	3247883a 	add	r3,r6,r9
    43dc:	000b883a 	mov	r5,zero
    43e0:	11000215 	stw	r4,8(r2)
    43e4:	20800315 	stw	r2,12(r4)
    43e8:	18800117 	ldw	r2,4(r3)
    43ec:	1080004c 	andi	r2,r2,1
    43f0:	103fdd26 	beq	r2,zero,4368 <_free_r+0x78>
    43f4:	38800054 	ori	r2,r7,1
    43f8:	3a07883a 	add	r3,r7,r8
    43fc:	280ac03a 	cmpne	r5,r5,zero
    4400:	40800115 	stw	r2,4(r8)
    4404:	19c00015 	stw	r7,0(r3)
    4408:	283fe61e 	bne	r5,zero,43a4 <_free_r+0xb4>
    440c:	00807fc4 	movi	r2,511
    4410:	11c01f2e 	bgeu	r2,r7,4490 <_free_r+0x1a0>
    4414:	3806d27a 	srli	r3,r7,9
    4418:	1800481e 	bne	r3,zero,453c <_free_r+0x24c>
    441c:	3804d0fa 	srli	r2,r7,3
    4420:	100690fa 	slli	r3,r2,3
    4424:	1acd883a 	add	r6,r3,r11
    4428:	31400217 	ldw	r5,8(r6)
    442c:	31405926 	beq	r6,r5,4594 <_free_r+0x2a4>
    4430:	28800117 	ldw	r2,4(r5)
    4434:	00ffff04 	movi	r3,-4
    4438:	10c4703a 	and	r2,r2,r3
    443c:	3880022e 	bgeu	r7,r2,4448 <_free_r+0x158>
    4440:	29400217 	ldw	r5,8(r5)
    4444:	317ffa1e 	bne	r6,r5,4430 <_free_r+0x140>
    4448:	29800317 	ldw	r6,12(r5)
    444c:	41800315 	stw	r6,12(r8)
    4450:	41400215 	stw	r5,8(r8)
    4454:	8809883a 	mov	r4,r17
    4458:	2a000315 	stw	r8,12(r5)
    445c:	32000215 	stw	r8,8(r6)
    4460:	dfc00217 	ldw	ra,8(sp)
    4464:	dc400117 	ldw	r17,4(sp)
    4468:	dc000017 	ldw	r16,0(sp)
    446c:	dec00304 	addi	sp,sp,12
    4470:	000a4201 	jmpi	a420 <__malloc_unlock>
    4474:	dfc00217 	ldw	ra,8(sp)
    4478:	dc400117 	ldw	r17,4(sp)
    447c:	dc000017 	ldw	r16,0(sp)
    4480:	dec00304 	addi	sp,sp,12
    4484:	f800283a 	ret
    4488:	31000217 	ldw	r4,8(r6)
    448c:	003fbd06 	br	4384 <_free_r+0x94>
    4490:	3806d0fa 	srli	r3,r7,3
    4494:	00800044 	movi	r2,1
    4498:	51400117 	ldw	r5,4(r10)
    449c:	180890fa 	slli	r4,r3,3
    44a0:	1807d0ba 	srai	r3,r3,2
    44a4:	22c9883a 	add	r4,r4,r11
    44a8:	21800217 	ldw	r6,8(r4)
    44ac:	10c4983a 	sll	r2,r2,r3
    44b0:	41000315 	stw	r4,12(r8)
    44b4:	41800215 	stw	r6,8(r8)
    44b8:	288ab03a 	or	r5,r5,r2
    44bc:	22000215 	stw	r8,8(r4)
    44c0:	8809883a 	mov	r4,r17
    44c4:	51400115 	stw	r5,4(r10)
    44c8:	32000315 	stw	r8,12(r6)
    44cc:	dfc00217 	ldw	ra,8(sp)
    44d0:	dc400117 	ldw	r17,4(sp)
    44d4:	dc000017 	ldw	r16,0(sp)
    44d8:	dec00304 	addi	sp,sp,12
    44dc:	000a4201 	jmpi	a420 <__malloc_unlock>
    44e0:	2880004c 	andi	r2,r5,1
    44e4:	3a4d883a 	add	r6,r7,r9
    44e8:	1000071e 	bne	r2,zero,4508 <_free_r+0x218>
    44ec:	80bffe17 	ldw	r2,-8(r16)
    44f0:	4091c83a 	sub	r8,r8,r2
    44f4:	41000317 	ldw	r4,12(r8)
    44f8:	40c00217 	ldw	r3,8(r8)
    44fc:	308d883a 	add	r6,r6,r2
    4500:	20c00215 	stw	r3,8(r4)
    4504:	19000315 	stw	r4,12(r3)
    4508:	00800074 	movhi	r2,1
    450c:	10bc5904 	addi	r2,r2,-3740
    4510:	11000017 	ldw	r4,0(r2)
    4514:	30c00054 	ori	r3,r6,1
    4518:	52000215 	stw	r8,8(r10)
    451c:	40c00115 	stw	r3,4(r8)
    4520:	313fa036 	bltu	r6,r4,43a4 <_free_r+0xb4>
    4524:	00800074 	movhi	r2,1
    4528:	10833004 	addi	r2,r2,3264
    452c:	11400017 	ldw	r5,0(r2)
    4530:	8809883a 	mov	r4,r17
    4534:	00041c40 	call	41c4 <_malloc_trim_r>
    4538:	003f9a06 	br	43a4 <_free_r+0xb4>
    453c:	00800104 	movi	r2,4
    4540:	10c0072e 	bgeu	r2,r3,4560 <_free_r+0x270>
    4544:	00800504 	movi	r2,20
    4548:	10c01936 	bltu	r2,r3,45b0 <_free_r+0x2c0>
    454c:	188016c4 	addi	r2,r3,91
    4550:	100690fa 	slli	r3,r2,3
    4554:	003fb306 	br	4424 <_free_r+0x134>
    4558:	01400044 	movi	r5,1
    455c:	003f7e06 	br	4358 <_free_r+0x68>
    4560:	3804d1ba 	srli	r2,r7,6
    4564:	10800e04 	addi	r2,r2,56
    4568:	100690fa 	slli	r3,r2,3
    456c:	003fad06 	br	4424 <_free_r+0x134>
    4570:	22000315 	stw	r8,12(r4)
    4574:	22000215 	stw	r8,8(r4)
    4578:	3a05883a 	add	r2,r7,r8
    457c:	38c00054 	ori	r3,r7,1
    4580:	11c00015 	stw	r7,0(r2)
    4584:	41000215 	stw	r4,8(r8)
    4588:	40c00115 	stw	r3,4(r8)
    458c:	41000315 	stw	r4,12(r8)
    4590:	003f8406 	br	43a4 <_free_r+0xb4>
    4594:	1005d0ba 	srai	r2,r2,2
    4598:	00c00044 	movi	r3,1
    459c:	51000117 	ldw	r4,4(r10)
    45a0:	1886983a 	sll	r3,r3,r2
    45a4:	20c8b03a 	or	r4,r4,r3
    45a8:	51000115 	stw	r4,4(r10)
    45ac:	003fa706 	br	444c <_free_r+0x15c>
    45b0:	00801504 	movi	r2,84
    45b4:	10c00436 	bltu	r2,r3,45c8 <_free_r+0x2d8>
    45b8:	3804d33a 	srli	r2,r7,12
    45bc:	10801b84 	addi	r2,r2,110
    45c0:	100690fa 	slli	r3,r2,3
    45c4:	003f9706 	br	4424 <_free_r+0x134>
    45c8:	00805504 	movi	r2,340
    45cc:	10c00436 	bltu	r2,r3,45e0 <_free_r+0x2f0>
    45d0:	3804d3fa 	srli	r2,r7,15
    45d4:	10801dc4 	addi	r2,r2,119
    45d8:	100690fa 	slli	r3,r2,3
    45dc:	003f9106 	br	4424 <_free_r+0x134>
    45e0:	00815504 	movi	r2,1364
    45e4:	10c0032e 	bgeu	r2,r3,45f4 <_free_r+0x304>
    45e8:	00801f84 	movi	r2,126
    45ec:	00c0fc04 	movi	r3,1008
    45f0:	003f8c06 	br	4424 <_free_r+0x134>
    45f4:	3804d4ba 	srli	r2,r7,18
    45f8:	10801f04 	addi	r2,r2,124
    45fc:	100690fa 	slli	r3,r2,3
    4600:	003f8806 	br	4424 <_free_r+0x134>

00004604 <__sfvwrite_r>:
    4604:	30800217 	ldw	r2,8(r6)
    4608:	defff504 	addi	sp,sp,-44
    460c:	df000915 	stw	fp,36(sp)
    4610:	dd800715 	stw	r22,28(sp)
    4614:	dc800315 	stw	r18,12(sp)
    4618:	dfc00a15 	stw	ra,40(sp)
    461c:	ddc00815 	stw	r23,32(sp)
    4620:	dd400615 	stw	r21,24(sp)
    4624:	dd000515 	stw	r20,20(sp)
    4628:	dcc00415 	stw	r19,16(sp)
    462c:	dc400215 	stw	r17,8(sp)
    4630:	dc000115 	stw	r16,4(sp)
    4634:	302d883a 	mov	r22,r6
    4638:	2039883a 	mov	fp,r4
    463c:	2825883a 	mov	r18,r5
    4640:	10001c26 	beq	r2,zero,46b4 <__sfvwrite_r+0xb0>
    4644:	29c0030b 	ldhu	r7,12(r5)
    4648:	3880020c 	andi	r2,r7,8
    464c:	10002726 	beq	r2,zero,46ec <__sfvwrite_r+0xe8>
    4650:	28800417 	ldw	r2,16(r5)
    4654:	10002526 	beq	r2,zero,46ec <__sfvwrite_r+0xe8>
    4658:	3880008c 	andi	r2,r7,2
    465c:	b5400017 	ldw	r21,0(r22)
    4660:	10002826 	beq	r2,zero,4704 <__sfvwrite_r+0x100>
    4664:	0021883a 	mov	r16,zero
    4668:	0023883a 	mov	r17,zero
    466c:	880d883a 	mov	r6,r17
    4670:	e009883a 	mov	r4,fp
    4674:	00810004 	movi	r2,1024
    4678:	80006e26 	beq	r16,zero,4834 <__sfvwrite_r+0x230>
    467c:	800f883a 	mov	r7,r16
    4680:	91400717 	ldw	r5,28(r18)
    4684:	1400012e 	bgeu	r2,r16,468c <__sfvwrite_r+0x88>
    4688:	100f883a 	mov	r7,r2
    468c:	90c00917 	ldw	r3,36(r18)
    4690:	183ee83a 	callr	r3
    4694:	1007883a 	mov	r3,r2
    4698:	80a1c83a 	sub	r16,r16,r2
    469c:	88a3883a 	add	r17,r17,r2
    46a0:	00806d0e 	bge	zero,r2,4858 <__sfvwrite_r+0x254>
    46a4:	b0800217 	ldw	r2,8(r22)
    46a8:	10c5c83a 	sub	r2,r2,r3
    46ac:	b0800215 	stw	r2,8(r22)
    46b0:	103fee1e 	bne	r2,zero,466c <__sfvwrite_r+0x68>
    46b4:	0009883a 	mov	r4,zero
    46b8:	2005883a 	mov	r2,r4
    46bc:	dfc00a17 	ldw	ra,40(sp)
    46c0:	df000917 	ldw	fp,36(sp)
    46c4:	ddc00817 	ldw	r23,32(sp)
    46c8:	dd800717 	ldw	r22,28(sp)
    46cc:	dd400617 	ldw	r21,24(sp)
    46d0:	dd000517 	ldw	r20,20(sp)
    46d4:	dcc00417 	ldw	r19,16(sp)
    46d8:	dc800317 	ldw	r18,12(sp)
    46dc:	dc400217 	ldw	r17,8(sp)
    46e0:	dc000117 	ldw	r16,4(sp)
    46e4:	dec00b04 	addi	sp,sp,44
    46e8:	f800283a 	ret
    46ec:	000236c0 	call	236c <__swsetup_r>
    46f0:	1000e41e 	bne	r2,zero,4a84 <__sfvwrite_r+0x480>
    46f4:	91c0030b 	ldhu	r7,12(r18)
    46f8:	b5400017 	ldw	r21,0(r22)
    46fc:	3880008c 	andi	r2,r7,2
    4700:	103fd81e 	bne	r2,zero,4664 <__sfvwrite_r+0x60>
    4704:	3880004c 	andi	r2,r7,1
    4708:	1005003a 	cmpeq	r2,r2,zero
    470c:	10005726 	beq	r2,zero,486c <__sfvwrite_r+0x268>
    4710:	0029883a 	mov	r20,zero
    4714:	002f883a 	mov	r23,zero
    4718:	a0004226 	beq	r20,zero,4824 <__sfvwrite_r+0x220>
    471c:	3880800c 	andi	r2,r7,512
    4720:	94000217 	ldw	r16,8(r18)
    4724:	10008b26 	beq	r2,zero,4954 <__sfvwrite_r+0x350>
    4728:	800d883a 	mov	r6,r16
    472c:	a400a536 	bltu	r20,r16,49c4 <__sfvwrite_r+0x3c0>
    4730:	3881200c 	andi	r2,r7,1152
    4734:	10002726 	beq	r2,zero,47d4 <__sfvwrite_r+0x1d0>
    4738:	90800517 	ldw	r2,20(r18)
    473c:	92000417 	ldw	r8,16(r18)
    4740:	91400017 	ldw	r5,0(r18)
    4744:	1087883a 	add	r3,r2,r2
    4748:	1887883a 	add	r3,r3,r2
    474c:	1808d7fa 	srli	r4,r3,31
    4750:	2a21c83a 	sub	r16,r5,r8
    4754:	80800044 	addi	r2,r16,1
    4758:	20c9883a 	add	r4,r4,r3
    475c:	2027d07a 	srai	r19,r4,1
    4760:	a085883a 	add	r2,r20,r2
    4764:	980d883a 	mov	r6,r19
    4768:	9880022e 	bgeu	r19,r2,4774 <__sfvwrite_r+0x170>
    476c:	1027883a 	mov	r19,r2
    4770:	100d883a 	mov	r6,r2
    4774:	3881000c 	andi	r2,r7,1024
    4778:	1000b826 	beq	r2,zero,4a5c <__sfvwrite_r+0x458>
    477c:	300b883a 	mov	r5,r6
    4780:	e009883a 	mov	r4,fp
    4784:	0004e780 	call	4e78 <_malloc_r>
    4788:	10003126 	beq	r2,zero,4850 <__sfvwrite_r+0x24c>
    478c:	91400417 	ldw	r5,16(r18)
    4790:	1009883a 	mov	r4,r2
    4794:	800d883a 	mov	r6,r16
    4798:	1023883a 	mov	r17,r2
    479c:	000569c0 	call	569c <memcpy>
    47a0:	90c0030b 	ldhu	r3,12(r18)
    47a4:	00beffc4 	movi	r2,-1025
    47a8:	1886703a 	and	r3,r3,r2
    47ac:	18c02014 	ori	r3,r3,128
    47b0:	90c0030d 	sth	r3,12(r18)
    47b4:	9c07c83a 	sub	r3,r19,r16
    47b8:	8c05883a 	add	r2,r17,r16
    47bc:	a00d883a 	mov	r6,r20
    47c0:	a021883a 	mov	r16,r20
    47c4:	90800015 	stw	r2,0(r18)
    47c8:	90c00215 	stw	r3,8(r18)
    47cc:	94400415 	stw	r17,16(r18)
    47d0:	94c00515 	stw	r19,20(r18)
    47d4:	91000017 	ldw	r4,0(r18)
    47d8:	b80b883a 	mov	r5,r23
    47dc:	a023883a 	mov	r17,r20
    47e0:	000573c0 	call	573c <memmove>
    47e4:	90c00217 	ldw	r3,8(r18)
    47e8:	90800017 	ldw	r2,0(r18)
    47ec:	a027883a 	mov	r19,r20
    47f0:	1c07c83a 	sub	r3,r3,r16
    47f4:	1405883a 	add	r2,r2,r16
    47f8:	90c00215 	stw	r3,8(r18)
    47fc:	a021883a 	mov	r16,r20
    4800:	90800015 	stw	r2,0(r18)
    4804:	b0800217 	ldw	r2,8(r22)
    4808:	1405c83a 	sub	r2,r2,r16
    480c:	b0800215 	stw	r2,8(r22)
    4810:	103fa826 	beq	r2,zero,46b4 <__sfvwrite_r+0xb0>
    4814:	a469c83a 	sub	r20,r20,r17
    4818:	91c0030b 	ldhu	r7,12(r18)
    481c:	bcef883a 	add	r23,r23,r19
    4820:	a03fbe1e 	bne	r20,zero,471c <__sfvwrite_r+0x118>
    4824:	adc00017 	ldw	r23,0(r21)
    4828:	ad000117 	ldw	r20,4(r21)
    482c:	ad400204 	addi	r21,r21,8
    4830:	003fb906 	br	4718 <__sfvwrite_r+0x114>
    4834:	ac400017 	ldw	r17,0(r21)
    4838:	ac000117 	ldw	r16,4(r21)
    483c:	ad400204 	addi	r21,r21,8
    4840:	003f8a06 	br	466c <__sfvwrite_r+0x68>
    4844:	91400417 	ldw	r5,16(r18)
    4848:	e009883a 	mov	r4,fp
    484c:	00042f00 	call	42f0 <_free_r>
    4850:	00800304 	movi	r2,12
    4854:	e0800015 	stw	r2,0(fp)
    4858:	9080030b 	ldhu	r2,12(r18)
    485c:	013fffc4 	movi	r4,-1
    4860:	10801014 	ori	r2,r2,64
    4864:	9080030d 	sth	r2,12(r18)
    4868:	003f9306 	br	46b8 <__sfvwrite_r+0xb4>
    486c:	0027883a 	mov	r19,zero
    4870:	002f883a 	mov	r23,zero
    4874:	d8000015 	stw	zero,0(sp)
    4878:	0029883a 	mov	r20,zero
    487c:	98001e26 	beq	r19,zero,48f8 <__sfvwrite_r+0x2f4>
    4880:	d8c00017 	ldw	r3,0(sp)
    4884:	1804c03a 	cmpne	r2,r3,zero
    4888:	10005e26 	beq	r2,zero,4a04 <__sfvwrite_r+0x400>
    488c:	9821883a 	mov	r16,r19
    4890:	a4c0012e 	bgeu	r20,r19,4898 <__sfvwrite_r+0x294>
    4894:	a021883a 	mov	r16,r20
    4898:	91000017 	ldw	r4,0(r18)
    489c:	90800417 	ldw	r2,16(r18)
    48a0:	91800217 	ldw	r6,8(r18)
    48a4:	91c00517 	ldw	r7,20(r18)
    48a8:	1100022e 	bgeu	r2,r4,48b4 <__sfvwrite_r+0x2b0>
    48ac:	31e3883a 	add	r17,r6,r7
    48b0:	8c001616 	blt	r17,r16,490c <__sfvwrite_r+0x308>
    48b4:	81c03816 	blt	r16,r7,4998 <__sfvwrite_r+0x394>
    48b8:	90c00917 	ldw	r3,36(r18)
    48bc:	91400717 	ldw	r5,28(r18)
    48c0:	e009883a 	mov	r4,fp
    48c4:	b80d883a 	mov	r6,r23
    48c8:	183ee83a 	callr	r3
    48cc:	1023883a 	mov	r17,r2
    48d0:	00bfe10e 	bge	zero,r2,4858 <__sfvwrite_r+0x254>
    48d4:	a469c83a 	sub	r20,r20,r17
    48d8:	a0001826 	beq	r20,zero,493c <__sfvwrite_r+0x338>
    48dc:	b0800217 	ldw	r2,8(r22)
    48e0:	1445c83a 	sub	r2,r2,r17
    48e4:	b0800215 	stw	r2,8(r22)
    48e8:	103f7226 	beq	r2,zero,46b4 <__sfvwrite_r+0xb0>
    48ec:	9c67c83a 	sub	r19,r19,r17
    48f0:	bc6f883a 	add	r23,r23,r17
    48f4:	983fe21e 	bne	r19,zero,4880 <__sfvwrite_r+0x27c>
    48f8:	adc00017 	ldw	r23,0(r21)
    48fc:	acc00117 	ldw	r19,4(r21)
    4900:	ad400204 	addi	r21,r21,8
    4904:	d8000015 	stw	zero,0(sp)
    4908:	003fdc06 	br	487c <__sfvwrite_r+0x278>
    490c:	b80b883a 	mov	r5,r23
    4910:	880d883a 	mov	r6,r17
    4914:	000573c0 	call	573c <memmove>
    4918:	90c00017 	ldw	r3,0(r18)
    491c:	e009883a 	mov	r4,fp
    4920:	900b883a 	mov	r5,r18
    4924:	1c47883a 	add	r3,r3,r17
    4928:	90c00015 	stw	r3,0(r18)
    492c:	0003ca00 	call	3ca0 <_fflush_r>
    4930:	103fc91e 	bne	r2,zero,4858 <__sfvwrite_r+0x254>
    4934:	a469c83a 	sub	r20,r20,r17
    4938:	a03fe81e 	bne	r20,zero,48dc <__sfvwrite_r+0x2d8>
    493c:	e009883a 	mov	r4,fp
    4940:	900b883a 	mov	r5,r18
    4944:	0003ca00 	call	3ca0 <_fflush_r>
    4948:	103fc31e 	bne	r2,zero,4858 <__sfvwrite_r+0x254>
    494c:	d8000015 	stw	zero,0(sp)
    4950:	003fe206 	br	48dc <__sfvwrite_r+0x2d8>
    4954:	91000017 	ldw	r4,0(r18)
    4958:	90800417 	ldw	r2,16(r18)
    495c:	1100022e 	bgeu	r2,r4,4968 <__sfvwrite_r+0x364>
    4960:	8023883a 	mov	r17,r16
    4964:	85003136 	bltu	r16,r20,4a2c <__sfvwrite_r+0x428>
    4968:	91c00517 	ldw	r7,20(r18)
    496c:	a1c01836 	bltu	r20,r7,49d0 <__sfvwrite_r+0x3cc>
    4970:	90c00917 	ldw	r3,36(r18)
    4974:	91400717 	ldw	r5,28(r18)
    4978:	e009883a 	mov	r4,fp
    497c:	b80d883a 	mov	r6,r23
    4980:	183ee83a 	callr	r3
    4984:	1021883a 	mov	r16,r2
    4988:	00bfb30e 	bge	zero,r2,4858 <__sfvwrite_r+0x254>
    498c:	1023883a 	mov	r17,r2
    4990:	1027883a 	mov	r19,r2
    4994:	003f9b06 	br	4804 <__sfvwrite_r+0x200>
    4998:	b80b883a 	mov	r5,r23
    499c:	800d883a 	mov	r6,r16
    49a0:	000573c0 	call	573c <memmove>
    49a4:	90c00217 	ldw	r3,8(r18)
    49a8:	90800017 	ldw	r2,0(r18)
    49ac:	8023883a 	mov	r17,r16
    49b0:	1c07c83a 	sub	r3,r3,r16
    49b4:	1405883a 	add	r2,r2,r16
    49b8:	90c00215 	stw	r3,8(r18)
    49bc:	90800015 	stw	r2,0(r18)
    49c0:	003fc406 	br	48d4 <__sfvwrite_r+0x2d0>
    49c4:	a00d883a 	mov	r6,r20
    49c8:	a021883a 	mov	r16,r20
    49cc:	003f8106 	br	47d4 <__sfvwrite_r+0x1d0>
    49d0:	b80b883a 	mov	r5,r23
    49d4:	a00d883a 	mov	r6,r20
    49d8:	000573c0 	call	573c <memmove>
    49dc:	90c00217 	ldw	r3,8(r18)
    49e0:	90800017 	ldw	r2,0(r18)
    49e4:	a021883a 	mov	r16,r20
    49e8:	1d07c83a 	sub	r3,r3,r20
    49ec:	1505883a 	add	r2,r2,r20
    49f0:	a023883a 	mov	r17,r20
    49f4:	a027883a 	mov	r19,r20
    49f8:	90c00215 	stw	r3,8(r18)
    49fc:	90800015 	stw	r2,0(r18)
    4a00:	003f8006 	br	4804 <__sfvwrite_r+0x200>
    4a04:	b809883a 	mov	r4,r23
    4a08:	01400284 	movi	r5,10
    4a0c:	980d883a 	mov	r6,r19
    4a10:	00055b80 	call	55b8 <memchr>
    4a14:	10001726 	beq	r2,zero,4a74 <__sfvwrite_r+0x470>
    4a18:	15c5c83a 	sub	r2,r2,r23
    4a1c:	15000044 	addi	r20,r2,1
    4a20:	00800044 	movi	r2,1
    4a24:	d8800015 	stw	r2,0(sp)
    4a28:	003f9806 	br	488c <__sfvwrite_r+0x288>
    4a2c:	b80b883a 	mov	r5,r23
    4a30:	800d883a 	mov	r6,r16
    4a34:	000573c0 	call	573c <memmove>
    4a38:	90c00017 	ldw	r3,0(r18)
    4a3c:	e009883a 	mov	r4,fp
    4a40:	900b883a 	mov	r5,r18
    4a44:	1c07883a 	add	r3,r3,r16
    4a48:	90c00015 	stw	r3,0(r18)
    4a4c:	8027883a 	mov	r19,r16
    4a50:	0003ca00 	call	3ca0 <_fflush_r>
    4a54:	103f6b26 	beq	r2,zero,4804 <__sfvwrite_r+0x200>
    4a58:	003f7f06 	br	4858 <__sfvwrite_r+0x254>
    4a5c:	400b883a 	mov	r5,r8
    4a60:	e009883a 	mov	r4,fp
    4a64:	00069400 	call	6940 <_realloc_r>
    4a68:	103f7626 	beq	r2,zero,4844 <__sfvwrite_r+0x240>
    4a6c:	1023883a 	mov	r17,r2
    4a70:	003f5006 	br	47b4 <__sfvwrite_r+0x1b0>
    4a74:	00c00044 	movi	r3,1
    4a78:	9d000044 	addi	r20,r19,1
    4a7c:	d8c00015 	stw	r3,0(sp)
    4a80:	003f8206 	br	488c <__sfvwrite_r+0x288>
    4a84:	9080030b 	ldhu	r2,12(r18)
    4a88:	00c00244 	movi	r3,9
    4a8c:	013fffc4 	movi	r4,-1
    4a90:	10801014 	ori	r2,r2,64
    4a94:	9080030d 	sth	r2,12(r18)
    4a98:	e0c00015 	stw	r3,0(fp)
    4a9c:	003f0606 	br	46b8 <__sfvwrite_r+0xb4>

00004aa0 <_fwalk_reent>:
    4aa0:	defff704 	addi	sp,sp,-36
    4aa4:	dcc00315 	stw	r19,12(sp)
    4aa8:	24c0b804 	addi	r19,r4,736
    4aac:	dd800615 	stw	r22,24(sp)
    4ab0:	dd400515 	stw	r21,20(sp)
    4ab4:	dfc00815 	stw	ra,32(sp)
    4ab8:	ddc00715 	stw	r23,28(sp)
    4abc:	dd000415 	stw	r20,16(sp)
    4ac0:	dc800215 	stw	r18,8(sp)
    4ac4:	dc400115 	stw	r17,4(sp)
    4ac8:	dc000015 	stw	r16,0(sp)
    4acc:	202b883a 	mov	r21,r4
    4ad0:	282d883a 	mov	r22,r5
    4ad4:	0003f280 	call	3f28 <__sfp_lock_acquire>
    4ad8:	98002126 	beq	r19,zero,4b60 <_fwalk_reent+0xc0>
    4adc:	002f883a 	mov	r23,zero
    4ae0:	9c800117 	ldw	r18,4(r19)
    4ae4:	9c000217 	ldw	r16,8(r19)
    4ae8:	90bfffc4 	addi	r2,r18,-1
    4aec:	10000d16 	blt	r2,zero,4b24 <_fwalk_reent+0x84>
    4af0:	0023883a 	mov	r17,zero
    4af4:	053fffc4 	movi	r20,-1
    4af8:	8080030f 	ldh	r2,12(r16)
    4afc:	8c400044 	addi	r17,r17,1
    4b00:	10000626 	beq	r2,zero,4b1c <_fwalk_reent+0x7c>
    4b04:	8080038f 	ldh	r2,14(r16)
    4b08:	800b883a 	mov	r5,r16
    4b0c:	a809883a 	mov	r4,r21
    4b10:	15000226 	beq	r2,r20,4b1c <_fwalk_reent+0x7c>
    4b14:	b03ee83a 	callr	r22
    4b18:	b8aeb03a 	or	r23,r23,r2
    4b1c:	84001704 	addi	r16,r16,92
    4b20:	947ff51e 	bne	r18,r17,4af8 <_fwalk_reent+0x58>
    4b24:	9cc00017 	ldw	r19,0(r19)
    4b28:	983fed1e 	bne	r19,zero,4ae0 <_fwalk_reent+0x40>
    4b2c:	0003f2c0 	call	3f2c <__sfp_lock_release>
    4b30:	b805883a 	mov	r2,r23
    4b34:	dfc00817 	ldw	ra,32(sp)
    4b38:	ddc00717 	ldw	r23,28(sp)
    4b3c:	dd800617 	ldw	r22,24(sp)
    4b40:	dd400517 	ldw	r21,20(sp)
    4b44:	dd000417 	ldw	r20,16(sp)
    4b48:	dcc00317 	ldw	r19,12(sp)
    4b4c:	dc800217 	ldw	r18,8(sp)
    4b50:	dc400117 	ldw	r17,4(sp)
    4b54:	dc000017 	ldw	r16,0(sp)
    4b58:	dec00904 	addi	sp,sp,36
    4b5c:	f800283a 	ret
    4b60:	002f883a 	mov	r23,zero
    4b64:	003ff106 	br	4b2c <_fwalk_reent+0x8c>

00004b68 <_fwalk>:
    4b68:	defff804 	addi	sp,sp,-32
    4b6c:	dcc00315 	stw	r19,12(sp)
    4b70:	24c0b804 	addi	r19,r4,736
    4b74:	dd400515 	stw	r21,20(sp)
    4b78:	dfc00715 	stw	ra,28(sp)
    4b7c:	dd800615 	stw	r22,24(sp)
    4b80:	dd000415 	stw	r20,16(sp)
    4b84:	dc800215 	stw	r18,8(sp)
    4b88:	dc400115 	stw	r17,4(sp)
    4b8c:	dc000015 	stw	r16,0(sp)
    4b90:	282b883a 	mov	r21,r5
    4b94:	0003f280 	call	3f28 <__sfp_lock_acquire>
    4b98:	98001f26 	beq	r19,zero,4c18 <_fwalk+0xb0>
    4b9c:	002d883a 	mov	r22,zero
    4ba0:	9c800117 	ldw	r18,4(r19)
    4ba4:	9c000217 	ldw	r16,8(r19)
    4ba8:	90bfffc4 	addi	r2,r18,-1
    4bac:	10000c16 	blt	r2,zero,4be0 <_fwalk+0x78>
    4bb0:	0023883a 	mov	r17,zero
    4bb4:	053fffc4 	movi	r20,-1
    4bb8:	8080030f 	ldh	r2,12(r16)
    4bbc:	8c400044 	addi	r17,r17,1
    4bc0:	10000526 	beq	r2,zero,4bd8 <_fwalk+0x70>
    4bc4:	8080038f 	ldh	r2,14(r16)
    4bc8:	8009883a 	mov	r4,r16
    4bcc:	15000226 	beq	r2,r20,4bd8 <_fwalk+0x70>
    4bd0:	a83ee83a 	callr	r21
    4bd4:	b0acb03a 	or	r22,r22,r2
    4bd8:	84001704 	addi	r16,r16,92
    4bdc:	947ff61e 	bne	r18,r17,4bb8 <_fwalk+0x50>
    4be0:	9cc00017 	ldw	r19,0(r19)
    4be4:	983fee1e 	bne	r19,zero,4ba0 <_fwalk+0x38>
    4be8:	0003f2c0 	call	3f2c <__sfp_lock_release>
    4bec:	b005883a 	mov	r2,r22
    4bf0:	dfc00717 	ldw	ra,28(sp)
    4bf4:	dd800617 	ldw	r22,24(sp)
    4bf8:	dd400517 	ldw	r21,20(sp)
    4bfc:	dd000417 	ldw	r20,16(sp)
    4c00:	dcc00317 	ldw	r19,12(sp)
    4c04:	dc800217 	ldw	r18,8(sp)
    4c08:	dc400117 	ldw	r17,4(sp)
    4c0c:	dc000017 	ldw	r16,0(sp)
    4c10:	dec00804 	addi	sp,sp,32
    4c14:	f800283a 	ret
    4c18:	002d883a 	mov	r22,zero
    4c1c:	003ff206 	br	4be8 <_fwalk+0x80>

00004c20 <__locale_charset>:
    4c20:	d0a00317 	ldw	r2,-32756(gp)
    4c24:	f800283a 	ret

00004c28 <_localeconv_r>:
    4c28:	00800074 	movhi	r2,1
    4c2c:	10b4f304 	addi	r2,r2,-11316
    4c30:	f800283a 	ret

00004c34 <localeconv>:
    4c34:	00800074 	movhi	r2,1
    4c38:	10bc5504 	addi	r2,r2,-3756
    4c3c:	11000017 	ldw	r4,0(r2)
    4c40:	0004c281 	jmpi	4c28 <_localeconv_r>

00004c44 <_setlocale_r>:
    4c44:	defffc04 	addi	sp,sp,-16
    4c48:	00c00074 	movhi	r3,1
    4c4c:	18f4ee04 	addi	r3,r3,-11336
    4c50:	dc800215 	stw	r18,8(sp)
    4c54:	dc400115 	stw	r17,4(sp)
    4c58:	dc000015 	stw	r16,0(sp)
    4c5c:	2023883a 	mov	r17,r4
    4c60:	2825883a 	mov	r18,r5
    4c64:	dfc00315 	stw	ra,12(sp)
    4c68:	3021883a 	mov	r16,r6
    4c6c:	3009883a 	mov	r4,r6
    4c70:	180b883a 	mov	r5,r3
    4c74:	30000926 	beq	r6,zero,4c9c <_setlocale_r+0x58>
    4c78:	00071600 	call	7160 <strcmp>
    4c7c:	8009883a 	mov	r4,r16
    4c80:	01400074 	movhi	r5,1
    4c84:	2974d904 	addi	r5,r5,-11420
    4c88:	10000b1e 	bne	r2,zero,4cb8 <_setlocale_r+0x74>
    4c8c:	8c000d15 	stw	r16,52(r17)
    4c90:	8c800c15 	stw	r18,48(r17)
    4c94:	00c00074 	movhi	r3,1
    4c98:	18f4ee04 	addi	r3,r3,-11336
    4c9c:	1805883a 	mov	r2,r3
    4ca0:	dfc00317 	ldw	ra,12(sp)
    4ca4:	dc800217 	ldw	r18,8(sp)
    4ca8:	dc400117 	ldw	r17,4(sp)
    4cac:	dc000017 	ldw	r16,0(sp)
    4cb0:	dec00404 	addi	sp,sp,16
    4cb4:	f800283a 	ret
    4cb8:	00071600 	call	7160 <strcmp>
    4cbc:	0007883a 	mov	r3,zero
    4cc0:	103ff226 	beq	r2,zero,4c8c <_setlocale_r+0x48>
    4cc4:	003ff506 	br	4c9c <_setlocale_r+0x58>

00004cc8 <setlocale>:
    4cc8:	01800074 	movhi	r6,1
    4ccc:	31bc5504 	addi	r6,r6,-3756
    4cd0:	2007883a 	mov	r3,r4
    4cd4:	31000017 	ldw	r4,0(r6)
    4cd8:	280d883a 	mov	r6,r5
    4cdc:	180b883a 	mov	r5,r3
    4ce0:	0004c441 	jmpi	4c44 <_setlocale_r>

00004ce4 <__smakebuf_r>:
    4ce4:	2880030b 	ldhu	r2,12(r5)
    4ce8:	deffed04 	addi	sp,sp,-76
    4cec:	dc401015 	stw	r17,64(sp)
    4cf0:	1080008c 	andi	r2,r2,2
    4cf4:	dc000f15 	stw	r16,60(sp)
    4cf8:	dfc01215 	stw	ra,72(sp)
    4cfc:	dc801115 	stw	r18,68(sp)
    4d00:	2821883a 	mov	r16,r5
    4d04:	2023883a 	mov	r17,r4
    4d08:	10000b26 	beq	r2,zero,4d38 <__smakebuf_r+0x54>
    4d0c:	28c010c4 	addi	r3,r5,67
    4d10:	00800044 	movi	r2,1
    4d14:	28800515 	stw	r2,20(r5)
    4d18:	28c00415 	stw	r3,16(r5)
    4d1c:	28c00015 	stw	r3,0(r5)
    4d20:	dfc01217 	ldw	ra,72(sp)
    4d24:	dc801117 	ldw	r18,68(sp)
    4d28:	dc401017 	ldw	r17,64(sp)
    4d2c:	dc000f17 	ldw	r16,60(sp)
    4d30:	dec01304 	addi	sp,sp,76
    4d34:	f800283a 	ret
    4d38:	2940038f 	ldh	r5,14(r5)
    4d3c:	28002116 	blt	r5,zero,4dc4 <__smakebuf_r+0xe0>
    4d40:	d80d883a 	mov	r6,sp
    4d44:	00075640 	call	7564 <_fstat_r>
    4d48:	10001e16 	blt	r2,zero,4dc4 <__smakebuf_r+0xe0>
    4d4c:	d8800117 	ldw	r2,4(sp)
    4d50:	00e00014 	movui	r3,32768
    4d54:	113c000c 	andi	r4,r2,61440
    4d58:	20c03126 	beq	r4,r3,4e20 <__smakebuf_r+0x13c>
    4d5c:	8080030b 	ldhu	r2,12(r16)
    4d60:	00c80004 	movi	r3,8192
    4d64:	10820014 	ori	r2,r2,2048
    4d68:	8080030d 	sth	r2,12(r16)
    4d6c:	20c01e26 	beq	r4,r3,4de8 <__smakebuf_r+0x104>
    4d70:	04810004 	movi	r18,1024
    4d74:	8809883a 	mov	r4,r17
    4d78:	900b883a 	mov	r5,r18
    4d7c:	0004e780 	call	4e78 <_malloc_r>
    4d80:	1009883a 	mov	r4,r2
    4d84:	10003126 	beq	r2,zero,4e4c <__smakebuf_r+0x168>
    4d88:	80c0030b 	ldhu	r3,12(r16)
    4d8c:	00800034 	movhi	r2,0
    4d90:	10900704 	addi	r2,r2,16412
    4d94:	88800f15 	stw	r2,60(r17)
    4d98:	18c02014 	ori	r3,r3,128
    4d9c:	84800515 	stw	r18,20(r16)
    4da0:	80c0030d 	sth	r3,12(r16)
    4da4:	81000415 	stw	r4,16(r16)
    4da8:	81000015 	stw	r4,0(r16)
    4dac:	dfc01217 	ldw	ra,72(sp)
    4db0:	dc801117 	ldw	r18,68(sp)
    4db4:	dc401017 	ldw	r17,64(sp)
    4db8:	dc000f17 	ldw	r16,60(sp)
    4dbc:	dec01304 	addi	sp,sp,76
    4dc0:	f800283a 	ret
    4dc4:	80c0030b 	ldhu	r3,12(r16)
    4dc8:	1880200c 	andi	r2,r3,128
    4dcc:	10000426 	beq	r2,zero,4de0 <__smakebuf_r+0xfc>
    4dd0:	04801004 	movi	r18,64
    4dd4:	18820014 	ori	r2,r3,2048
    4dd8:	8080030d 	sth	r2,12(r16)
    4ddc:	003fe506 	br	4d74 <__smakebuf_r+0x90>
    4de0:	04810004 	movi	r18,1024
    4de4:	003ffb06 	br	4dd4 <__smakebuf_r+0xf0>
    4de8:	8140038f 	ldh	r5,14(r16)
    4dec:	8809883a 	mov	r4,r17
    4df0:	00075d80 	call	75d8 <_isatty_r>
    4df4:	103fde26 	beq	r2,zero,4d70 <__smakebuf_r+0x8c>
    4df8:	8080030b 	ldhu	r2,12(r16)
    4dfc:	80c010c4 	addi	r3,r16,67
    4e00:	04810004 	movi	r18,1024
    4e04:	10800054 	ori	r2,r2,1
    4e08:	8080030d 	sth	r2,12(r16)
    4e0c:	00800044 	movi	r2,1
    4e10:	80c00415 	stw	r3,16(r16)
    4e14:	80800515 	stw	r2,20(r16)
    4e18:	80c00015 	stw	r3,0(r16)
    4e1c:	003fd506 	br	4d74 <__smakebuf_r+0x90>
    4e20:	80c00a17 	ldw	r3,40(r16)
    4e24:	00800034 	movhi	r2,0
    4e28:	109c0704 	addi	r2,r2,28700
    4e2c:	18bfcb1e 	bne	r3,r2,4d5c <__smakebuf_r+0x78>
    4e30:	8080030b 	ldhu	r2,12(r16)
    4e34:	00c10004 	movi	r3,1024
    4e38:	1825883a 	mov	r18,r3
    4e3c:	10c4b03a 	or	r2,r2,r3
    4e40:	8080030d 	sth	r2,12(r16)
    4e44:	80c01315 	stw	r3,76(r16)
    4e48:	003fca06 	br	4d74 <__smakebuf_r+0x90>
    4e4c:	8100030b 	ldhu	r4,12(r16)
    4e50:	2080800c 	andi	r2,r4,512
    4e54:	103fb21e 	bne	r2,zero,4d20 <__smakebuf_r+0x3c>
    4e58:	80c010c4 	addi	r3,r16,67
    4e5c:	21000094 	ori	r4,r4,2
    4e60:	00800044 	movi	r2,1
    4e64:	80800515 	stw	r2,20(r16)
    4e68:	8100030d 	sth	r4,12(r16)
    4e6c:	80c00415 	stw	r3,16(r16)
    4e70:	80c00015 	stw	r3,0(r16)
    4e74:	003faa06 	br	4d20 <__smakebuf_r+0x3c>

00004e78 <_malloc_r>:
    4e78:	defff604 	addi	sp,sp,-40
    4e7c:	28c002c4 	addi	r3,r5,11
    4e80:	00800584 	movi	r2,22
    4e84:	dc800215 	stw	r18,8(sp)
    4e88:	dfc00915 	stw	ra,36(sp)
    4e8c:	df000815 	stw	fp,32(sp)
    4e90:	ddc00715 	stw	r23,28(sp)
    4e94:	dd800615 	stw	r22,24(sp)
    4e98:	dd400515 	stw	r21,20(sp)
    4e9c:	dd000415 	stw	r20,16(sp)
    4ea0:	dcc00315 	stw	r19,12(sp)
    4ea4:	dc400115 	stw	r17,4(sp)
    4ea8:	dc000015 	stw	r16,0(sp)
    4eac:	2025883a 	mov	r18,r4
    4eb0:	10c01236 	bltu	r2,r3,4efc <_malloc_r+0x84>
    4eb4:	04400404 	movi	r17,16
    4eb8:	8940142e 	bgeu	r17,r5,4f0c <_malloc_r+0x94>
    4ebc:	00800304 	movi	r2,12
    4ec0:	0007883a 	mov	r3,zero
    4ec4:	90800015 	stw	r2,0(r18)
    4ec8:	1805883a 	mov	r2,r3
    4ecc:	dfc00917 	ldw	ra,36(sp)
    4ed0:	df000817 	ldw	fp,32(sp)
    4ed4:	ddc00717 	ldw	r23,28(sp)
    4ed8:	dd800617 	ldw	r22,24(sp)
    4edc:	dd400517 	ldw	r21,20(sp)
    4ee0:	dd000417 	ldw	r20,16(sp)
    4ee4:	dcc00317 	ldw	r19,12(sp)
    4ee8:	dc800217 	ldw	r18,8(sp)
    4eec:	dc400117 	ldw	r17,4(sp)
    4ef0:	dc000017 	ldw	r16,0(sp)
    4ef4:	dec00a04 	addi	sp,sp,40
    4ef8:	f800283a 	ret
    4efc:	00bffe04 	movi	r2,-8
    4f00:	18a2703a 	and	r17,r3,r2
    4f04:	883fed16 	blt	r17,zero,4ebc <_malloc_r+0x44>
    4f08:	897fec36 	bltu	r17,r5,4ebc <_malloc_r+0x44>
    4f0c:	9009883a 	mov	r4,r18
    4f10:	000a4000 	call	a400 <__malloc_lock>
    4f14:	00807dc4 	movi	r2,503
    4f18:	14402b2e 	bgeu	r2,r17,4fc8 <_malloc_r+0x150>
    4f1c:	8806d27a 	srli	r3,r17,9
    4f20:	18003f1e 	bne	r3,zero,5020 <_malloc_r+0x1a8>
    4f24:	880cd0fa 	srli	r6,r17,3
    4f28:	300490fa 	slli	r2,r6,3
    4f2c:	02c00074 	movhi	r11,1
    4f30:	5af6a004 	addi	r11,r11,-9600
    4f34:	12cb883a 	add	r5,r2,r11
    4f38:	2c000317 	ldw	r16,12(r5)
    4f3c:	580f883a 	mov	r7,r11
    4f40:	2c00041e 	bne	r5,r16,4f54 <_malloc_r+0xdc>
    4f44:	00000a06 	br	4f70 <_malloc_r+0xf8>
    4f48:	1800860e 	bge	r3,zero,5164 <_malloc_r+0x2ec>
    4f4c:	84000317 	ldw	r16,12(r16)
    4f50:	2c000726 	beq	r5,r16,4f70 <_malloc_r+0xf8>
    4f54:	80800117 	ldw	r2,4(r16)
    4f58:	00ffff04 	movi	r3,-4
    4f5c:	10c8703a 	and	r4,r2,r3
    4f60:	2447c83a 	sub	r3,r4,r17
    4f64:	008003c4 	movi	r2,15
    4f68:	10fff70e 	bge	r2,r3,4f48 <_malloc_r+0xd0>
    4f6c:	31bfffc4 	addi	r6,r6,-1
    4f70:	32400044 	addi	r9,r6,1
    4f74:	02800074 	movhi	r10,1
    4f78:	52b6a204 	addi	r10,r10,-9592
    4f7c:	54000217 	ldw	r16,8(r10)
    4f80:	8280a026 	beq	r16,r10,5204 <_malloc_r+0x38c>
    4f84:	80800117 	ldw	r2,4(r16)
    4f88:	00ffff04 	movi	r3,-4
    4f8c:	10ca703a 	and	r5,r2,r3
    4f90:	2c4dc83a 	sub	r6,r5,r17
    4f94:	008003c4 	movi	r2,15
    4f98:	11808316 	blt	r2,r6,51a8 <_malloc_r+0x330>
    4f9c:	52800315 	stw	r10,12(r10)
    4fa0:	52800215 	stw	r10,8(r10)
    4fa4:	30002916 	blt	r6,zero,504c <_malloc_r+0x1d4>
    4fa8:	8147883a 	add	r3,r16,r5
    4fac:	18800117 	ldw	r2,4(r3)
    4fb0:	9009883a 	mov	r4,r18
    4fb4:	10800054 	ori	r2,r2,1
    4fb8:	18800115 	stw	r2,4(r3)
    4fbc:	000a4200 	call	a420 <__malloc_unlock>
    4fc0:	80c00204 	addi	r3,r16,8
    4fc4:	003fc006 	br	4ec8 <_malloc_r+0x50>
    4fc8:	02c00074 	movhi	r11,1
    4fcc:	5af6a004 	addi	r11,r11,-9600
    4fd0:	8ac5883a 	add	r2,r17,r11
    4fd4:	14000317 	ldw	r16,12(r2)
    4fd8:	580f883a 	mov	r7,r11
    4fdc:	8806d0fa 	srli	r3,r17,3
    4fe0:	14006c26 	beq	r2,r16,5194 <_malloc_r+0x31c>
    4fe4:	80c00117 	ldw	r3,4(r16)
    4fe8:	00bfff04 	movi	r2,-4
    4fec:	81800317 	ldw	r6,12(r16)
    4ff0:	1886703a 	and	r3,r3,r2
    4ff4:	80c7883a 	add	r3,r16,r3
    4ff8:	18800117 	ldw	r2,4(r3)
    4ffc:	81400217 	ldw	r5,8(r16)
    5000:	9009883a 	mov	r4,r18
    5004:	10800054 	ori	r2,r2,1
    5008:	18800115 	stw	r2,4(r3)
    500c:	31400215 	stw	r5,8(r6)
    5010:	29800315 	stw	r6,12(r5)
    5014:	000a4200 	call	a420 <__malloc_unlock>
    5018:	80c00204 	addi	r3,r16,8
    501c:	003faa06 	br	4ec8 <_malloc_r+0x50>
    5020:	00800104 	movi	r2,4
    5024:	10c0052e 	bgeu	r2,r3,503c <_malloc_r+0x1c4>
    5028:	00800504 	movi	r2,20
    502c:	10c07836 	bltu	r2,r3,5210 <_malloc_r+0x398>
    5030:	198016c4 	addi	r6,r3,91
    5034:	300490fa 	slli	r2,r6,3
    5038:	003fbc06 	br	4f2c <_malloc_r+0xb4>
    503c:	8804d1ba 	srli	r2,r17,6
    5040:	11800e04 	addi	r6,r2,56
    5044:	300490fa 	slli	r2,r6,3
    5048:	003fb806 	br	4f2c <_malloc_r+0xb4>
    504c:	00807fc4 	movi	r2,511
    5050:	1140bb36 	bltu	r2,r5,5340 <_malloc_r+0x4c8>
    5054:	2806d0fa 	srli	r3,r5,3
    5058:	573ffe04 	addi	fp,r10,-8
    505c:	00800044 	movi	r2,1
    5060:	180890fa 	slli	r4,r3,3
    5064:	1807d0ba 	srai	r3,r3,2
    5068:	e1c00117 	ldw	r7,4(fp)
    506c:	5909883a 	add	r4,r11,r4
    5070:	21400217 	ldw	r5,8(r4)
    5074:	10c4983a 	sll	r2,r2,r3
    5078:	81000315 	stw	r4,12(r16)
    507c:	81400215 	stw	r5,8(r16)
    5080:	388eb03a 	or	r7,r7,r2
    5084:	2c000315 	stw	r16,12(r5)
    5088:	24000215 	stw	r16,8(r4)
    508c:	e1c00115 	stw	r7,4(fp)
    5090:	4807883a 	mov	r3,r9
    5094:	4800cd16 	blt	r9,zero,53cc <_malloc_r+0x554>
    5098:	1807d0ba 	srai	r3,r3,2
    509c:	00800044 	movi	r2,1
    50a0:	10c8983a 	sll	r4,r2,r3
    50a4:	39004436 	bltu	r7,r4,51b8 <_malloc_r+0x340>
    50a8:	21c4703a 	and	r2,r4,r7
    50ac:	10000a1e 	bne	r2,zero,50d8 <_malloc_r+0x260>
    50b0:	2109883a 	add	r4,r4,r4
    50b4:	00bfff04 	movi	r2,-4
    50b8:	4884703a 	and	r2,r9,r2
    50bc:	3906703a 	and	r3,r7,r4
    50c0:	12400104 	addi	r9,r2,4
    50c4:	1800041e 	bne	r3,zero,50d8 <_malloc_r+0x260>
    50c8:	2109883a 	add	r4,r4,r4
    50cc:	3904703a 	and	r2,r7,r4
    50d0:	4a400104 	addi	r9,r9,4
    50d4:	103ffc26 	beq	r2,zero,50c8 <_malloc_r+0x250>
    50d8:	480490fa 	slli	r2,r9,3
    50dc:	4819883a 	mov	r12,r9
    50e0:	023fff04 	movi	r8,-4
    50e4:	589b883a 	add	r13,r11,r2
    50e8:	6807883a 	mov	r3,r13
    50ec:	014003c4 	movi	r5,15
    50f0:	1c000317 	ldw	r16,12(r3)
    50f4:	1c00041e 	bne	r3,r16,5108 <_malloc_r+0x290>
    50f8:	0000a706 	br	5398 <_malloc_r+0x520>
    50fc:	3000ab0e 	bge	r6,zero,53ac <_malloc_r+0x534>
    5100:	84000317 	ldw	r16,12(r16)
    5104:	1c00a426 	beq	r3,r16,5398 <_malloc_r+0x520>
    5108:	80800117 	ldw	r2,4(r16)
    510c:	1204703a 	and	r2,r2,r8
    5110:	144dc83a 	sub	r6,r2,r17
    5114:	29bff90e 	bge	r5,r6,50fc <_malloc_r+0x284>
    5118:	81000317 	ldw	r4,12(r16)
    511c:	80c00217 	ldw	r3,8(r16)
    5120:	89400054 	ori	r5,r17,1
    5124:	8445883a 	add	r2,r16,r17
    5128:	20c00215 	stw	r3,8(r4)
    512c:	19000315 	stw	r4,12(r3)
    5130:	81400115 	stw	r5,4(r16)
    5134:	1187883a 	add	r3,r2,r6
    5138:	31000054 	ori	r4,r6,1
    513c:	50800315 	stw	r2,12(r10)
    5140:	50800215 	stw	r2,8(r10)
    5144:	19800015 	stw	r6,0(r3)
    5148:	11000115 	stw	r4,4(r2)
    514c:	12800215 	stw	r10,8(r2)
    5150:	12800315 	stw	r10,12(r2)
    5154:	9009883a 	mov	r4,r18
    5158:	000a4200 	call	a420 <__malloc_unlock>
    515c:	80c00204 	addi	r3,r16,8
    5160:	003f5906 	br	4ec8 <_malloc_r+0x50>
    5164:	8109883a 	add	r4,r16,r4
    5168:	20800117 	ldw	r2,4(r4)
    516c:	80c00217 	ldw	r3,8(r16)
    5170:	81400317 	ldw	r5,12(r16)
    5174:	10800054 	ori	r2,r2,1
    5178:	20800115 	stw	r2,4(r4)
    517c:	28c00215 	stw	r3,8(r5)
    5180:	19400315 	stw	r5,12(r3)
    5184:	9009883a 	mov	r4,r18
    5188:	000a4200 	call	a420 <__malloc_unlock>
    518c:	80c00204 	addi	r3,r16,8
    5190:	003f4d06 	br	4ec8 <_malloc_r+0x50>
    5194:	80800204 	addi	r2,r16,8
    5198:	14000317 	ldw	r16,12(r2)
    519c:	143f911e 	bne	r2,r16,4fe4 <_malloc_r+0x16c>
    51a0:	1a400084 	addi	r9,r3,2
    51a4:	003f7306 	br	4f74 <_malloc_r+0xfc>
    51a8:	88c00054 	ori	r3,r17,1
    51ac:	8445883a 	add	r2,r16,r17
    51b0:	80c00115 	stw	r3,4(r16)
    51b4:	003fdf06 	br	5134 <_malloc_r+0x2bc>
    51b8:	e4000217 	ldw	r16,8(fp)
    51bc:	00bfff04 	movi	r2,-4
    51c0:	80c00117 	ldw	r3,4(r16)
    51c4:	802d883a 	mov	r22,r16
    51c8:	18aa703a 	and	r21,r3,r2
    51cc:	ac401636 	bltu	r21,r17,5228 <_malloc_r+0x3b0>
    51d0:	ac49c83a 	sub	r4,r21,r17
    51d4:	008003c4 	movi	r2,15
    51d8:	1100130e 	bge	r2,r4,5228 <_malloc_r+0x3b0>
    51dc:	88800054 	ori	r2,r17,1
    51e0:	8447883a 	add	r3,r16,r17
    51e4:	80800115 	stw	r2,4(r16)
    51e8:	20800054 	ori	r2,r4,1
    51ec:	18800115 	stw	r2,4(r3)
    51f0:	e0c00215 	stw	r3,8(fp)
    51f4:	9009883a 	mov	r4,r18
    51f8:	000a4200 	call	a420 <__malloc_unlock>
    51fc:	80c00204 	addi	r3,r16,8
    5200:	003f3106 	br	4ec8 <_malloc_r+0x50>
    5204:	39c00117 	ldw	r7,4(r7)
    5208:	573ffe04 	addi	fp,r10,-8
    520c:	003fa006 	br	5090 <_malloc_r+0x218>
    5210:	00801504 	movi	r2,84
    5214:	10c06736 	bltu	r2,r3,53b4 <_malloc_r+0x53c>
    5218:	8804d33a 	srli	r2,r17,12
    521c:	11801b84 	addi	r6,r2,110
    5220:	300490fa 	slli	r2,r6,3
    5224:	003f4106 	br	4f2c <_malloc_r+0xb4>
    5228:	d0a6db17 	ldw	r2,-25748(gp)
    522c:	d0e00517 	ldw	r3,-32748(gp)
    5230:	053fffc4 	movi	r20,-1
    5234:	10800404 	addi	r2,r2,16
    5238:	88a7883a 	add	r19,r17,r2
    523c:	1d000326 	beq	r3,r20,524c <_malloc_r+0x3d4>
    5240:	98c3ffc4 	addi	r3,r19,4095
    5244:	00bc0004 	movi	r2,-4096
    5248:	18a6703a 	and	r19,r3,r2
    524c:	9009883a 	mov	r4,r18
    5250:	980b883a 	mov	r5,r19
    5254:	0006fa40 	call	6fa4 <_sbrk_r>
    5258:	1009883a 	mov	r4,r2
    525c:	15000426 	beq	r2,r20,5270 <_malloc_r+0x3f8>
    5260:	854b883a 	add	r5,r16,r21
    5264:	1029883a 	mov	r20,r2
    5268:	11405a2e 	bgeu	r2,r5,53d4 <_malloc_r+0x55c>
    526c:	87000c26 	beq	r16,fp,52a0 <_malloc_r+0x428>
    5270:	e4000217 	ldw	r16,8(fp)
    5274:	80c00117 	ldw	r3,4(r16)
    5278:	00bfff04 	movi	r2,-4
    527c:	1884703a 	and	r2,r3,r2
    5280:	14400336 	bltu	r2,r17,5290 <_malloc_r+0x418>
    5284:	1449c83a 	sub	r4,r2,r17
    5288:	008003c4 	movi	r2,15
    528c:	113fd316 	blt	r2,r4,51dc <_malloc_r+0x364>
    5290:	9009883a 	mov	r4,r18
    5294:	000a4200 	call	a420 <__malloc_unlock>
    5298:	0007883a 	mov	r3,zero
    529c:	003f0a06 	br	4ec8 <_malloc_r+0x50>
    52a0:	05c00074 	movhi	r23,1
    52a4:	bdc33a04 	addi	r23,r23,3304
    52a8:	b8800017 	ldw	r2,0(r23)
    52ac:	988d883a 	add	r6,r19,r2
    52b0:	b9800015 	stw	r6,0(r23)
    52b4:	d0e00517 	ldw	r3,-32748(gp)
    52b8:	00bfffc4 	movi	r2,-1
    52bc:	18808e26 	beq	r3,r2,54f8 <_malloc_r+0x680>
    52c0:	2145c83a 	sub	r2,r4,r5
    52c4:	3085883a 	add	r2,r6,r2
    52c8:	b8800015 	stw	r2,0(r23)
    52cc:	20c001cc 	andi	r3,r4,7
    52d0:	18005f1e 	bne	r3,zero,5450 <_malloc_r+0x5d8>
    52d4:	000b883a 	mov	r5,zero
    52d8:	a4c5883a 	add	r2,r20,r19
    52dc:	1083ffcc 	andi	r2,r2,4095
    52e0:	00c40004 	movi	r3,4096
    52e4:	1887c83a 	sub	r3,r3,r2
    52e8:	28e7883a 	add	r19,r5,r3
    52ec:	9009883a 	mov	r4,r18
    52f0:	980b883a 	mov	r5,r19
    52f4:	0006fa40 	call	6fa4 <_sbrk_r>
    52f8:	1007883a 	mov	r3,r2
    52fc:	00bfffc4 	movi	r2,-1
    5300:	18807a26 	beq	r3,r2,54ec <_malloc_r+0x674>
    5304:	1d05c83a 	sub	r2,r3,r20
    5308:	9885883a 	add	r2,r19,r2
    530c:	10c00054 	ori	r3,r2,1
    5310:	b8800017 	ldw	r2,0(r23)
    5314:	a021883a 	mov	r16,r20
    5318:	a0c00115 	stw	r3,4(r20)
    531c:	9885883a 	add	r2,r19,r2
    5320:	b8800015 	stw	r2,0(r23)
    5324:	e5000215 	stw	r20,8(fp)
    5328:	b7003626 	beq	r22,fp,5404 <_malloc_r+0x58c>
    532c:	018003c4 	movi	r6,15
    5330:	35404b36 	bltu	r6,r21,5460 <_malloc_r+0x5e8>
    5334:	00800044 	movi	r2,1
    5338:	a0800115 	stw	r2,4(r20)
    533c:	003fcd06 	br	5274 <_malloc_r+0x3fc>
    5340:	2808d27a 	srli	r4,r5,9
    5344:	2000371e 	bne	r4,zero,5424 <_malloc_r+0x5ac>
    5348:	2808d0fa 	srli	r4,r5,3
    534c:	200690fa 	slli	r3,r4,3
    5350:	1ad1883a 	add	r8,r3,r11
    5354:	41800217 	ldw	r6,8(r8)
    5358:	41805b26 	beq	r8,r6,54c8 <_malloc_r+0x650>
    535c:	30800117 	ldw	r2,4(r6)
    5360:	00ffff04 	movi	r3,-4
    5364:	10c4703a 	and	r2,r2,r3
    5368:	2880022e 	bgeu	r5,r2,5374 <_malloc_r+0x4fc>
    536c:	31800217 	ldw	r6,8(r6)
    5370:	41bffa1e 	bne	r8,r6,535c <_malloc_r+0x4e4>
    5374:	32000317 	ldw	r8,12(r6)
    5378:	39c00117 	ldw	r7,4(r7)
    537c:	82000315 	stw	r8,12(r16)
    5380:	81800215 	stw	r6,8(r16)
    5384:	07000074 	movhi	fp,1
    5388:	e736a004 	addi	fp,fp,-9600
    538c:	34000315 	stw	r16,12(r6)
    5390:	44000215 	stw	r16,8(r8)
    5394:	003f3e06 	br	5090 <_malloc_r+0x218>
    5398:	63000044 	addi	r12,r12,1
    539c:	608000cc 	andi	r2,r12,3
    53a0:	10005d26 	beq	r2,zero,5518 <_malloc_r+0x6a0>
    53a4:	18c00204 	addi	r3,r3,8
    53a8:	003f5106 	br	50f0 <_malloc_r+0x278>
    53ac:	8089883a 	add	r4,r16,r2
    53b0:	003f6d06 	br	5168 <_malloc_r+0x2f0>
    53b4:	00805504 	movi	r2,340
    53b8:	10c02036 	bltu	r2,r3,543c <_malloc_r+0x5c4>
    53bc:	8804d3fa 	srli	r2,r17,15
    53c0:	11801dc4 	addi	r6,r2,119
    53c4:	300490fa 	slli	r2,r6,3
    53c8:	003ed806 	br	4f2c <_malloc_r+0xb4>
    53cc:	48c000c4 	addi	r3,r9,3
    53d0:	003f3106 	br	5098 <_malloc_r+0x220>
    53d4:	05c00074 	movhi	r23,1
    53d8:	bdc33a04 	addi	r23,r23,3304
    53dc:	b8800017 	ldw	r2,0(r23)
    53e0:	988d883a 	add	r6,r19,r2
    53e4:	b9800015 	stw	r6,0(r23)
    53e8:	293fb21e 	bne	r5,r4,52b4 <_malloc_r+0x43c>
    53ec:	2083ffcc 	andi	r2,r4,4095
    53f0:	103fb01e 	bne	r2,zero,52b4 <_malloc_r+0x43c>
    53f4:	e4000217 	ldw	r16,8(fp)
    53f8:	9d45883a 	add	r2,r19,r21
    53fc:	10800054 	ori	r2,r2,1
    5400:	80800115 	stw	r2,4(r16)
    5404:	b8c00017 	ldw	r3,0(r23)
    5408:	d0a6dc17 	ldw	r2,-25744(gp)
    540c:	10c0012e 	bgeu	r2,r3,5414 <_malloc_r+0x59c>
    5410:	d0e6dc15 	stw	r3,-25744(gp)
    5414:	d0a6dd17 	ldw	r2,-25740(gp)
    5418:	10ff962e 	bgeu	r2,r3,5274 <_malloc_r+0x3fc>
    541c:	d0e6dd15 	stw	r3,-25740(gp)
    5420:	003f9406 	br	5274 <_malloc_r+0x3fc>
    5424:	00800104 	movi	r2,4
    5428:	11001e36 	bltu	r2,r4,54a4 <_malloc_r+0x62c>
    542c:	2804d1ba 	srli	r2,r5,6
    5430:	11000e04 	addi	r4,r2,56
    5434:	200690fa 	slli	r3,r4,3
    5438:	003fc506 	br	5350 <_malloc_r+0x4d8>
    543c:	00815504 	movi	r2,1364
    5440:	10c01d2e 	bgeu	r2,r3,54b8 <_malloc_r+0x640>
    5444:	01801f84 	movi	r6,126
    5448:	0080fc04 	movi	r2,1008
    544c:	003eb706 	br	4f2c <_malloc_r+0xb4>
    5450:	00800204 	movi	r2,8
    5454:	10cbc83a 	sub	r5,r2,r3
    5458:	2169883a 	add	r20,r4,r5
    545c:	003f9e06 	br	52d8 <_malloc_r+0x460>
    5460:	00bffe04 	movi	r2,-8
    5464:	a93ffd04 	addi	r4,r21,-12
    5468:	2088703a 	and	r4,r4,r2
    546c:	b10b883a 	add	r5,r22,r4
    5470:	00c00144 	movi	r3,5
    5474:	28c00215 	stw	r3,8(r5)
    5478:	28c00115 	stw	r3,4(r5)
    547c:	b0800117 	ldw	r2,4(r22)
    5480:	1080004c 	andi	r2,r2,1
    5484:	2084b03a 	or	r2,r4,r2
    5488:	b0800115 	stw	r2,4(r22)
    548c:	313fdd2e 	bgeu	r6,r4,5404 <_malloc_r+0x58c>
    5490:	b1400204 	addi	r5,r22,8
    5494:	9009883a 	mov	r4,r18
    5498:	00042f00 	call	42f0 <_free_r>
    549c:	e4000217 	ldw	r16,8(fp)
    54a0:	003fd806 	br	5404 <_malloc_r+0x58c>
    54a4:	00800504 	movi	r2,20
    54a8:	11001536 	bltu	r2,r4,5500 <_malloc_r+0x688>
    54ac:	210016c4 	addi	r4,r4,91
    54b0:	200690fa 	slli	r3,r4,3
    54b4:	003fa606 	br	5350 <_malloc_r+0x4d8>
    54b8:	8804d4ba 	srli	r2,r17,18
    54bc:	11801f04 	addi	r6,r2,124
    54c0:	300490fa 	slli	r2,r6,3
    54c4:	003e9906 	br	4f2c <_malloc_r+0xb4>
    54c8:	2009d0ba 	srai	r4,r4,2
    54cc:	01400074 	movhi	r5,1
    54d0:	2976a004 	addi	r5,r5,-9600
    54d4:	00c00044 	movi	r3,1
    54d8:	28800117 	ldw	r2,4(r5)
    54dc:	1906983a 	sll	r3,r3,r4
    54e0:	10c4b03a 	or	r2,r2,r3
    54e4:	28800115 	stw	r2,4(r5)
    54e8:	003fa306 	br	5378 <_malloc_r+0x500>
    54ec:	0027883a 	mov	r19,zero
    54f0:	00c00044 	movi	r3,1
    54f4:	003f8606 	br	5310 <_malloc_r+0x498>
    54f8:	d1200515 	stw	r4,-32748(gp)
    54fc:	003f7306 	br	52cc <_malloc_r+0x454>
    5500:	00801504 	movi	r2,84
    5504:	11001936 	bltu	r2,r4,556c <_malloc_r+0x6f4>
    5508:	2804d33a 	srli	r2,r5,12
    550c:	11001b84 	addi	r4,r2,110
    5510:	200690fa 	slli	r3,r4,3
    5514:	003f8e06 	br	5350 <_malloc_r+0x4d8>
    5518:	480b883a 	mov	r5,r9
    551c:	6807883a 	mov	r3,r13
    5520:	288000cc 	andi	r2,r5,3
    5524:	18fffe04 	addi	r3,r3,-8
    5528:	297fffc4 	addi	r5,r5,-1
    552c:	10001526 	beq	r2,zero,5584 <_malloc_r+0x70c>
    5530:	18800217 	ldw	r2,8(r3)
    5534:	10fffa26 	beq	r2,r3,5520 <_malloc_r+0x6a8>
    5538:	2109883a 	add	r4,r4,r4
    553c:	393f1e36 	bltu	r7,r4,51b8 <_malloc_r+0x340>
    5540:	203f1d26 	beq	r4,zero,51b8 <_malloc_r+0x340>
    5544:	21c4703a 	and	r2,r4,r7
    5548:	10000226 	beq	r2,zero,5554 <_malloc_r+0x6dc>
    554c:	6013883a 	mov	r9,r12
    5550:	003ee106 	br	50d8 <_malloc_r+0x260>
    5554:	2109883a 	add	r4,r4,r4
    5558:	3904703a 	and	r2,r7,r4
    555c:	63000104 	addi	r12,r12,4
    5560:	103ffc26 	beq	r2,zero,5554 <_malloc_r+0x6dc>
    5564:	6013883a 	mov	r9,r12
    5568:	003edb06 	br	50d8 <_malloc_r+0x260>
    556c:	00805504 	movi	r2,340
    5570:	11000836 	bltu	r2,r4,5594 <_malloc_r+0x71c>
    5574:	2804d3fa 	srli	r2,r5,15
    5578:	11001dc4 	addi	r4,r2,119
    557c:	200690fa 	slli	r3,r4,3
    5580:	003f7306 	br	5350 <_malloc_r+0x4d8>
    5584:	0104303a 	nor	r2,zero,r4
    5588:	388e703a 	and	r7,r7,r2
    558c:	e1c00115 	stw	r7,4(fp)
    5590:	003fe906 	br	5538 <_malloc_r+0x6c0>
    5594:	00815504 	movi	r2,1364
    5598:	1100032e 	bgeu	r2,r4,55a8 <_malloc_r+0x730>
    559c:	01001f84 	movi	r4,126
    55a0:	00c0fc04 	movi	r3,1008
    55a4:	003f6a06 	br	5350 <_malloc_r+0x4d8>
    55a8:	2804d4ba 	srli	r2,r5,18
    55ac:	11001f04 	addi	r4,r2,124
    55b0:	200690fa 	slli	r3,r4,3
    55b4:	003f6606 	br	5350 <_malloc_r+0x4d8>

000055b8 <memchr>:
    55b8:	008000c4 	movi	r2,3
    55bc:	29403fcc 	andi	r5,r5,255
    55c0:	2007883a 	mov	r3,r4
    55c4:	1180022e 	bgeu	r2,r6,55d0 <memchr+0x18>
    55c8:	2084703a 	and	r2,r4,r2
    55cc:	10000b26 	beq	r2,zero,55fc <memchr+0x44>
    55d0:	313fffc4 	addi	r4,r6,-1
    55d4:	3000051e 	bne	r6,zero,55ec <memchr+0x34>
    55d8:	00002c06 	br	568c <memchr+0xd4>
    55dc:	213fffc4 	addi	r4,r4,-1
    55e0:	00bfffc4 	movi	r2,-1
    55e4:	18c00044 	addi	r3,r3,1
    55e8:	20802826 	beq	r4,r2,568c <memchr+0xd4>
    55ec:	18800003 	ldbu	r2,0(r3)
    55f0:	28bffa1e 	bne	r5,r2,55dc <memchr+0x24>
    55f4:	1805883a 	mov	r2,r3
    55f8:	f800283a 	ret
    55fc:	0011883a 	mov	r8,zero
    5600:	0007883a 	mov	r3,zero
    5604:	01c00104 	movi	r7,4
    5608:	4004923a 	slli	r2,r8,8
    560c:	18c00044 	addi	r3,r3,1
    5610:	1151883a 	add	r8,r2,r5
    5614:	19fffc1e 	bne	r3,r7,5608 <memchr+0x50>
    5618:	02bfbff4 	movhi	r10,65279
    561c:	52bfbfc4 	addi	r10,r10,-257
    5620:	02602074 	movhi	r9,32897
    5624:	4a602004 	addi	r9,r9,-32640
    5628:	02c000c4 	movi	r11,3
    562c:	20800017 	ldw	r2,0(r4)
    5630:	31bfff04 	addi	r6,r6,-4
    5634:	200f883a 	mov	r7,r4
    5638:	1204f03a 	xor	r2,r2,r8
    563c:	1287883a 	add	r3,r2,r10
    5640:	1a46703a 	and	r3,r3,r9
    5644:	0084303a 	nor	r2,zero,r2
    5648:	10c4703a 	and	r2,r2,r3
    564c:	10000b26 	beq	r2,zero,567c <memchr+0xc4>
    5650:	20800003 	ldbu	r2,0(r4)
    5654:	28800f26 	beq	r5,r2,5694 <memchr+0xdc>
    5658:	20800043 	ldbu	r2,1(r4)
    565c:	21c00044 	addi	r7,r4,1
    5660:	28800c26 	beq	r5,r2,5694 <memchr+0xdc>
    5664:	20800083 	ldbu	r2,2(r4)
    5668:	21c00084 	addi	r7,r4,2
    566c:	28800926 	beq	r5,r2,5694 <memchr+0xdc>
    5670:	208000c3 	ldbu	r2,3(r4)
    5674:	21c000c4 	addi	r7,r4,3
    5678:	28800626 	beq	r5,r2,5694 <memchr+0xdc>
    567c:	21000104 	addi	r4,r4,4
    5680:	59bfea36 	bltu	r11,r6,562c <memchr+0x74>
    5684:	2007883a 	mov	r3,r4
    5688:	003fd106 	br	55d0 <memchr+0x18>
    568c:	0005883a 	mov	r2,zero
    5690:	f800283a 	ret
    5694:	3805883a 	mov	r2,r7
    5698:	f800283a 	ret

0000569c <memcpy>:
    569c:	01c003c4 	movi	r7,15
    56a0:	2007883a 	mov	r3,r4
    56a4:	3980032e 	bgeu	r7,r6,56b4 <memcpy+0x18>
    56a8:	2904b03a 	or	r2,r5,r4
    56ac:	108000cc 	andi	r2,r2,3
    56b0:	10000926 	beq	r2,zero,56d8 <memcpy+0x3c>
    56b4:	30000626 	beq	r6,zero,56d0 <memcpy+0x34>
    56b8:	30cd883a 	add	r6,r6,r3
    56bc:	28800003 	ldbu	r2,0(r5)
    56c0:	29400044 	addi	r5,r5,1
    56c4:	18800005 	stb	r2,0(r3)
    56c8:	18c00044 	addi	r3,r3,1
    56cc:	30fffb1e 	bne	r6,r3,56bc <memcpy+0x20>
    56d0:	2005883a 	mov	r2,r4
    56d4:	f800283a 	ret
    56d8:	3811883a 	mov	r8,r7
    56dc:	200f883a 	mov	r7,r4
    56e0:	28c00017 	ldw	r3,0(r5)
    56e4:	31bffc04 	addi	r6,r6,-16
    56e8:	38c00015 	stw	r3,0(r7)
    56ec:	28800117 	ldw	r2,4(r5)
    56f0:	38800115 	stw	r2,4(r7)
    56f4:	28c00217 	ldw	r3,8(r5)
    56f8:	38c00215 	stw	r3,8(r7)
    56fc:	28800317 	ldw	r2,12(r5)
    5700:	29400404 	addi	r5,r5,16
    5704:	38800315 	stw	r2,12(r7)
    5708:	39c00404 	addi	r7,r7,16
    570c:	41bff436 	bltu	r8,r6,56e0 <memcpy+0x44>
    5710:	008000c4 	movi	r2,3
    5714:	1180072e 	bgeu	r2,r6,5734 <memcpy+0x98>
    5718:	1007883a 	mov	r3,r2
    571c:	28800017 	ldw	r2,0(r5)
    5720:	31bfff04 	addi	r6,r6,-4
    5724:	29400104 	addi	r5,r5,4
    5728:	38800015 	stw	r2,0(r7)
    572c:	39c00104 	addi	r7,r7,4
    5730:	19bffa36 	bltu	r3,r6,571c <memcpy+0x80>
    5734:	3807883a 	mov	r3,r7
    5738:	003fde06 	br	56b4 <memcpy+0x18>

0000573c <memmove>:
    573c:	2807883a 	mov	r3,r5
    5740:	2011883a 	mov	r8,r4
    5744:	29000c2e 	bgeu	r5,r4,5778 <memmove+0x3c>
    5748:	298f883a 	add	r7,r5,r6
    574c:	21c00a2e 	bgeu	r4,r7,5778 <memmove+0x3c>
    5750:	30000726 	beq	r6,zero,5770 <memmove+0x34>
    5754:	2187883a 	add	r3,r4,r6
    5758:	198dc83a 	sub	r6,r3,r6
    575c:	39ffffc4 	addi	r7,r7,-1
    5760:	38800003 	ldbu	r2,0(r7)
    5764:	18ffffc4 	addi	r3,r3,-1
    5768:	18800005 	stb	r2,0(r3)
    576c:	19bffb1e 	bne	r3,r6,575c <memmove+0x20>
    5770:	2005883a 	mov	r2,r4
    5774:	f800283a 	ret
    5778:	01c003c4 	movi	r7,15
    577c:	39800a36 	bltu	r7,r6,57a8 <memmove+0x6c>
    5780:	303ffb26 	beq	r6,zero,5770 <memmove+0x34>
    5784:	400f883a 	mov	r7,r8
    5788:	320d883a 	add	r6,r6,r8
    578c:	28800003 	ldbu	r2,0(r5)
    5790:	29400044 	addi	r5,r5,1
    5794:	38800005 	stb	r2,0(r7)
    5798:	39c00044 	addi	r7,r7,1
    579c:	39bffb1e 	bne	r7,r6,578c <memmove+0x50>
    57a0:	2005883a 	mov	r2,r4
    57a4:	f800283a 	ret
    57a8:	1904b03a 	or	r2,r3,r4
    57ac:	108000cc 	andi	r2,r2,3
    57b0:	103ff31e 	bne	r2,zero,5780 <memmove+0x44>
    57b4:	3811883a 	mov	r8,r7
    57b8:	180b883a 	mov	r5,r3
    57bc:	200f883a 	mov	r7,r4
    57c0:	28c00017 	ldw	r3,0(r5)
    57c4:	31bffc04 	addi	r6,r6,-16
    57c8:	38c00015 	stw	r3,0(r7)
    57cc:	28800117 	ldw	r2,4(r5)
    57d0:	38800115 	stw	r2,4(r7)
    57d4:	28c00217 	ldw	r3,8(r5)
    57d8:	38c00215 	stw	r3,8(r7)
    57dc:	28800317 	ldw	r2,12(r5)
    57e0:	29400404 	addi	r5,r5,16
    57e4:	38800315 	stw	r2,12(r7)
    57e8:	39c00404 	addi	r7,r7,16
    57ec:	41bff436 	bltu	r8,r6,57c0 <memmove+0x84>
    57f0:	008000c4 	movi	r2,3
    57f4:	1180072e 	bgeu	r2,r6,5814 <memmove+0xd8>
    57f8:	1007883a 	mov	r3,r2
    57fc:	28800017 	ldw	r2,0(r5)
    5800:	31bfff04 	addi	r6,r6,-4
    5804:	29400104 	addi	r5,r5,4
    5808:	38800015 	stw	r2,0(r7)
    580c:	39c00104 	addi	r7,r7,4
    5810:	19bffa36 	bltu	r3,r6,57fc <memmove+0xc0>
    5814:	3811883a 	mov	r8,r7
    5818:	003fd906 	br	5780 <memmove+0x44>

0000581c <memset>:
    581c:	008000c4 	movi	r2,3
    5820:	29403fcc 	andi	r5,r5,255
    5824:	2007883a 	mov	r3,r4
    5828:	1180022e 	bgeu	r2,r6,5834 <memset+0x18>
    582c:	2084703a 	and	r2,r4,r2
    5830:	10000826 	beq	r2,zero,5854 <memset+0x38>
    5834:	30000526 	beq	r6,zero,584c <memset+0x30>
    5838:	2805883a 	mov	r2,r5
    583c:	30cd883a 	add	r6,r6,r3
    5840:	18800005 	stb	r2,0(r3)
    5844:	18c00044 	addi	r3,r3,1
    5848:	19bffd1e 	bne	r3,r6,5840 <memset+0x24>
    584c:	2005883a 	mov	r2,r4
    5850:	f800283a 	ret
    5854:	2804923a 	slli	r2,r5,8
    5858:	020003c4 	movi	r8,15
    585c:	200f883a 	mov	r7,r4
    5860:	2884b03a 	or	r2,r5,r2
    5864:	1006943a 	slli	r3,r2,16
    5868:	10c6b03a 	or	r3,r2,r3
    586c:	41800a2e 	bgeu	r8,r6,5898 <memset+0x7c>
    5870:	4005883a 	mov	r2,r8
    5874:	31bffc04 	addi	r6,r6,-16
    5878:	38c00015 	stw	r3,0(r7)
    587c:	38c00115 	stw	r3,4(r7)
    5880:	38c00215 	stw	r3,8(r7)
    5884:	38c00315 	stw	r3,12(r7)
    5888:	39c00404 	addi	r7,r7,16
    588c:	11bff936 	bltu	r2,r6,5874 <memset+0x58>
    5890:	008000c4 	movi	r2,3
    5894:	1180052e 	bgeu	r2,r6,58ac <memset+0x90>
    5898:	31bfff04 	addi	r6,r6,-4
    589c:	008000c4 	movi	r2,3
    58a0:	38c00015 	stw	r3,0(r7)
    58a4:	39c00104 	addi	r7,r7,4
    58a8:	11bffb36 	bltu	r2,r6,5898 <memset+0x7c>
    58ac:	3807883a 	mov	r3,r7
    58b0:	003fe006 	br	5834 <memset+0x18>

000058b4 <_Bfree>:
    58b4:	28000826 	beq	r5,zero,58d8 <_Bfree+0x24>
    58b8:	28800117 	ldw	r2,4(r5)
    58bc:	21001317 	ldw	r4,76(r4)
    58c0:	1085883a 	add	r2,r2,r2
    58c4:	1085883a 	add	r2,r2,r2
    58c8:	1105883a 	add	r2,r2,r4
    58cc:	10c00017 	ldw	r3,0(r2)
    58d0:	28c00015 	stw	r3,0(r5)
    58d4:	11400015 	stw	r5,0(r2)
    58d8:	f800283a 	ret

000058dc <__hi0bits>:
    58dc:	20bfffec 	andhi	r2,r4,65535
    58e0:	10001426 	beq	r2,zero,5934 <__hi0bits+0x58>
    58e4:	0007883a 	mov	r3,zero
    58e8:	20bfc02c 	andhi	r2,r4,65280
    58ec:	1000021e 	bne	r2,zero,58f8 <__hi0bits+0x1c>
    58f0:	2008923a 	slli	r4,r4,8
    58f4:	18c00204 	addi	r3,r3,8
    58f8:	20bc002c 	andhi	r2,r4,61440
    58fc:	1000021e 	bne	r2,zero,5908 <__hi0bits+0x2c>
    5900:	2008913a 	slli	r4,r4,4
    5904:	18c00104 	addi	r3,r3,4
    5908:	20b0002c 	andhi	r2,r4,49152
    590c:	1000031e 	bne	r2,zero,591c <__hi0bits+0x40>
    5910:	2105883a 	add	r2,r4,r4
    5914:	18c00084 	addi	r3,r3,2
    5918:	1089883a 	add	r4,r2,r2
    591c:	20000316 	blt	r4,zero,592c <__hi0bits+0x50>
    5920:	2090002c 	andhi	r2,r4,16384
    5924:	10000626 	beq	r2,zero,5940 <__hi0bits+0x64>
    5928:	18c00044 	addi	r3,r3,1
    592c:	1805883a 	mov	r2,r3
    5930:	f800283a 	ret
    5934:	2008943a 	slli	r4,r4,16
    5938:	00c00404 	movi	r3,16
    593c:	003fea06 	br	58e8 <__hi0bits+0xc>
    5940:	00c00804 	movi	r3,32
    5944:	1805883a 	mov	r2,r3
    5948:	f800283a 	ret

0000594c <__lo0bits>:
    594c:	20c00017 	ldw	r3,0(r4)
    5950:	188001cc 	andi	r2,r3,7
    5954:	10000a26 	beq	r2,zero,5980 <__lo0bits+0x34>
    5958:	1880004c 	andi	r2,r3,1
    595c:	1005003a 	cmpeq	r2,r2,zero
    5960:	10002126 	beq	r2,zero,59e8 <__lo0bits+0x9c>
    5964:	1880008c 	andi	r2,r3,2
    5968:	1000251e 	bne	r2,zero,5a00 <__lo0bits+0xb4>
    596c:	1804d0ba 	srli	r2,r3,2
    5970:	01400084 	movi	r5,2
    5974:	20800015 	stw	r2,0(r4)
    5978:	2805883a 	mov	r2,r5
    597c:	f800283a 	ret
    5980:	18bfffcc 	andi	r2,r3,65535
    5984:	10001526 	beq	r2,zero,59dc <__lo0bits+0x90>
    5988:	000b883a 	mov	r5,zero
    598c:	18803fcc 	andi	r2,r3,255
    5990:	1000021e 	bne	r2,zero,599c <__lo0bits+0x50>
    5994:	1806d23a 	srli	r3,r3,8
    5998:	29400204 	addi	r5,r5,8
    599c:	188003cc 	andi	r2,r3,15
    59a0:	1000021e 	bne	r2,zero,59ac <__lo0bits+0x60>
    59a4:	1806d13a 	srli	r3,r3,4
    59a8:	29400104 	addi	r5,r5,4
    59ac:	188000cc 	andi	r2,r3,3
    59b0:	1000021e 	bne	r2,zero,59bc <__lo0bits+0x70>
    59b4:	1806d0ba 	srli	r3,r3,2
    59b8:	29400084 	addi	r5,r5,2
    59bc:	1880004c 	andi	r2,r3,1
    59c0:	1000031e 	bne	r2,zero,59d0 <__lo0bits+0x84>
    59c4:	1806d07a 	srli	r3,r3,1
    59c8:	18000a26 	beq	r3,zero,59f4 <__lo0bits+0xa8>
    59cc:	29400044 	addi	r5,r5,1
    59d0:	2805883a 	mov	r2,r5
    59d4:	20c00015 	stw	r3,0(r4)
    59d8:	f800283a 	ret
    59dc:	1806d43a 	srli	r3,r3,16
    59e0:	01400404 	movi	r5,16
    59e4:	003fe906 	br	598c <__lo0bits+0x40>
    59e8:	000b883a 	mov	r5,zero
    59ec:	2805883a 	mov	r2,r5
    59f0:	f800283a 	ret
    59f4:	01400804 	movi	r5,32
    59f8:	2805883a 	mov	r2,r5
    59fc:	f800283a 	ret
    5a00:	1804d07a 	srli	r2,r3,1
    5a04:	01400044 	movi	r5,1
    5a08:	20800015 	stw	r2,0(r4)
    5a0c:	003fda06 	br	5978 <__lo0bits+0x2c>

00005a10 <__mcmp>:
    5a10:	20800417 	ldw	r2,16(r4)
    5a14:	28c00417 	ldw	r3,16(r5)
    5a18:	10cfc83a 	sub	r7,r2,r3
    5a1c:	38000c1e 	bne	r7,zero,5a50 <__mcmp+0x40>
    5a20:	18c5883a 	add	r2,r3,r3
    5a24:	1085883a 	add	r2,r2,r2
    5a28:	10c00504 	addi	r3,r2,20
    5a2c:	21000504 	addi	r4,r4,20
    5a30:	28cb883a 	add	r5,r5,r3
    5a34:	2085883a 	add	r2,r4,r2
    5a38:	10bfff04 	addi	r2,r2,-4
    5a3c:	297fff04 	addi	r5,r5,-4
    5a40:	11800017 	ldw	r6,0(r2)
    5a44:	28c00017 	ldw	r3,0(r5)
    5a48:	30c0031e 	bne	r6,r3,5a58 <__mcmp+0x48>
    5a4c:	20bffa36 	bltu	r4,r2,5a38 <__mcmp+0x28>
    5a50:	3805883a 	mov	r2,r7
    5a54:	f800283a 	ret
    5a58:	30c00336 	bltu	r6,r3,5a68 <__mcmp+0x58>
    5a5c:	01c00044 	movi	r7,1
    5a60:	3805883a 	mov	r2,r7
    5a64:	f800283a 	ret
    5a68:	01ffffc4 	movi	r7,-1
    5a6c:	003ff806 	br	5a50 <__mcmp+0x40>

00005a70 <__ulp>:
    5a70:	295ffc2c 	andhi	r5,r5,32752
    5a74:	013f3034 	movhi	r4,64704
    5a78:	290b883a 	add	r5,r5,r4
    5a7c:	0145c83a 	sub	r2,zero,r5
    5a80:	1007d53a 	srai	r3,r2,20
    5a84:	000d883a 	mov	r6,zero
    5a88:	0140040e 	bge	zero,r5,5a9c <__ulp+0x2c>
    5a8c:	280f883a 	mov	r7,r5
    5a90:	3807883a 	mov	r3,r7
    5a94:	3005883a 	mov	r2,r6
    5a98:	f800283a 	ret
    5a9c:	008004c4 	movi	r2,19
    5aa0:	193ffb04 	addi	r4,r3,-20
    5aa4:	10c00c0e 	bge	r2,r3,5ad8 <__ulp+0x68>
    5aa8:	008007c4 	movi	r2,31
    5aac:	1107c83a 	sub	r3,r2,r4
    5ab0:	00800784 	movi	r2,30
    5ab4:	01400044 	movi	r5,1
    5ab8:	11000216 	blt	r2,r4,5ac4 <__ulp+0x54>
    5abc:	00800044 	movi	r2,1
    5ac0:	10ca983a 	sll	r5,r2,r3
    5ac4:	000f883a 	mov	r7,zero
    5ac8:	280d883a 	mov	r6,r5
    5acc:	3807883a 	mov	r3,r7
    5ad0:	3005883a 	mov	r2,r6
    5ad4:	f800283a 	ret
    5ad8:	00800234 	movhi	r2,8
    5adc:	10cfd83a 	sra	r7,r2,r3
    5ae0:	000d883a 	mov	r6,zero
    5ae4:	3005883a 	mov	r2,r6
    5ae8:	3807883a 	mov	r3,r7
    5aec:	f800283a 	ret

00005af0 <__b2d>:
    5af0:	20800417 	ldw	r2,16(r4)
    5af4:	defff904 	addi	sp,sp,-28
    5af8:	dd000415 	stw	r20,16(sp)
    5afc:	1085883a 	add	r2,r2,r2
    5b00:	25000504 	addi	r20,r4,20
    5b04:	1085883a 	add	r2,r2,r2
    5b08:	dc000015 	stw	r16,0(sp)
    5b0c:	a0a1883a 	add	r16,r20,r2
    5b10:	dd400515 	stw	r21,20(sp)
    5b14:	857fff17 	ldw	r21,-4(r16)
    5b18:	dc400115 	stw	r17,4(sp)
    5b1c:	dfc00615 	stw	ra,24(sp)
    5b20:	a809883a 	mov	r4,r21
    5b24:	2823883a 	mov	r17,r5
    5b28:	dcc00315 	stw	r19,12(sp)
    5b2c:	dc800215 	stw	r18,8(sp)
    5b30:	00058dc0 	call	58dc <__hi0bits>
    5b34:	100b883a 	mov	r5,r2
    5b38:	00800804 	movi	r2,32
    5b3c:	1145c83a 	sub	r2,r2,r5
    5b40:	88800015 	stw	r2,0(r17)
    5b44:	00800284 	movi	r2,10
    5b48:	80ffff04 	addi	r3,r16,-4
    5b4c:	11401416 	blt	r2,r5,5ba0 <__b2d+0xb0>
    5b50:	008002c4 	movi	r2,11
    5b54:	1149c83a 	sub	r4,r2,r5
    5b58:	a0c02736 	bltu	r20,r3,5bf8 <__b2d+0x108>
    5b5c:	000d883a 	mov	r6,zero
    5b60:	28800544 	addi	r2,r5,21
    5b64:	a906d83a 	srl	r3,r21,r4
    5b68:	a884983a 	sll	r2,r21,r2
    5b6c:	1ccffc34 	orhi	r19,r3,16368
    5b70:	11a4b03a 	or	r18,r2,r6
    5b74:	9005883a 	mov	r2,r18
    5b78:	9807883a 	mov	r3,r19
    5b7c:	dfc00617 	ldw	ra,24(sp)
    5b80:	dd400517 	ldw	r21,20(sp)
    5b84:	dd000417 	ldw	r20,16(sp)
    5b88:	dcc00317 	ldw	r19,12(sp)
    5b8c:	dc800217 	ldw	r18,8(sp)
    5b90:	dc400117 	ldw	r17,4(sp)
    5b94:	dc000017 	ldw	r16,0(sp)
    5b98:	dec00704 	addi	sp,sp,28
    5b9c:	f800283a 	ret
    5ba0:	a0c00e36 	bltu	r20,r3,5bdc <__b2d+0xec>
    5ba4:	293ffd44 	addi	r4,r5,-11
    5ba8:	000d883a 	mov	r6,zero
    5bac:	20000f26 	beq	r4,zero,5bec <__b2d+0xfc>
    5bb0:	00800804 	movi	r2,32
    5bb4:	110bc83a 	sub	r5,r2,r4
    5bb8:	a0c01236 	bltu	r20,r3,5c04 <__b2d+0x114>
    5bbc:	000f883a 	mov	r7,zero
    5bc0:	a904983a 	sll	r2,r21,r4
    5bc4:	3146d83a 	srl	r3,r6,r5
    5bc8:	3108983a 	sll	r4,r6,r4
    5bcc:	108ffc34 	orhi	r2,r2,16368
    5bd0:	18a6b03a 	or	r19,r3,r2
    5bd4:	3924b03a 	or	r18,r7,r4
    5bd8:	003fe606 	br	5b74 <__b2d+0x84>
    5bdc:	293ffd44 	addi	r4,r5,-11
    5be0:	81bffe17 	ldw	r6,-8(r16)
    5be4:	80fffe04 	addi	r3,r16,-8
    5be8:	203ff11e 	bne	r4,zero,5bb0 <__b2d+0xc0>
    5bec:	accffc34 	orhi	r19,r21,16368
    5bf0:	3025883a 	mov	r18,r6
    5bf4:	003fdf06 	br	5b74 <__b2d+0x84>
    5bf8:	18bfff17 	ldw	r2,-4(r3)
    5bfc:	110cd83a 	srl	r6,r2,r4
    5c00:	003fd706 	br	5b60 <__b2d+0x70>
    5c04:	18bfff17 	ldw	r2,-4(r3)
    5c08:	114ed83a 	srl	r7,r2,r5
    5c0c:	003fec06 	br	5bc0 <__b2d+0xd0>

00005c10 <__ratio>:
    5c10:	defff904 	addi	sp,sp,-28
    5c14:	dc400215 	stw	r17,8(sp)
    5c18:	2823883a 	mov	r17,r5
    5c1c:	d80b883a 	mov	r5,sp
    5c20:	dfc00615 	stw	ra,24(sp)
    5c24:	dd000515 	stw	r20,20(sp)
    5c28:	dcc00415 	stw	r19,16(sp)
    5c2c:	dc800315 	stw	r18,12(sp)
    5c30:	2025883a 	mov	r18,r4
    5c34:	0005af00 	call	5af0 <__b2d>
    5c38:	8809883a 	mov	r4,r17
    5c3c:	d9400104 	addi	r5,sp,4
    5c40:	1027883a 	mov	r19,r2
    5c44:	1829883a 	mov	r20,r3
    5c48:	0005af00 	call	5af0 <__b2d>
    5c4c:	89000417 	ldw	r4,16(r17)
    5c50:	91c00417 	ldw	r7,16(r18)
    5c54:	d9800117 	ldw	r6,4(sp)
    5c58:	180b883a 	mov	r5,r3
    5c5c:	390fc83a 	sub	r7,r7,r4
    5c60:	1009883a 	mov	r4,r2
    5c64:	d8800017 	ldw	r2,0(sp)
    5c68:	380e917a 	slli	r7,r7,5
    5c6c:	2011883a 	mov	r8,r4
    5c70:	1185c83a 	sub	r2,r2,r6
    5c74:	11c5883a 	add	r2,r2,r7
    5c78:	1006953a 	slli	r3,r2,20
    5c7c:	2813883a 	mov	r9,r5
    5c80:	00800d0e 	bge	zero,r2,5cb8 <__ratio+0xa8>
    5c84:	1d29883a 	add	r20,r3,r20
    5c88:	a00b883a 	mov	r5,r20
    5c8c:	480f883a 	mov	r7,r9
    5c90:	9809883a 	mov	r4,r19
    5c94:	400d883a 	mov	r6,r8
    5c98:	0008ccc0 	call	8ccc <__divdf3>
    5c9c:	dfc00617 	ldw	ra,24(sp)
    5ca0:	dd000517 	ldw	r20,20(sp)
    5ca4:	dcc00417 	ldw	r19,16(sp)
    5ca8:	dc800317 	ldw	r18,12(sp)
    5cac:	dc400217 	ldw	r17,8(sp)
    5cb0:	dec00704 	addi	sp,sp,28
    5cb4:	f800283a 	ret
    5cb8:	28d3c83a 	sub	r9,r5,r3
    5cbc:	003ff206 	br	5c88 <__ratio+0x78>

00005cc0 <_mprec_log10>:
    5cc0:	defffe04 	addi	sp,sp,-8
    5cc4:	008005c4 	movi	r2,23
    5cc8:	dc000015 	stw	r16,0(sp)
    5ccc:	dfc00115 	stw	ra,4(sp)
    5cd0:	2021883a 	mov	r16,r4
    5cd4:	11000c16 	blt	r2,r4,5d08 <_mprec_log10+0x48>
    5cd8:	200490fa 	slli	r2,r4,3
    5cdc:	00c00074 	movhi	r3,1
    5ce0:	18f4ff04 	addi	r3,r3,-11268
    5ce4:	10c5883a 	add	r2,r2,r3
    5ce8:	12400117 	ldw	r9,4(r2)
    5cec:	12000017 	ldw	r8,0(r2)
    5cf0:	4807883a 	mov	r3,r9
    5cf4:	4005883a 	mov	r2,r8
    5cf8:	dfc00117 	ldw	ra,4(sp)
    5cfc:	dc000017 	ldw	r16,0(sp)
    5d00:	dec00204 	addi	sp,sp,8
    5d04:	f800283a 	ret
    5d08:	0011883a 	mov	r8,zero
    5d0c:	024ffc34 	movhi	r9,16368
    5d10:	0005883a 	mov	r2,zero
    5d14:	00d00934 	movhi	r3,16420
    5d18:	480b883a 	mov	r5,r9
    5d1c:	4009883a 	mov	r4,r8
    5d20:	180f883a 	mov	r7,r3
    5d24:	100d883a 	mov	r6,r2
    5d28:	00089080 	call	8908 <__muldf3>
    5d2c:	843fffc4 	addi	r16,r16,-1
    5d30:	1011883a 	mov	r8,r2
    5d34:	1813883a 	mov	r9,r3
    5d38:	803ff51e 	bne	r16,zero,5d10 <_mprec_log10+0x50>
    5d3c:	4005883a 	mov	r2,r8
    5d40:	4807883a 	mov	r3,r9
    5d44:	dfc00117 	ldw	ra,4(sp)
    5d48:	dc000017 	ldw	r16,0(sp)
    5d4c:	dec00204 	addi	sp,sp,8
    5d50:	f800283a 	ret

00005d54 <__copybits>:
    5d54:	297fffc4 	addi	r5,r5,-1
    5d58:	30800417 	ldw	r2,16(r6)
    5d5c:	280bd17a 	srai	r5,r5,5
    5d60:	31800504 	addi	r6,r6,20
    5d64:	1085883a 	add	r2,r2,r2
    5d68:	294b883a 	add	r5,r5,r5
    5d6c:	294b883a 	add	r5,r5,r5
    5d70:	1085883a 	add	r2,r2,r2
    5d74:	290b883a 	add	r5,r5,r4
    5d78:	3087883a 	add	r3,r6,r2
    5d7c:	29400104 	addi	r5,r5,4
    5d80:	30c0052e 	bgeu	r6,r3,5d98 <__copybits+0x44>
    5d84:	30800017 	ldw	r2,0(r6)
    5d88:	31800104 	addi	r6,r6,4
    5d8c:	20800015 	stw	r2,0(r4)
    5d90:	21000104 	addi	r4,r4,4
    5d94:	30fffb36 	bltu	r6,r3,5d84 <__copybits+0x30>
    5d98:	2140032e 	bgeu	r4,r5,5da8 <__copybits+0x54>
    5d9c:	20000015 	stw	zero,0(r4)
    5da0:	21000104 	addi	r4,r4,4
    5da4:	217ffd36 	bltu	r4,r5,5d9c <__copybits+0x48>
    5da8:	f800283a 	ret

00005dac <__any_on>:
    5dac:	20800417 	ldw	r2,16(r4)
    5db0:	2807d17a 	srai	r3,r5,5
    5db4:	21000504 	addi	r4,r4,20
    5db8:	10c00d0e 	bge	r2,r3,5df0 <__any_on+0x44>
    5dbc:	1085883a 	add	r2,r2,r2
    5dc0:	1085883a 	add	r2,r2,r2
    5dc4:	208d883a 	add	r6,r4,r2
    5dc8:	2180182e 	bgeu	r4,r6,5e2c <__any_on+0x80>
    5dcc:	30bfff17 	ldw	r2,-4(r6)
    5dd0:	30ffff04 	addi	r3,r6,-4
    5dd4:	1000041e 	bne	r2,zero,5de8 <__any_on+0x3c>
    5dd8:	20c0142e 	bgeu	r4,r3,5e2c <__any_on+0x80>
    5ddc:	18ffff04 	addi	r3,r3,-4
    5de0:	18800017 	ldw	r2,0(r3)
    5de4:	103ffc26 	beq	r2,zero,5dd8 <__any_on+0x2c>
    5de8:	00800044 	movi	r2,1
    5dec:	f800283a 	ret
    5df0:	18800a0e 	bge	r3,r2,5e1c <__any_on+0x70>
    5df4:	294007cc 	andi	r5,r5,31
    5df8:	28000826 	beq	r5,zero,5e1c <__any_on+0x70>
    5dfc:	18c5883a 	add	r2,r3,r3
    5e00:	1085883a 	add	r2,r2,r2
    5e04:	208d883a 	add	r6,r4,r2
    5e08:	30c00017 	ldw	r3,0(r6)
    5e0c:	1944d83a 	srl	r2,r3,r5
    5e10:	1144983a 	sll	r2,r2,r5
    5e14:	18bff41e 	bne	r3,r2,5de8 <__any_on+0x3c>
    5e18:	003feb06 	br	5dc8 <__any_on+0x1c>
    5e1c:	18c5883a 	add	r2,r3,r3
    5e20:	1085883a 	add	r2,r2,r2
    5e24:	208d883a 	add	r6,r4,r2
    5e28:	003fe706 	br	5dc8 <__any_on+0x1c>
    5e2c:	0005883a 	mov	r2,zero
    5e30:	f800283a 	ret

00005e34 <_Balloc>:
    5e34:	20c01317 	ldw	r3,76(r4)
    5e38:	defffb04 	addi	sp,sp,-20
    5e3c:	dcc00315 	stw	r19,12(sp)
    5e40:	dc800215 	stw	r18,8(sp)
    5e44:	dfc00415 	stw	ra,16(sp)
    5e48:	2825883a 	mov	r18,r5
    5e4c:	dc400115 	stw	r17,4(sp)
    5e50:	dc000015 	stw	r16,0(sp)
    5e54:	2027883a 	mov	r19,r4
    5e58:	01800404 	movi	r6,16
    5e5c:	01400104 	movi	r5,4
    5e60:	18001726 	beq	r3,zero,5ec0 <_Balloc+0x8c>
    5e64:	01400044 	movi	r5,1
    5e68:	9485883a 	add	r2,r18,r18
    5e6c:	2ca2983a 	sll	r17,r5,r18
    5e70:	1085883a 	add	r2,r2,r2
    5e74:	10c7883a 	add	r3,r2,r3
    5e78:	1c000017 	ldw	r16,0(r3)
    5e7c:	8c4d883a 	add	r6,r17,r17
    5e80:	318d883a 	add	r6,r6,r6
    5e84:	9809883a 	mov	r4,r19
    5e88:	31800504 	addi	r6,r6,20
    5e8c:	80001226 	beq	r16,zero,5ed8 <_Balloc+0xa4>
    5e90:	80800017 	ldw	r2,0(r16)
    5e94:	18800015 	stw	r2,0(r3)
    5e98:	80000415 	stw	zero,16(r16)
    5e9c:	80000315 	stw	zero,12(r16)
    5ea0:	8005883a 	mov	r2,r16
    5ea4:	dfc00417 	ldw	ra,16(sp)
    5ea8:	dcc00317 	ldw	r19,12(sp)
    5eac:	dc800217 	ldw	r18,8(sp)
    5eb0:	dc400117 	ldw	r17,4(sp)
    5eb4:	dc000017 	ldw	r16,0(sp)
    5eb8:	dec00504 	addi	sp,sp,20
    5ebc:	f800283a 	ret
    5ec0:	00073080 	call	7308 <_calloc_r>
    5ec4:	1007883a 	mov	r3,r2
    5ec8:	0021883a 	mov	r16,zero
    5ecc:	98801315 	stw	r2,76(r19)
    5ed0:	103fe41e 	bne	r2,zero,5e64 <_Balloc+0x30>
    5ed4:	003ff206 	br	5ea0 <_Balloc+0x6c>
    5ed8:	00073080 	call	7308 <_calloc_r>
    5edc:	103ff026 	beq	r2,zero,5ea0 <_Balloc+0x6c>
    5ee0:	1021883a 	mov	r16,r2
    5ee4:	14800115 	stw	r18,4(r2)
    5ee8:	14400215 	stw	r17,8(r2)
    5eec:	003fea06 	br	5e98 <_Balloc+0x64>

00005ef0 <__d2b>:
    5ef0:	defff504 	addi	sp,sp,-44
    5ef4:	dcc00515 	stw	r19,20(sp)
    5ef8:	04c00044 	movi	r19,1
    5efc:	dc000215 	stw	r16,8(sp)
    5f00:	2821883a 	mov	r16,r5
    5f04:	980b883a 	mov	r5,r19
    5f08:	ddc00915 	stw	r23,36(sp)
    5f0c:	dd800815 	stw	r22,32(sp)
    5f10:	dd400715 	stw	r21,28(sp)
    5f14:	dd000615 	stw	r20,24(sp)
    5f18:	dc800415 	stw	r18,16(sp)
    5f1c:	dc400315 	stw	r17,12(sp)
    5f20:	dfc00a15 	stw	ra,40(sp)
    5f24:	3023883a 	mov	r17,r6
    5f28:	382d883a 	mov	r22,r7
    5f2c:	ddc00b17 	ldw	r23,44(sp)
    5f30:	0005e340 	call	5e34 <_Balloc>
    5f34:	1025883a 	mov	r18,r2
    5f38:	00a00034 	movhi	r2,32768
    5f3c:	10bfffc4 	addi	r2,r2,-1
    5f40:	8888703a 	and	r4,r17,r2
    5f44:	202ad53a 	srli	r21,r4,20
    5f48:	00800434 	movhi	r2,16
    5f4c:	10bfffc4 	addi	r2,r2,-1
    5f50:	8886703a 	and	r3,r17,r2
    5f54:	a829003a 	cmpeq	r20,r21,zero
    5f58:	800b883a 	mov	r5,r16
    5f5c:	d8c00115 	stw	r3,4(sp)
    5f60:	94000504 	addi	r16,r18,20
    5f64:	a000021e 	bne	r20,zero,5f70 <__d2b+0x80>
    5f68:	18c00434 	orhi	r3,r3,16
    5f6c:	d8c00115 	stw	r3,4(sp)
    5f70:	28002726 	beq	r5,zero,6010 <__d2b+0x120>
    5f74:	d809883a 	mov	r4,sp
    5f78:	d9400015 	stw	r5,0(sp)
    5f7c:	000594c0 	call	594c <__lo0bits>
    5f80:	100d883a 	mov	r6,r2
    5f84:	10003526 	beq	r2,zero,605c <__d2b+0x16c>
    5f88:	d8c00117 	ldw	r3,4(sp)
    5f8c:	00800804 	movi	r2,32
    5f90:	1185c83a 	sub	r2,r2,r6
    5f94:	d9000017 	ldw	r4,0(sp)
    5f98:	1886983a 	sll	r3,r3,r2
    5f9c:	1906b03a 	or	r3,r3,r4
    5fa0:	90c00515 	stw	r3,20(r18)
    5fa4:	d8c00117 	ldw	r3,4(sp)
    5fa8:	1986d83a 	srl	r3,r3,r6
    5fac:	d8c00115 	stw	r3,4(sp)
    5fb0:	180b003a 	cmpeq	r5,r3,zero
    5fb4:	00800084 	movi	r2,2
    5fb8:	114bc83a 	sub	r5,r2,r5
    5fbc:	80c00115 	stw	r3,4(r16)
    5fc0:	91400415 	stw	r5,16(r18)
    5fc4:	a0001a1e 	bne	r20,zero,6030 <__d2b+0x140>
    5fc8:	3545883a 	add	r2,r6,r21
    5fcc:	10bef344 	addi	r2,r2,-1075
    5fd0:	00c00d44 	movi	r3,53
    5fd4:	b0800015 	stw	r2,0(r22)
    5fd8:	1987c83a 	sub	r3,r3,r6
    5fdc:	b8c00015 	stw	r3,0(r23)
    5fe0:	9005883a 	mov	r2,r18
    5fe4:	dfc00a17 	ldw	ra,40(sp)
    5fe8:	ddc00917 	ldw	r23,36(sp)
    5fec:	dd800817 	ldw	r22,32(sp)
    5ff0:	dd400717 	ldw	r21,28(sp)
    5ff4:	dd000617 	ldw	r20,24(sp)
    5ff8:	dcc00517 	ldw	r19,20(sp)
    5ffc:	dc800417 	ldw	r18,16(sp)
    6000:	dc400317 	ldw	r17,12(sp)
    6004:	dc000217 	ldw	r16,8(sp)
    6008:	dec00b04 	addi	sp,sp,44
    600c:	f800283a 	ret
    6010:	d9000104 	addi	r4,sp,4
    6014:	000594c0 	call	594c <__lo0bits>
    6018:	11800804 	addi	r6,r2,32
    601c:	d8800117 	ldw	r2,4(sp)
    6020:	94c00415 	stw	r19,16(r18)
    6024:	980b883a 	mov	r5,r19
    6028:	90800515 	stw	r2,20(r18)
    602c:	a03fe626 	beq	r20,zero,5fc8 <__d2b+0xd8>
    6030:	2945883a 	add	r2,r5,r5
    6034:	1085883a 	add	r2,r2,r2
    6038:	1405883a 	add	r2,r2,r16
    603c:	113fff17 	ldw	r4,-4(r2)
    6040:	30fef384 	addi	r3,r6,-1074
    6044:	2820917a 	slli	r16,r5,5
    6048:	b0c00015 	stw	r3,0(r22)
    604c:	00058dc0 	call	58dc <__hi0bits>
    6050:	80a1c83a 	sub	r16,r16,r2
    6054:	bc000015 	stw	r16,0(r23)
    6058:	003fe106 	br	5fe0 <__d2b+0xf0>
    605c:	d8800017 	ldw	r2,0(sp)
    6060:	90800515 	stw	r2,20(r18)
    6064:	d8c00117 	ldw	r3,4(sp)
    6068:	003fd106 	br	5fb0 <__d2b+0xc0>

0000606c <__mdiff>:
    606c:	defffb04 	addi	sp,sp,-20
    6070:	dc000015 	stw	r16,0(sp)
    6074:	2821883a 	mov	r16,r5
    6078:	dc800215 	stw	r18,8(sp)
    607c:	300b883a 	mov	r5,r6
    6080:	2025883a 	mov	r18,r4
    6084:	8009883a 	mov	r4,r16
    6088:	dc400115 	stw	r17,4(sp)
    608c:	dfc00415 	stw	ra,16(sp)
    6090:	dcc00315 	stw	r19,12(sp)
    6094:	3023883a 	mov	r17,r6
    6098:	0005a100 	call	5a10 <__mcmp>
    609c:	10004226 	beq	r2,zero,61a8 <__mdiff+0x13c>
    60a0:	10005016 	blt	r2,zero,61e4 <__mdiff+0x178>
    60a4:	0027883a 	mov	r19,zero
    60a8:	81400117 	ldw	r5,4(r16)
    60ac:	9009883a 	mov	r4,r18
    60b0:	0005e340 	call	5e34 <_Balloc>
    60b4:	1019883a 	mov	r12,r2
    60b8:	82800417 	ldw	r10,16(r16)
    60bc:	88800417 	ldw	r2,16(r17)
    60c0:	81800504 	addi	r6,r16,20
    60c4:	5287883a 	add	r3,r10,r10
    60c8:	1085883a 	add	r2,r2,r2
    60cc:	18c7883a 	add	r3,r3,r3
    60d0:	1085883a 	add	r2,r2,r2
    60d4:	8a000504 	addi	r8,r17,20
    60d8:	64c00315 	stw	r19,12(r12)
    60dc:	30db883a 	add	r13,r6,r3
    60e0:	4097883a 	add	r11,r8,r2
    60e4:	61c00504 	addi	r7,r12,20
    60e8:	0013883a 	mov	r9,zero
    60ec:	31000017 	ldw	r4,0(r6)
    60f0:	41400017 	ldw	r5,0(r8)
    60f4:	42000104 	addi	r8,r8,4
    60f8:	20bfffcc 	andi	r2,r4,65535
    60fc:	28ffffcc 	andi	r3,r5,65535
    6100:	10c5c83a 	sub	r2,r2,r3
    6104:	1245883a 	add	r2,r2,r9
    6108:	2008d43a 	srli	r4,r4,16
    610c:	280ad43a 	srli	r5,r5,16
    6110:	1007d43a 	srai	r3,r2,16
    6114:	3880000d 	sth	r2,0(r7)
    6118:	2149c83a 	sub	r4,r4,r5
    611c:	20c9883a 	add	r4,r4,r3
    6120:	3900008d 	sth	r4,2(r7)
    6124:	31800104 	addi	r6,r6,4
    6128:	39c00104 	addi	r7,r7,4
    612c:	2013d43a 	srai	r9,r4,16
    6130:	42ffee36 	bltu	r8,r11,60ec <__mdiff+0x80>
    6134:	33400c2e 	bgeu	r6,r13,6168 <__mdiff+0xfc>
    6138:	30800017 	ldw	r2,0(r6)
    613c:	31800104 	addi	r6,r6,4
    6140:	10ffffcc 	andi	r3,r2,65535
    6144:	1a47883a 	add	r3,r3,r9
    6148:	1004d43a 	srli	r2,r2,16
    614c:	1809d43a 	srai	r4,r3,16
    6150:	38c0000d 	sth	r3,0(r7)
    6154:	1105883a 	add	r2,r2,r4
    6158:	3880008d 	sth	r2,2(r7)
    615c:	1013d43a 	srai	r9,r2,16
    6160:	39c00104 	addi	r7,r7,4
    6164:	337ff436 	bltu	r6,r13,6138 <__mdiff+0xcc>
    6168:	38bfff17 	ldw	r2,-4(r7)
    616c:	38ffff04 	addi	r3,r7,-4
    6170:	1000041e 	bne	r2,zero,6184 <__mdiff+0x118>
    6174:	18ffff04 	addi	r3,r3,-4
    6178:	18800017 	ldw	r2,0(r3)
    617c:	52bfffc4 	addi	r10,r10,-1
    6180:	103ffc26 	beq	r2,zero,6174 <__mdiff+0x108>
    6184:	6005883a 	mov	r2,r12
    6188:	62800415 	stw	r10,16(r12)
    618c:	dfc00417 	ldw	ra,16(sp)
    6190:	dcc00317 	ldw	r19,12(sp)
    6194:	dc800217 	ldw	r18,8(sp)
    6198:	dc400117 	ldw	r17,4(sp)
    619c:	dc000017 	ldw	r16,0(sp)
    61a0:	dec00504 	addi	sp,sp,20
    61a4:	f800283a 	ret
    61a8:	9009883a 	mov	r4,r18
    61ac:	000b883a 	mov	r5,zero
    61b0:	0005e340 	call	5e34 <_Balloc>
    61b4:	1019883a 	mov	r12,r2
    61b8:	00800044 	movi	r2,1
    61bc:	60800415 	stw	r2,16(r12)
    61c0:	6005883a 	mov	r2,r12
    61c4:	60000515 	stw	zero,20(r12)
    61c8:	dfc00417 	ldw	ra,16(sp)
    61cc:	dcc00317 	ldw	r19,12(sp)
    61d0:	dc800217 	ldw	r18,8(sp)
    61d4:	dc400117 	ldw	r17,4(sp)
    61d8:	dc000017 	ldw	r16,0(sp)
    61dc:	dec00504 	addi	sp,sp,20
    61e0:	f800283a 	ret
    61e4:	880d883a 	mov	r6,r17
    61e8:	04c00044 	movi	r19,1
    61ec:	8023883a 	mov	r17,r16
    61f0:	3021883a 	mov	r16,r6
    61f4:	003fac06 	br	60a8 <__mdiff+0x3c>

000061f8 <__lshift>:
    61f8:	defff904 	addi	sp,sp,-28
    61fc:	28800417 	ldw	r2,16(r5)
    6200:	dc000015 	stw	r16,0(sp)
    6204:	3021d17a 	srai	r16,r6,5
    6208:	28c00217 	ldw	r3,8(r5)
    620c:	10800044 	addi	r2,r2,1
    6210:	dc400115 	stw	r17,4(sp)
    6214:	80a3883a 	add	r17,r16,r2
    6218:	dd400515 	stw	r21,20(sp)
    621c:	dd000415 	stw	r20,16(sp)
    6220:	dc800215 	stw	r18,8(sp)
    6224:	dfc00615 	stw	ra,24(sp)
    6228:	2825883a 	mov	r18,r5
    622c:	dcc00315 	stw	r19,12(sp)
    6230:	3029883a 	mov	r20,r6
    6234:	202b883a 	mov	r21,r4
    6238:	29400117 	ldw	r5,4(r5)
    623c:	1c40030e 	bge	r3,r17,624c <__lshift+0x54>
    6240:	18c7883a 	add	r3,r3,r3
    6244:	29400044 	addi	r5,r5,1
    6248:	1c7ffd16 	blt	r3,r17,6240 <__lshift+0x48>
    624c:	a809883a 	mov	r4,r21
    6250:	0005e340 	call	5e34 <_Balloc>
    6254:	1027883a 	mov	r19,r2
    6258:	11400504 	addi	r5,r2,20
    625c:	0400090e 	bge	zero,r16,6284 <__lshift+0x8c>
    6260:	2805883a 	mov	r2,r5
    6264:	0007883a 	mov	r3,zero
    6268:	18c00044 	addi	r3,r3,1
    626c:	10000015 	stw	zero,0(r2)
    6270:	10800104 	addi	r2,r2,4
    6274:	80fffc1e 	bne	r16,r3,6268 <__lshift+0x70>
    6278:	8405883a 	add	r2,r16,r16
    627c:	1085883a 	add	r2,r2,r2
    6280:	288b883a 	add	r5,r5,r2
    6284:	90800417 	ldw	r2,16(r18)
    6288:	91000504 	addi	r4,r18,20
    628c:	a18007cc 	andi	r6,r20,31
    6290:	1085883a 	add	r2,r2,r2
    6294:	1085883a 	add	r2,r2,r2
    6298:	208f883a 	add	r7,r4,r2
    629c:	30001e26 	beq	r6,zero,6318 <__lshift+0x120>
    62a0:	00800804 	movi	r2,32
    62a4:	1191c83a 	sub	r8,r2,r6
    62a8:	0007883a 	mov	r3,zero
    62ac:	20800017 	ldw	r2,0(r4)
    62b0:	1184983a 	sll	r2,r2,r6
    62b4:	1884b03a 	or	r2,r3,r2
    62b8:	28800015 	stw	r2,0(r5)
    62bc:	20c00017 	ldw	r3,0(r4)
    62c0:	21000104 	addi	r4,r4,4
    62c4:	29400104 	addi	r5,r5,4
    62c8:	1a06d83a 	srl	r3,r3,r8
    62cc:	21fff736 	bltu	r4,r7,62ac <__lshift+0xb4>
    62d0:	28c00015 	stw	r3,0(r5)
    62d4:	18000126 	beq	r3,zero,62dc <__lshift+0xe4>
    62d8:	8c400044 	addi	r17,r17,1
    62dc:	88bfffc4 	addi	r2,r17,-1
    62e0:	98800415 	stw	r2,16(r19)
    62e4:	a809883a 	mov	r4,r21
    62e8:	900b883a 	mov	r5,r18
    62ec:	00058b40 	call	58b4 <_Bfree>
    62f0:	9805883a 	mov	r2,r19
    62f4:	dfc00617 	ldw	ra,24(sp)
    62f8:	dd400517 	ldw	r21,20(sp)
    62fc:	dd000417 	ldw	r20,16(sp)
    6300:	dcc00317 	ldw	r19,12(sp)
    6304:	dc800217 	ldw	r18,8(sp)
    6308:	dc400117 	ldw	r17,4(sp)
    630c:	dc000017 	ldw	r16,0(sp)
    6310:	dec00704 	addi	sp,sp,28
    6314:	f800283a 	ret
    6318:	20800017 	ldw	r2,0(r4)
    631c:	21000104 	addi	r4,r4,4
    6320:	28800015 	stw	r2,0(r5)
    6324:	29400104 	addi	r5,r5,4
    6328:	21ffec2e 	bgeu	r4,r7,62dc <__lshift+0xe4>
    632c:	20800017 	ldw	r2,0(r4)
    6330:	21000104 	addi	r4,r4,4
    6334:	28800015 	stw	r2,0(r5)
    6338:	29400104 	addi	r5,r5,4
    633c:	21fff636 	bltu	r4,r7,6318 <__lshift+0x120>
    6340:	003fe606 	br	62dc <__lshift+0xe4>

00006344 <__multiply>:
    6344:	defff004 	addi	sp,sp,-64
    6348:	dc800815 	stw	r18,32(sp)
    634c:	dc400715 	stw	r17,28(sp)
    6350:	2c800417 	ldw	r18,16(r5)
    6354:	34400417 	ldw	r17,16(r6)
    6358:	dcc00915 	stw	r19,36(sp)
    635c:	dc000615 	stw	r16,24(sp)
    6360:	dfc00f15 	stw	ra,60(sp)
    6364:	df000e15 	stw	fp,56(sp)
    6368:	ddc00d15 	stw	r23,52(sp)
    636c:	dd800c15 	stw	r22,48(sp)
    6370:	dd400b15 	stw	r21,44(sp)
    6374:	dd000a15 	stw	r20,40(sp)
    6378:	2821883a 	mov	r16,r5
    637c:	3027883a 	mov	r19,r6
    6380:	9440040e 	bge	r18,r17,6394 <__multiply+0x50>
    6384:	8825883a 	mov	r18,r17
    6388:	2c400417 	ldw	r17,16(r5)
    638c:	2827883a 	mov	r19,r5
    6390:	3021883a 	mov	r16,r6
    6394:	80800217 	ldw	r2,8(r16)
    6398:	9447883a 	add	r3,r18,r17
    639c:	d8c00415 	stw	r3,16(sp)
    63a0:	81400117 	ldw	r5,4(r16)
    63a4:	10c0010e 	bge	r2,r3,63ac <__multiply+0x68>
    63a8:	29400044 	addi	r5,r5,1
    63ac:	0005e340 	call	5e34 <_Balloc>
    63b0:	d8800515 	stw	r2,20(sp)
    63b4:	d9000417 	ldw	r4,16(sp)
    63b8:	d8c00517 	ldw	r3,20(sp)
    63bc:	2105883a 	add	r2,r4,r4
    63c0:	1085883a 	add	r2,r2,r2
    63c4:	19000504 	addi	r4,r3,20
    63c8:	2085883a 	add	r2,r4,r2
    63cc:	d8800315 	stw	r2,12(sp)
    63d0:	2080052e 	bgeu	r4,r2,63e8 <__multiply+0xa4>
    63d4:	2005883a 	mov	r2,r4
    63d8:	d8c00317 	ldw	r3,12(sp)
    63dc:	10000015 	stw	zero,0(r2)
    63e0:	10800104 	addi	r2,r2,4
    63e4:	10fffc36 	bltu	r2,r3,63d8 <__multiply+0x94>
    63e8:	8c45883a 	add	r2,r17,r17
    63ec:	9487883a 	add	r3,r18,r18
    63f0:	9dc00504 	addi	r23,r19,20
    63f4:	1085883a 	add	r2,r2,r2
    63f8:	84000504 	addi	r16,r16,20
    63fc:	18c7883a 	add	r3,r3,r3
    6400:	b885883a 	add	r2,r23,r2
    6404:	dc000015 	stw	r16,0(sp)
    6408:	d8800215 	stw	r2,8(sp)
    640c:	80f9883a 	add	fp,r16,r3
    6410:	b880432e 	bgeu	r23,r2,6520 <__multiply+0x1dc>
    6414:	d9000115 	stw	r4,4(sp)
    6418:	b9000017 	ldw	r4,0(r23)
    641c:	253fffcc 	andi	r20,r4,65535
    6420:	a0001a26 	beq	r20,zero,648c <__multiply+0x148>
    6424:	dcc00017 	ldw	r19,0(sp)
    6428:	dc800117 	ldw	r18,4(sp)
    642c:	002b883a 	mov	r21,zero
    6430:	9c400017 	ldw	r17,0(r19)
    6434:	94000017 	ldw	r16,0(r18)
    6438:	a009883a 	mov	r4,r20
    643c:	897fffcc 	andi	r5,r17,65535
    6440:	000967c0 	call	967c <__mulsi3>
    6444:	880ad43a 	srli	r5,r17,16
    6448:	80ffffcc 	andi	r3,r16,65535
    644c:	a8c7883a 	add	r3,r21,r3
    6450:	a009883a 	mov	r4,r20
    6454:	10e3883a 	add	r17,r2,r3
    6458:	8020d43a 	srli	r16,r16,16
    645c:	000967c0 	call	967c <__mulsi3>
    6460:	8806d43a 	srli	r3,r17,16
    6464:	1405883a 	add	r2,r2,r16
    6468:	9cc00104 	addi	r19,r19,4
    646c:	1887883a 	add	r3,r3,r2
    6470:	90c0008d 	sth	r3,2(r18)
    6474:	9440000d 	sth	r17,0(r18)
    6478:	182ad43a 	srli	r21,r3,16
    647c:	94800104 	addi	r18,r18,4
    6480:	9f3feb36 	bltu	r19,fp,6430 <__multiply+0xec>
    6484:	95400015 	stw	r21,0(r18)
    6488:	b9000017 	ldw	r4,0(r23)
    648c:	202ad43a 	srli	r21,r4,16
    6490:	a8001c26 	beq	r21,zero,6504 <__multiply+0x1c0>
    6494:	d9000117 	ldw	r4,4(sp)
    6498:	dd000017 	ldw	r20,0(sp)
    649c:	002d883a 	mov	r22,zero
    64a0:	24c00017 	ldw	r19,0(r4)
    64a4:	2025883a 	mov	r18,r4
    64a8:	9823883a 	mov	r17,r19
    64ac:	a4000017 	ldw	r16,0(r20)
    64b0:	a809883a 	mov	r4,r21
    64b4:	a5000104 	addi	r20,r20,4
    64b8:	817fffcc 	andi	r5,r16,65535
    64bc:	000967c0 	call	967c <__mulsi3>
    64c0:	8806d43a 	srli	r3,r17,16
    64c4:	800ad43a 	srli	r5,r16,16
    64c8:	94c0000d 	sth	r19,0(r18)
    64cc:	b0c7883a 	add	r3,r22,r3
    64d0:	10e1883a 	add	r16,r2,r3
    64d4:	9400008d 	sth	r16,2(r18)
    64d8:	a809883a 	mov	r4,r21
    64dc:	94800104 	addi	r18,r18,4
    64e0:	000967c0 	call	967c <__mulsi3>
    64e4:	94400017 	ldw	r17,0(r18)
    64e8:	8020d43a 	srli	r16,r16,16
    64ec:	88ffffcc 	andi	r3,r17,65535
    64f0:	10c5883a 	add	r2,r2,r3
    64f4:	80a7883a 	add	r19,r16,r2
    64f8:	982cd43a 	srli	r22,r19,16
    64fc:	a73feb36 	bltu	r20,fp,64ac <__multiply+0x168>
    6500:	94c00015 	stw	r19,0(r18)
    6504:	d8800217 	ldw	r2,8(sp)
    6508:	bdc00104 	addi	r23,r23,4
    650c:	b880042e 	bgeu	r23,r2,6520 <__multiply+0x1dc>
    6510:	d8c00117 	ldw	r3,4(sp)
    6514:	18c00104 	addi	r3,r3,4
    6518:	d8c00115 	stw	r3,4(sp)
    651c:	003fbe06 	br	6418 <__multiply+0xd4>
    6520:	d9000417 	ldw	r4,16(sp)
    6524:	01000c0e 	bge	zero,r4,6558 <__multiply+0x214>
    6528:	d8c00317 	ldw	r3,12(sp)
    652c:	18bfff17 	ldw	r2,-4(r3)
    6530:	18ffff04 	addi	r3,r3,-4
    6534:	10000326 	beq	r2,zero,6544 <__multiply+0x200>
    6538:	00000706 	br	6558 <__multiply+0x214>
    653c:	18800017 	ldw	r2,0(r3)
    6540:	1000051e 	bne	r2,zero,6558 <__multiply+0x214>
    6544:	d9000417 	ldw	r4,16(sp)
    6548:	18ffff04 	addi	r3,r3,-4
    654c:	213fffc4 	addi	r4,r4,-1
    6550:	d9000415 	stw	r4,16(sp)
    6554:	203ff91e 	bne	r4,zero,653c <__multiply+0x1f8>
    6558:	d8800417 	ldw	r2,16(sp)
    655c:	d8c00517 	ldw	r3,20(sp)
    6560:	18800415 	stw	r2,16(r3)
    6564:	1805883a 	mov	r2,r3
    6568:	dfc00f17 	ldw	ra,60(sp)
    656c:	df000e17 	ldw	fp,56(sp)
    6570:	ddc00d17 	ldw	r23,52(sp)
    6574:	dd800c17 	ldw	r22,48(sp)
    6578:	dd400b17 	ldw	r21,44(sp)
    657c:	dd000a17 	ldw	r20,40(sp)
    6580:	dcc00917 	ldw	r19,36(sp)
    6584:	dc800817 	ldw	r18,32(sp)
    6588:	dc400717 	ldw	r17,28(sp)
    658c:	dc000617 	ldw	r16,24(sp)
    6590:	dec01004 	addi	sp,sp,64
    6594:	f800283a 	ret

00006598 <__i2b>:
    6598:	defffd04 	addi	sp,sp,-12
    659c:	dc000015 	stw	r16,0(sp)
    65a0:	04000044 	movi	r16,1
    65a4:	dc800115 	stw	r18,4(sp)
    65a8:	2825883a 	mov	r18,r5
    65ac:	800b883a 	mov	r5,r16
    65b0:	dfc00215 	stw	ra,8(sp)
    65b4:	0005e340 	call	5e34 <_Balloc>
    65b8:	14000415 	stw	r16,16(r2)
    65bc:	14800515 	stw	r18,20(r2)
    65c0:	dfc00217 	ldw	ra,8(sp)
    65c4:	dc800117 	ldw	r18,4(sp)
    65c8:	dc000017 	ldw	r16,0(sp)
    65cc:	dec00304 	addi	sp,sp,12
    65d0:	f800283a 	ret

000065d4 <__multadd>:
    65d4:	defff604 	addi	sp,sp,-40
    65d8:	dd800615 	stw	r22,24(sp)
    65dc:	2d800417 	ldw	r22,16(r5)
    65e0:	df000815 	stw	fp,32(sp)
    65e4:	ddc00715 	stw	r23,28(sp)
    65e8:	dd400515 	stw	r21,20(sp)
    65ec:	dd000415 	stw	r20,16(sp)
    65f0:	dcc00315 	stw	r19,12(sp)
    65f4:	dc800215 	stw	r18,8(sp)
    65f8:	dfc00915 	stw	ra,36(sp)
    65fc:	dc400115 	stw	r17,4(sp)
    6600:	dc000015 	stw	r16,0(sp)
    6604:	282f883a 	mov	r23,r5
    6608:	2039883a 	mov	fp,r4
    660c:	302b883a 	mov	r21,r6
    6610:	3829883a 	mov	r20,r7
    6614:	2c800504 	addi	r18,r5,20
    6618:	0027883a 	mov	r19,zero
    661c:	94400017 	ldw	r17,0(r18)
    6620:	a80b883a 	mov	r5,r21
    6624:	9cc00044 	addi	r19,r19,1
    6628:	893fffcc 	andi	r4,r17,65535
    662c:	000967c0 	call	967c <__mulsi3>
    6630:	8808d43a 	srli	r4,r17,16
    6634:	1521883a 	add	r16,r2,r20
    6638:	a80b883a 	mov	r5,r21
    663c:	000967c0 	call	967c <__mulsi3>
    6640:	8008d43a 	srli	r4,r16,16
    6644:	843fffcc 	andi	r16,r16,65535
    6648:	1105883a 	add	r2,r2,r4
    664c:	1006943a 	slli	r3,r2,16
    6650:	1028d43a 	srli	r20,r2,16
    6654:	1c07883a 	add	r3,r3,r16
    6658:	90c00015 	stw	r3,0(r18)
    665c:	94800104 	addi	r18,r18,4
    6660:	9dbfee16 	blt	r19,r22,661c <__multadd+0x48>
    6664:	a0000826 	beq	r20,zero,6688 <__multadd+0xb4>
    6668:	b8800217 	ldw	r2,8(r23)
    666c:	b080130e 	bge	r22,r2,66bc <__multadd+0xe8>
    6670:	b585883a 	add	r2,r22,r22
    6674:	1085883a 	add	r2,r2,r2
    6678:	15c5883a 	add	r2,r2,r23
    667c:	b0c00044 	addi	r3,r22,1
    6680:	15000515 	stw	r20,20(r2)
    6684:	b8c00415 	stw	r3,16(r23)
    6688:	b805883a 	mov	r2,r23
    668c:	dfc00917 	ldw	ra,36(sp)
    6690:	df000817 	ldw	fp,32(sp)
    6694:	ddc00717 	ldw	r23,28(sp)
    6698:	dd800617 	ldw	r22,24(sp)
    669c:	dd400517 	ldw	r21,20(sp)
    66a0:	dd000417 	ldw	r20,16(sp)
    66a4:	dcc00317 	ldw	r19,12(sp)
    66a8:	dc800217 	ldw	r18,8(sp)
    66ac:	dc400117 	ldw	r17,4(sp)
    66b0:	dc000017 	ldw	r16,0(sp)
    66b4:	dec00a04 	addi	sp,sp,40
    66b8:	f800283a 	ret
    66bc:	b9400117 	ldw	r5,4(r23)
    66c0:	e009883a 	mov	r4,fp
    66c4:	29400044 	addi	r5,r5,1
    66c8:	0005e340 	call	5e34 <_Balloc>
    66cc:	b9800417 	ldw	r6,16(r23)
    66d0:	b9400304 	addi	r5,r23,12
    66d4:	11000304 	addi	r4,r2,12
    66d8:	318d883a 	add	r6,r6,r6
    66dc:	318d883a 	add	r6,r6,r6
    66e0:	31800204 	addi	r6,r6,8
    66e4:	1023883a 	mov	r17,r2
    66e8:	000569c0 	call	569c <memcpy>
    66ec:	b80b883a 	mov	r5,r23
    66f0:	e009883a 	mov	r4,fp
    66f4:	00058b40 	call	58b4 <_Bfree>
    66f8:	882f883a 	mov	r23,r17
    66fc:	003fdc06 	br	6670 <__multadd+0x9c>

00006700 <__pow5mult>:
    6700:	defffa04 	addi	sp,sp,-24
    6704:	308000cc 	andi	r2,r6,3
    6708:	dd000415 	stw	r20,16(sp)
    670c:	dcc00315 	stw	r19,12(sp)
    6710:	dc000015 	stw	r16,0(sp)
    6714:	dfc00515 	stw	ra,20(sp)
    6718:	dc800215 	stw	r18,8(sp)
    671c:	dc400115 	stw	r17,4(sp)
    6720:	3021883a 	mov	r16,r6
    6724:	2027883a 	mov	r19,r4
    6728:	2829883a 	mov	r20,r5
    672c:	10002b1e 	bne	r2,zero,67dc <__pow5mult+0xdc>
    6730:	8025d0ba 	srai	r18,r16,2
    6734:	90001b26 	beq	r18,zero,67a4 <__pow5mult+0xa4>
    6738:	9c001217 	ldw	r16,72(r19)
    673c:	8000081e 	bne	r16,zero,6760 <__pow5mult+0x60>
    6740:	00003006 	br	6804 <__pow5mult+0x104>
    6744:	800b883a 	mov	r5,r16
    6748:	800d883a 	mov	r6,r16
    674c:	9809883a 	mov	r4,r19
    6750:	90001426 	beq	r18,zero,67a4 <__pow5mult+0xa4>
    6754:	80800017 	ldw	r2,0(r16)
    6758:	10001b26 	beq	r2,zero,67c8 <__pow5mult+0xc8>
    675c:	1021883a 	mov	r16,r2
    6760:	9080004c 	andi	r2,r18,1
    6764:	1005003a 	cmpeq	r2,r2,zero
    6768:	9025d07a 	srai	r18,r18,1
    676c:	800d883a 	mov	r6,r16
    6770:	9809883a 	mov	r4,r19
    6774:	a00b883a 	mov	r5,r20
    6778:	103ff21e 	bne	r2,zero,6744 <__pow5mult+0x44>
    677c:	00063440 	call	6344 <__multiply>
    6780:	a00b883a 	mov	r5,r20
    6784:	9809883a 	mov	r4,r19
    6788:	1023883a 	mov	r17,r2
    678c:	00058b40 	call	58b4 <_Bfree>
    6790:	8829883a 	mov	r20,r17
    6794:	800b883a 	mov	r5,r16
    6798:	800d883a 	mov	r6,r16
    679c:	9809883a 	mov	r4,r19
    67a0:	903fec1e 	bne	r18,zero,6754 <__pow5mult+0x54>
    67a4:	a005883a 	mov	r2,r20
    67a8:	dfc00517 	ldw	ra,20(sp)
    67ac:	dd000417 	ldw	r20,16(sp)
    67b0:	dcc00317 	ldw	r19,12(sp)
    67b4:	dc800217 	ldw	r18,8(sp)
    67b8:	dc400117 	ldw	r17,4(sp)
    67bc:	dc000017 	ldw	r16,0(sp)
    67c0:	dec00604 	addi	sp,sp,24
    67c4:	f800283a 	ret
    67c8:	00063440 	call	6344 <__multiply>
    67cc:	80800015 	stw	r2,0(r16)
    67d0:	1021883a 	mov	r16,r2
    67d4:	10000015 	stw	zero,0(r2)
    67d8:	003fe106 	br	6760 <__pow5mult+0x60>
    67dc:	1085883a 	add	r2,r2,r2
    67e0:	00c00074 	movhi	r3,1
    67e4:	18f54504 	addi	r3,r3,-10988
    67e8:	1085883a 	add	r2,r2,r2
    67ec:	10c5883a 	add	r2,r2,r3
    67f0:	11bfff17 	ldw	r6,-4(r2)
    67f4:	000f883a 	mov	r7,zero
    67f8:	00065d40 	call	65d4 <__multadd>
    67fc:	1029883a 	mov	r20,r2
    6800:	003fcb06 	br	6730 <__pow5mult+0x30>
    6804:	9809883a 	mov	r4,r19
    6808:	01409c44 	movi	r5,625
    680c:	00065980 	call	6598 <__i2b>
    6810:	98801215 	stw	r2,72(r19)
    6814:	1021883a 	mov	r16,r2
    6818:	10000015 	stw	zero,0(r2)
    681c:	003fd006 	br	6760 <__pow5mult+0x60>

00006820 <__s2b>:
    6820:	defff904 	addi	sp,sp,-28
    6824:	dcc00315 	stw	r19,12(sp)
    6828:	dc800215 	stw	r18,8(sp)
    682c:	2827883a 	mov	r19,r5
    6830:	2025883a 	mov	r18,r4
    6834:	01400244 	movi	r5,9
    6838:	39000204 	addi	r4,r7,8
    683c:	dd000415 	stw	r20,16(sp)
    6840:	dc400115 	stw	r17,4(sp)
    6844:	dfc00615 	stw	ra,24(sp)
    6848:	dd400515 	stw	r21,20(sp)
    684c:	dc000015 	stw	r16,0(sp)
    6850:	3829883a 	mov	r20,r7
    6854:	3023883a 	mov	r17,r6
    6858:	00095ac0 	call	95ac <__divsi3>
    685c:	00c00044 	movi	r3,1
    6860:	1880350e 	bge	r3,r2,6938 <__s2b+0x118>
    6864:	000b883a 	mov	r5,zero
    6868:	18c7883a 	add	r3,r3,r3
    686c:	29400044 	addi	r5,r5,1
    6870:	18bffd16 	blt	r3,r2,6868 <__s2b+0x48>
    6874:	9009883a 	mov	r4,r18
    6878:	0005e340 	call	5e34 <_Balloc>
    687c:	1011883a 	mov	r8,r2
    6880:	d8800717 	ldw	r2,28(sp)
    6884:	00c00044 	movi	r3,1
    6888:	01800244 	movi	r6,9
    688c:	40800515 	stw	r2,20(r8)
    6890:	40c00415 	stw	r3,16(r8)
    6894:	3440260e 	bge	r6,r17,6930 <__s2b+0x110>
    6898:	3021883a 	mov	r16,r6
    689c:	99ab883a 	add	r21,r19,r6
    68a0:	9c05883a 	add	r2,r19,r16
    68a4:	11c00007 	ldb	r7,0(r2)
    68a8:	400b883a 	mov	r5,r8
    68ac:	9009883a 	mov	r4,r18
    68b0:	39fff404 	addi	r7,r7,-48
    68b4:	01800284 	movi	r6,10
    68b8:	00065d40 	call	65d4 <__multadd>
    68bc:	84000044 	addi	r16,r16,1
    68c0:	1011883a 	mov	r8,r2
    68c4:	8c3ff61e 	bne	r17,r16,68a0 <__s2b+0x80>
    68c8:	ac45883a 	add	r2,r21,r17
    68cc:	117ffe04 	addi	r5,r2,-8
    68d0:	880d883a 	mov	r6,r17
    68d4:	35000c0e 	bge	r6,r20,6908 <__s2b+0xe8>
    68d8:	a185c83a 	sub	r2,r20,r6
    68dc:	2821883a 	mov	r16,r5
    68e0:	28a3883a 	add	r17,r5,r2
    68e4:	81c00007 	ldb	r7,0(r16)
    68e8:	400b883a 	mov	r5,r8
    68ec:	9009883a 	mov	r4,r18
    68f0:	39fff404 	addi	r7,r7,-48
    68f4:	01800284 	movi	r6,10
    68f8:	00065d40 	call	65d4 <__multadd>
    68fc:	84000044 	addi	r16,r16,1
    6900:	1011883a 	mov	r8,r2
    6904:	847ff71e 	bne	r16,r17,68e4 <__s2b+0xc4>
    6908:	4005883a 	mov	r2,r8
    690c:	dfc00617 	ldw	ra,24(sp)
    6910:	dd400517 	ldw	r21,20(sp)
    6914:	dd000417 	ldw	r20,16(sp)
    6918:	dcc00317 	ldw	r19,12(sp)
    691c:	dc800217 	ldw	r18,8(sp)
    6920:	dc400117 	ldw	r17,4(sp)
    6924:	dc000017 	ldw	r16,0(sp)
    6928:	dec00704 	addi	sp,sp,28
    692c:	f800283a 	ret
    6930:	99400284 	addi	r5,r19,10
    6934:	003fe706 	br	68d4 <__s2b+0xb4>
    6938:	000b883a 	mov	r5,zero
    693c:	003fcd06 	br	6874 <__s2b+0x54>

00006940 <_realloc_r>:
    6940:	defff404 	addi	sp,sp,-48
    6944:	dd800815 	stw	r22,32(sp)
    6948:	dc800415 	stw	r18,16(sp)
    694c:	dc400315 	stw	r17,12(sp)
    6950:	dfc00b15 	stw	ra,44(sp)
    6954:	df000a15 	stw	fp,40(sp)
    6958:	ddc00915 	stw	r23,36(sp)
    695c:	dd400715 	stw	r21,28(sp)
    6960:	dd000615 	stw	r20,24(sp)
    6964:	dcc00515 	stw	r19,20(sp)
    6968:	dc000215 	stw	r16,8(sp)
    696c:	2825883a 	mov	r18,r5
    6970:	3023883a 	mov	r17,r6
    6974:	202d883a 	mov	r22,r4
    6978:	2800c926 	beq	r5,zero,6ca0 <_realloc_r+0x360>
    697c:	000a4000 	call	a400 <__malloc_lock>
    6980:	943ffe04 	addi	r16,r18,-8
    6984:	88c002c4 	addi	r3,r17,11
    6988:	00800584 	movi	r2,22
    698c:	82000117 	ldw	r8,4(r16)
    6990:	10c01b2e 	bgeu	r2,r3,6a00 <_realloc_r+0xc0>
    6994:	00bffe04 	movi	r2,-8
    6998:	188e703a 	and	r7,r3,r2
    699c:	3839883a 	mov	fp,r7
    69a0:	38001a16 	blt	r7,zero,6a0c <_realloc_r+0xcc>
    69a4:	e4401936 	bltu	fp,r17,6a0c <_realloc_r+0xcc>
    69a8:	013fff04 	movi	r4,-4
    69ac:	4126703a 	and	r19,r8,r4
    69b0:	99c02616 	blt	r19,r7,6a4c <_realloc_r+0x10c>
    69b4:	802b883a 	mov	r21,r16
    69b8:	9829883a 	mov	r20,r19
    69bc:	84000204 	addi	r16,r16,8
    69c0:	a80f883a 	mov	r7,r21
    69c4:	a70dc83a 	sub	r6,r20,fp
    69c8:	008003c4 	movi	r2,15
    69cc:	1180c136 	bltu	r2,r6,6cd4 <_realloc_r+0x394>
    69d0:	38800117 	ldw	r2,4(r7)
    69d4:	a549883a 	add	r4,r20,r21
    69d8:	1080004c 	andi	r2,r2,1
    69dc:	a084b03a 	or	r2,r20,r2
    69e0:	38800115 	stw	r2,4(r7)
    69e4:	20c00117 	ldw	r3,4(r4)
    69e8:	18c00054 	ori	r3,r3,1
    69ec:	20c00115 	stw	r3,4(r4)
    69f0:	b009883a 	mov	r4,r22
    69f4:	000a4200 	call	a420 <__malloc_unlock>
    69f8:	8023883a 	mov	r17,r16
    69fc:	00000606 	br	6a18 <_realloc_r+0xd8>
    6a00:	01c00404 	movi	r7,16
    6a04:	3839883a 	mov	fp,r7
    6a08:	e47fe72e 	bgeu	fp,r17,69a8 <_realloc_r+0x68>
    6a0c:	00800304 	movi	r2,12
    6a10:	0023883a 	mov	r17,zero
    6a14:	b0800015 	stw	r2,0(r22)
    6a18:	8805883a 	mov	r2,r17
    6a1c:	dfc00b17 	ldw	ra,44(sp)
    6a20:	df000a17 	ldw	fp,40(sp)
    6a24:	ddc00917 	ldw	r23,36(sp)
    6a28:	dd800817 	ldw	r22,32(sp)
    6a2c:	dd400717 	ldw	r21,28(sp)
    6a30:	dd000617 	ldw	r20,24(sp)
    6a34:	dcc00517 	ldw	r19,20(sp)
    6a38:	dc800417 	ldw	r18,16(sp)
    6a3c:	dc400317 	ldw	r17,12(sp)
    6a40:	dc000217 	ldw	r16,8(sp)
    6a44:	dec00c04 	addi	sp,sp,48
    6a48:	f800283a 	ret
    6a4c:	00800074 	movhi	r2,1
    6a50:	10b6a004 	addi	r2,r2,-9600
    6a54:	12400217 	ldw	r9,8(r2)
    6a58:	84cd883a 	add	r6,r16,r19
    6a5c:	802b883a 	mov	r21,r16
    6a60:	3240b926 	beq	r6,r9,6d48 <_realloc_r+0x408>
    6a64:	31400117 	ldw	r5,4(r6)
    6a68:	00bfff84 	movi	r2,-2
    6a6c:	2884703a 	and	r2,r5,r2
    6a70:	1185883a 	add	r2,r2,r6
    6a74:	10c00117 	ldw	r3,4(r2)
    6a78:	18c0004c 	andi	r3,r3,1
    6a7c:	1807003a 	cmpeq	r3,r3,zero
    6a80:	1800a326 	beq	r3,zero,6d10 <_realloc_r+0x3d0>
    6a84:	2908703a 	and	r4,r5,r4
    6a88:	9929883a 	add	r20,r19,r4
    6a8c:	a1c0a30e 	bge	r20,r7,6d1c <_realloc_r+0x3dc>
    6a90:	4080004c 	andi	r2,r8,1
    6a94:	1000551e 	bne	r2,zero,6bec <_realloc_r+0x2ac>
    6a98:	80800017 	ldw	r2,0(r16)
    6a9c:	80afc83a 	sub	r23,r16,r2
    6aa0:	b8c00117 	ldw	r3,4(r23)
    6aa4:	00bfff04 	movi	r2,-4
    6aa8:	1884703a 	and	r2,r3,r2
    6aac:	30002e26 	beq	r6,zero,6b68 <_realloc_r+0x228>
    6ab0:	3240b926 	beq	r6,r9,6d98 <_realloc_r+0x458>
    6ab4:	98a9883a 	add	r20,r19,r2
    6ab8:	2509883a 	add	r4,r4,r20
    6abc:	d9000015 	stw	r4,0(sp)
    6ac0:	21c02a16 	blt	r4,r7,6b6c <_realloc_r+0x22c>
    6ac4:	30800317 	ldw	r2,12(r6)
    6ac8:	30c00217 	ldw	r3,8(r6)
    6acc:	01400904 	movi	r5,36
    6ad0:	99bfff04 	addi	r6,r19,-4
    6ad4:	18800315 	stw	r2,12(r3)
    6ad8:	10c00215 	stw	r3,8(r2)
    6adc:	b9000317 	ldw	r4,12(r23)
    6ae0:	b8800217 	ldw	r2,8(r23)
    6ae4:	b82b883a 	mov	r21,r23
    6ae8:	bc000204 	addi	r16,r23,8
    6aec:	20800215 	stw	r2,8(r4)
    6af0:	11000315 	stw	r4,12(r2)
    6af4:	2980e436 	bltu	r5,r6,6e88 <_realloc_r+0x548>
    6af8:	008004c4 	movi	r2,19
    6afc:	9009883a 	mov	r4,r18
    6b00:	8011883a 	mov	r8,r16
    6b04:	11800f2e 	bgeu	r2,r6,6b44 <_realloc_r+0x204>
    6b08:	90800017 	ldw	r2,0(r18)
    6b0c:	ba000404 	addi	r8,r23,16
    6b10:	91000204 	addi	r4,r18,8
    6b14:	b8800215 	stw	r2,8(r23)
    6b18:	90c00117 	ldw	r3,4(r18)
    6b1c:	008006c4 	movi	r2,27
    6b20:	b8c00315 	stw	r3,12(r23)
    6b24:	1180072e 	bgeu	r2,r6,6b44 <_realloc_r+0x204>
    6b28:	90c00217 	ldw	r3,8(r18)
    6b2c:	ba000604 	addi	r8,r23,24
    6b30:	91000404 	addi	r4,r18,16
    6b34:	b8c00415 	stw	r3,16(r23)
    6b38:	90800317 	ldw	r2,12(r18)
    6b3c:	b8800515 	stw	r2,20(r23)
    6b40:	3140e726 	beq	r6,r5,6ee0 <_realloc_r+0x5a0>
    6b44:	20800017 	ldw	r2,0(r4)
    6b48:	dd000017 	ldw	r20,0(sp)
    6b4c:	b80f883a 	mov	r7,r23
    6b50:	40800015 	stw	r2,0(r8)
    6b54:	20c00117 	ldw	r3,4(r4)
    6b58:	40c00115 	stw	r3,4(r8)
    6b5c:	20800217 	ldw	r2,8(r4)
    6b60:	40800215 	stw	r2,8(r8)
    6b64:	003f9706 	br	69c4 <_realloc_r+0x84>
    6b68:	98a9883a 	add	r20,r19,r2
    6b6c:	a1c01f16 	blt	r20,r7,6bec <_realloc_r+0x2ac>
    6b70:	b8c00317 	ldw	r3,12(r23)
    6b74:	b8800217 	ldw	r2,8(r23)
    6b78:	99bfff04 	addi	r6,r19,-4
    6b7c:	01400904 	movi	r5,36
    6b80:	b82b883a 	mov	r21,r23
    6b84:	18800215 	stw	r2,8(r3)
    6b88:	10c00315 	stw	r3,12(r2)
    6b8c:	bc000204 	addi	r16,r23,8
    6b90:	2980c336 	bltu	r5,r6,6ea0 <_realloc_r+0x560>
    6b94:	008004c4 	movi	r2,19
    6b98:	9009883a 	mov	r4,r18
    6b9c:	8011883a 	mov	r8,r16
    6ba0:	11800f2e 	bgeu	r2,r6,6be0 <_realloc_r+0x2a0>
    6ba4:	90800017 	ldw	r2,0(r18)
    6ba8:	ba000404 	addi	r8,r23,16
    6bac:	91000204 	addi	r4,r18,8
    6bb0:	b8800215 	stw	r2,8(r23)
    6bb4:	90c00117 	ldw	r3,4(r18)
    6bb8:	008006c4 	movi	r2,27
    6bbc:	b8c00315 	stw	r3,12(r23)
    6bc0:	1180072e 	bgeu	r2,r6,6be0 <_realloc_r+0x2a0>
    6bc4:	90c00217 	ldw	r3,8(r18)
    6bc8:	ba000604 	addi	r8,r23,24
    6bcc:	91000404 	addi	r4,r18,16
    6bd0:	b8c00415 	stw	r3,16(r23)
    6bd4:	90800317 	ldw	r2,12(r18)
    6bd8:	b8800515 	stw	r2,20(r23)
    6bdc:	3140c726 	beq	r6,r5,6efc <_realloc_r+0x5bc>
    6be0:	20800017 	ldw	r2,0(r4)
    6be4:	b80f883a 	mov	r7,r23
    6be8:	003fd906 	br	6b50 <_realloc_r+0x210>
    6bec:	880b883a 	mov	r5,r17
    6bf0:	b009883a 	mov	r4,r22
    6bf4:	0004e780 	call	4e78 <_malloc_r>
    6bf8:	1023883a 	mov	r17,r2
    6bfc:	10002526 	beq	r2,zero,6c94 <_realloc_r+0x354>
    6c00:	80800117 	ldw	r2,4(r16)
    6c04:	00ffff84 	movi	r3,-2
    6c08:	893ffe04 	addi	r4,r17,-8
    6c0c:	10c4703a 	and	r2,r2,r3
    6c10:	8085883a 	add	r2,r16,r2
    6c14:	20809526 	beq	r4,r2,6e6c <_realloc_r+0x52c>
    6c18:	99bfff04 	addi	r6,r19,-4
    6c1c:	01c00904 	movi	r7,36
    6c20:	39804536 	bltu	r7,r6,6d38 <_realloc_r+0x3f8>
    6c24:	008004c4 	movi	r2,19
    6c28:	9009883a 	mov	r4,r18
    6c2c:	880b883a 	mov	r5,r17
    6c30:	11800f2e 	bgeu	r2,r6,6c70 <_realloc_r+0x330>
    6c34:	90800017 	ldw	r2,0(r18)
    6c38:	89400204 	addi	r5,r17,8
    6c3c:	91000204 	addi	r4,r18,8
    6c40:	88800015 	stw	r2,0(r17)
    6c44:	90c00117 	ldw	r3,4(r18)
    6c48:	008006c4 	movi	r2,27
    6c4c:	88c00115 	stw	r3,4(r17)
    6c50:	1180072e 	bgeu	r2,r6,6c70 <_realloc_r+0x330>
    6c54:	90c00217 	ldw	r3,8(r18)
    6c58:	89400404 	addi	r5,r17,16
    6c5c:	91000404 	addi	r4,r18,16
    6c60:	88c00215 	stw	r3,8(r17)
    6c64:	90800317 	ldw	r2,12(r18)
    6c68:	88800315 	stw	r2,12(r17)
    6c6c:	31c09126 	beq	r6,r7,6eb4 <_realloc_r+0x574>
    6c70:	20800017 	ldw	r2,0(r4)
    6c74:	28800015 	stw	r2,0(r5)
    6c78:	20c00117 	ldw	r3,4(r4)
    6c7c:	28c00115 	stw	r3,4(r5)
    6c80:	20800217 	ldw	r2,8(r4)
    6c84:	28800215 	stw	r2,8(r5)
    6c88:	900b883a 	mov	r5,r18
    6c8c:	b009883a 	mov	r4,r22
    6c90:	00042f00 	call	42f0 <_free_r>
    6c94:	b009883a 	mov	r4,r22
    6c98:	000a4200 	call	a420 <__malloc_unlock>
    6c9c:	003f5e06 	br	6a18 <_realloc_r+0xd8>
    6ca0:	300b883a 	mov	r5,r6
    6ca4:	dfc00b17 	ldw	ra,44(sp)
    6ca8:	df000a17 	ldw	fp,40(sp)
    6cac:	ddc00917 	ldw	r23,36(sp)
    6cb0:	dd800817 	ldw	r22,32(sp)
    6cb4:	dd400717 	ldw	r21,28(sp)
    6cb8:	dd000617 	ldw	r20,24(sp)
    6cbc:	dcc00517 	ldw	r19,20(sp)
    6cc0:	dc800417 	ldw	r18,16(sp)
    6cc4:	dc400317 	ldw	r17,12(sp)
    6cc8:	dc000217 	ldw	r16,8(sp)
    6ccc:	dec00c04 	addi	sp,sp,48
    6cd0:	0004e781 	jmpi	4e78 <_malloc_r>
    6cd4:	38800117 	ldw	r2,4(r7)
    6cd8:	e54b883a 	add	r5,fp,r21
    6cdc:	31000054 	ori	r4,r6,1
    6ce0:	1080004c 	andi	r2,r2,1
    6ce4:	1704b03a 	or	r2,r2,fp
    6ce8:	38800115 	stw	r2,4(r7)
    6cec:	29000115 	stw	r4,4(r5)
    6cf0:	2987883a 	add	r3,r5,r6
    6cf4:	18800117 	ldw	r2,4(r3)
    6cf8:	29400204 	addi	r5,r5,8
    6cfc:	b009883a 	mov	r4,r22
    6d00:	10800054 	ori	r2,r2,1
    6d04:	18800115 	stw	r2,4(r3)
    6d08:	00042f00 	call	42f0 <_free_r>
    6d0c:	003f3806 	br	69f0 <_realloc_r+0xb0>
    6d10:	000d883a 	mov	r6,zero
    6d14:	0009883a 	mov	r4,zero
    6d18:	003f5d06 	br	6a90 <_realloc_r+0x150>
    6d1c:	30c00217 	ldw	r3,8(r6)
    6d20:	30800317 	ldw	r2,12(r6)
    6d24:	800f883a 	mov	r7,r16
    6d28:	84000204 	addi	r16,r16,8
    6d2c:	10c00215 	stw	r3,8(r2)
    6d30:	18800315 	stw	r2,12(r3)
    6d34:	003f2306 	br	69c4 <_realloc_r+0x84>
    6d38:	8809883a 	mov	r4,r17
    6d3c:	900b883a 	mov	r5,r18
    6d40:	000573c0 	call	573c <memmove>
    6d44:	003fd006 	br	6c88 <_realloc_r+0x348>
    6d48:	30800117 	ldw	r2,4(r6)
    6d4c:	e0c00404 	addi	r3,fp,16
    6d50:	1108703a 	and	r4,r2,r4
    6d54:	9905883a 	add	r2,r19,r4
    6d58:	10ff4d16 	blt	r2,r3,6a90 <_realloc_r+0x150>
    6d5c:	1705c83a 	sub	r2,r2,fp
    6d60:	870b883a 	add	r5,r16,fp
    6d64:	10800054 	ori	r2,r2,1
    6d68:	28800115 	stw	r2,4(r5)
    6d6c:	80c00117 	ldw	r3,4(r16)
    6d70:	00800074 	movhi	r2,1
    6d74:	10b6a004 	addi	r2,r2,-9600
    6d78:	b009883a 	mov	r4,r22
    6d7c:	18c0004c 	andi	r3,r3,1
    6d80:	e0c6b03a 	or	r3,fp,r3
    6d84:	11400215 	stw	r5,8(r2)
    6d88:	80c00115 	stw	r3,4(r16)
    6d8c:	000a4200 	call	a420 <__malloc_unlock>
    6d90:	84400204 	addi	r17,r16,8
    6d94:	003f2006 	br	6a18 <_realloc_r+0xd8>
    6d98:	98a9883a 	add	r20,r19,r2
    6d9c:	2509883a 	add	r4,r4,r20
    6da0:	e0800404 	addi	r2,fp,16
    6da4:	d9000115 	stw	r4,4(sp)
    6da8:	20bf7016 	blt	r4,r2,6b6c <_realloc_r+0x22c>
    6dac:	b8c00317 	ldw	r3,12(r23)
    6db0:	b8800217 	ldw	r2,8(r23)
    6db4:	99bfff04 	addi	r6,r19,-4
    6db8:	01400904 	movi	r5,36
    6dbc:	18800215 	stw	r2,8(r3)
    6dc0:	10c00315 	stw	r3,12(r2)
    6dc4:	bc400204 	addi	r17,r23,8
    6dc8:	29804136 	bltu	r5,r6,6ed0 <_realloc_r+0x590>
    6dcc:	008004c4 	movi	r2,19
    6dd0:	9009883a 	mov	r4,r18
    6dd4:	880f883a 	mov	r7,r17
    6dd8:	11800f2e 	bgeu	r2,r6,6e18 <_realloc_r+0x4d8>
    6ddc:	90800017 	ldw	r2,0(r18)
    6de0:	b9c00404 	addi	r7,r23,16
    6de4:	91000204 	addi	r4,r18,8
    6de8:	b8800215 	stw	r2,8(r23)
    6dec:	90c00117 	ldw	r3,4(r18)
    6df0:	008006c4 	movi	r2,27
    6df4:	b8c00315 	stw	r3,12(r23)
    6df8:	1180072e 	bgeu	r2,r6,6e18 <_realloc_r+0x4d8>
    6dfc:	90c00217 	ldw	r3,8(r18)
    6e00:	b9c00604 	addi	r7,r23,24
    6e04:	91000404 	addi	r4,r18,16
    6e08:	b8c00415 	stw	r3,16(r23)
    6e0c:	90800317 	ldw	r2,12(r18)
    6e10:	b8800515 	stw	r2,20(r23)
    6e14:	31404026 	beq	r6,r5,6f18 <_realloc_r+0x5d8>
    6e18:	20800017 	ldw	r2,0(r4)
    6e1c:	38800015 	stw	r2,0(r7)
    6e20:	20c00117 	ldw	r3,4(r4)
    6e24:	38c00115 	stw	r3,4(r7)
    6e28:	20800217 	ldw	r2,8(r4)
    6e2c:	38800215 	stw	r2,8(r7)
    6e30:	d8c00117 	ldw	r3,4(sp)
    6e34:	bf0b883a 	add	r5,r23,fp
    6e38:	b009883a 	mov	r4,r22
    6e3c:	1f05c83a 	sub	r2,r3,fp
    6e40:	10800054 	ori	r2,r2,1
    6e44:	28800115 	stw	r2,4(r5)
    6e48:	b8c00117 	ldw	r3,4(r23)
    6e4c:	00800074 	movhi	r2,1
    6e50:	10b6a004 	addi	r2,r2,-9600
    6e54:	11400215 	stw	r5,8(r2)
    6e58:	18c0004c 	andi	r3,r3,1
    6e5c:	e0c6b03a 	or	r3,fp,r3
    6e60:	b8c00115 	stw	r3,4(r23)
    6e64:	000a4200 	call	a420 <__malloc_unlock>
    6e68:	003eeb06 	br	6a18 <_realloc_r+0xd8>
    6e6c:	20800117 	ldw	r2,4(r4)
    6e70:	00ffff04 	movi	r3,-4
    6e74:	800f883a 	mov	r7,r16
    6e78:	10c4703a 	and	r2,r2,r3
    6e7c:	98a9883a 	add	r20,r19,r2
    6e80:	84000204 	addi	r16,r16,8
    6e84:	003ecf06 	br	69c4 <_realloc_r+0x84>
    6e88:	900b883a 	mov	r5,r18
    6e8c:	8009883a 	mov	r4,r16
    6e90:	000573c0 	call	573c <memmove>
    6e94:	dd000017 	ldw	r20,0(sp)
    6e98:	b80f883a 	mov	r7,r23
    6e9c:	003ec906 	br	69c4 <_realloc_r+0x84>
    6ea0:	900b883a 	mov	r5,r18
    6ea4:	8009883a 	mov	r4,r16
    6ea8:	000573c0 	call	573c <memmove>
    6eac:	b80f883a 	mov	r7,r23
    6eb0:	003ec406 	br	69c4 <_realloc_r+0x84>
    6eb4:	90c00417 	ldw	r3,16(r18)
    6eb8:	89400604 	addi	r5,r17,24
    6ebc:	91000604 	addi	r4,r18,24
    6ec0:	88c00415 	stw	r3,16(r17)
    6ec4:	90800517 	ldw	r2,20(r18)
    6ec8:	88800515 	stw	r2,20(r17)
    6ecc:	003f6806 	br	6c70 <_realloc_r+0x330>
    6ed0:	900b883a 	mov	r5,r18
    6ed4:	8809883a 	mov	r4,r17
    6ed8:	000573c0 	call	573c <memmove>
    6edc:	003fd406 	br	6e30 <_realloc_r+0x4f0>
    6ee0:	90c00417 	ldw	r3,16(r18)
    6ee4:	91000604 	addi	r4,r18,24
    6ee8:	ba000804 	addi	r8,r23,32
    6eec:	b8c00615 	stw	r3,24(r23)
    6ef0:	90800517 	ldw	r2,20(r18)
    6ef4:	b8800715 	stw	r2,28(r23)
    6ef8:	003f1206 	br	6b44 <_realloc_r+0x204>
    6efc:	90c00417 	ldw	r3,16(r18)
    6f00:	91000604 	addi	r4,r18,24
    6f04:	ba000804 	addi	r8,r23,32
    6f08:	b8c00615 	stw	r3,24(r23)
    6f0c:	90800517 	ldw	r2,20(r18)
    6f10:	b8800715 	stw	r2,28(r23)
    6f14:	003f3206 	br	6be0 <_realloc_r+0x2a0>
    6f18:	90c00417 	ldw	r3,16(r18)
    6f1c:	91000604 	addi	r4,r18,24
    6f20:	b9c00804 	addi	r7,r23,32
    6f24:	b8c00615 	stw	r3,24(r23)
    6f28:	90800517 	ldw	r2,20(r18)
    6f2c:	b8800715 	stw	r2,28(r23)
    6f30:	003fb906 	br	6e18 <_realloc_r+0x4d8>

00006f34 <__isinfd>:
    6f34:	200d883a 	mov	r6,r4
    6f38:	0109c83a 	sub	r4,zero,r4
    6f3c:	2188b03a 	or	r4,r4,r6
    6f40:	2008d7fa 	srli	r4,r4,31
    6f44:	00a00034 	movhi	r2,32768
    6f48:	10bfffc4 	addi	r2,r2,-1
    6f4c:	1144703a 	and	r2,r2,r5
    6f50:	2088b03a 	or	r4,r4,r2
    6f54:	009ffc34 	movhi	r2,32752
    6f58:	1105c83a 	sub	r2,r2,r4
    6f5c:	0087c83a 	sub	r3,zero,r2
    6f60:	10c4b03a 	or	r2,r2,r3
    6f64:	1004d7fa 	srli	r2,r2,31
    6f68:	00c00044 	movi	r3,1
    6f6c:	1885c83a 	sub	r2,r3,r2
    6f70:	f800283a 	ret

00006f74 <__isnand>:
    6f74:	200d883a 	mov	r6,r4
    6f78:	0109c83a 	sub	r4,zero,r4
    6f7c:	2188b03a 	or	r4,r4,r6
    6f80:	2008d7fa 	srli	r4,r4,31
    6f84:	00a00034 	movhi	r2,32768
    6f88:	10bfffc4 	addi	r2,r2,-1
    6f8c:	1144703a 	and	r2,r2,r5
    6f90:	2088b03a 	or	r4,r4,r2
    6f94:	009ffc34 	movhi	r2,32752
    6f98:	1105c83a 	sub	r2,r2,r4
    6f9c:	1004d7fa 	srli	r2,r2,31
    6fa0:	f800283a 	ret

00006fa4 <_sbrk_r>:
    6fa4:	defffd04 	addi	sp,sp,-12
    6fa8:	dc000015 	stw	r16,0(sp)
    6fac:	04000074 	movhi	r16,1
    6fb0:	84033304 	addi	r16,r16,3276
    6fb4:	dc400115 	stw	r17,4(sp)
    6fb8:	80000015 	stw	zero,0(r16)
    6fbc:	2023883a 	mov	r17,r4
    6fc0:	2809883a 	mov	r4,r5
    6fc4:	dfc00215 	stw	ra,8(sp)
    6fc8:	000a63c0 	call	a63c <sbrk>
    6fcc:	1007883a 	mov	r3,r2
    6fd0:	00bfffc4 	movi	r2,-1
    6fd4:	18800626 	beq	r3,r2,6ff0 <_sbrk_r+0x4c>
    6fd8:	1805883a 	mov	r2,r3
    6fdc:	dfc00217 	ldw	ra,8(sp)
    6fe0:	dc400117 	ldw	r17,4(sp)
    6fe4:	dc000017 	ldw	r16,0(sp)
    6fe8:	dec00304 	addi	sp,sp,12
    6fec:	f800283a 	ret
    6ff0:	80800017 	ldw	r2,0(r16)
    6ff4:	103ff826 	beq	r2,zero,6fd8 <_sbrk_r+0x34>
    6ff8:	88800015 	stw	r2,0(r17)
    6ffc:	1805883a 	mov	r2,r3
    7000:	dfc00217 	ldw	ra,8(sp)
    7004:	dc400117 	ldw	r17,4(sp)
    7008:	dc000017 	ldw	r16,0(sp)
    700c:	dec00304 	addi	sp,sp,12
    7010:	f800283a 	ret

00007014 <__sclose>:
    7014:	2940038f 	ldh	r5,14(r5)
    7018:	00073d01 	jmpi	73d0 <_close_r>

0000701c <__sseek>:
    701c:	defffe04 	addi	sp,sp,-8
    7020:	dc000015 	stw	r16,0(sp)
    7024:	2821883a 	mov	r16,r5
    7028:	2940038f 	ldh	r5,14(r5)
    702c:	dfc00115 	stw	ra,4(sp)
    7030:	00076480 	call	7648 <_lseek_r>
    7034:	1007883a 	mov	r3,r2
    7038:	00bfffc4 	movi	r2,-1
    703c:	18800926 	beq	r3,r2,7064 <__sseek+0x48>
    7040:	8080030b 	ldhu	r2,12(r16)
    7044:	80c01415 	stw	r3,80(r16)
    7048:	10840014 	ori	r2,r2,4096
    704c:	8080030d 	sth	r2,12(r16)
    7050:	1805883a 	mov	r2,r3
    7054:	dfc00117 	ldw	ra,4(sp)
    7058:	dc000017 	ldw	r16,0(sp)
    705c:	dec00204 	addi	sp,sp,8
    7060:	f800283a 	ret
    7064:	8080030b 	ldhu	r2,12(r16)
    7068:	10bbffcc 	andi	r2,r2,61439
    706c:	8080030d 	sth	r2,12(r16)
    7070:	1805883a 	mov	r2,r3
    7074:	dfc00117 	ldw	ra,4(sp)
    7078:	dc000017 	ldw	r16,0(sp)
    707c:	dec00204 	addi	sp,sp,8
    7080:	f800283a 	ret

00007084 <__swrite>:
    7084:	2880030b 	ldhu	r2,12(r5)
    7088:	defffb04 	addi	sp,sp,-20
    708c:	dcc00315 	stw	r19,12(sp)
    7090:	1080400c 	andi	r2,r2,256
    7094:	dc800215 	stw	r18,8(sp)
    7098:	dc400115 	stw	r17,4(sp)
    709c:	dc000015 	stw	r16,0(sp)
    70a0:	3027883a 	mov	r19,r6
    70a4:	3825883a 	mov	r18,r7
    70a8:	dfc00415 	stw	ra,16(sp)
    70ac:	2821883a 	mov	r16,r5
    70b0:	000d883a 	mov	r6,zero
    70b4:	01c00084 	movi	r7,2
    70b8:	2023883a 	mov	r17,r4
    70bc:	10000226 	beq	r2,zero,70c8 <__swrite+0x44>
    70c0:	2940038f 	ldh	r5,14(r5)
    70c4:	00076480 	call	7648 <_lseek_r>
    70c8:	8080030b 	ldhu	r2,12(r16)
    70cc:	8140038f 	ldh	r5,14(r16)
    70d0:	8809883a 	mov	r4,r17
    70d4:	10bbffcc 	andi	r2,r2,61439
    70d8:	980d883a 	mov	r6,r19
    70dc:	900f883a 	mov	r7,r18
    70e0:	8080030d 	sth	r2,12(r16)
    70e4:	dfc00417 	ldw	ra,16(sp)
    70e8:	dcc00317 	ldw	r19,12(sp)
    70ec:	dc800217 	ldw	r18,8(sp)
    70f0:	dc400117 	ldw	r17,4(sp)
    70f4:	dc000017 	ldw	r16,0(sp)
    70f8:	dec00504 	addi	sp,sp,20
    70fc:	00072901 	jmpi	7290 <_write_r>

00007100 <__sread>:
    7100:	defffe04 	addi	sp,sp,-8
    7104:	dc000015 	stw	r16,0(sp)
    7108:	2821883a 	mov	r16,r5
    710c:	2940038f 	ldh	r5,14(r5)
    7110:	dfc00115 	stw	ra,4(sp)
    7114:	00076c00 	call	76c0 <_read_r>
    7118:	1007883a 	mov	r3,r2
    711c:	10000816 	blt	r2,zero,7140 <__sread+0x40>
    7120:	80801417 	ldw	r2,80(r16)
    7124:	10c5883a 	add	r2,r2,r3
    7128:	80801415 	stw	r2,80(r16)
    712c:	1805883a 	mov	r2,r3
    7130:	dfc00117 	ldw	ra,4(sp)
    7134:	dc000017 	ldw	r16,0(sp)
    7138:	dec00204 	addi	sp,sp,8
    713c:	f800283a 	ret
    7140:	8080030b 	ldhu	r2,12(r16)
    7144:	10bbffcc 	andi	r2,r2,61439
    7148:	8080030d 	sth	r2,12(r16)
    714c:	1805883a 	mov	r2,r3
    7150:	dfc00117 	ldw	ra,4(sp)
    7154:	dc000017 	ldw	r16,0(sp)
    7158:	dec00204 	addi	sp,sp,8
    715c:	f800283a 	ret

00007160 <strcmp>:
    7160:	2144b03a 	or	r2,r4,r5
    7164:	108000cc 	andi	r2,r2,3
    7168:	10001d1e 	bne	r2,zero,71e0 <strcmp+0x80>
    716c:	200f883a 	mov	r7,r4
    7170:	28800017 	ldw	r2,0(r5)
    7174:	21000017 	ldw	r4,0(r4)
    7178:	280d883a 	mov	r6,r5
    717c:	2080161e 	bne	r4,r2,71d8 <strcmp+0x78>
    7180:	023fbff4 	movhi	r8,65279
    7184:	423fbfc4 	addi	r8,r8,-257
    7188:	2207883a 	add	r3,r4,r8
    718c:	01602074 	movhi	r5,32897
    7190:	29602004 	addi	r5,r5,-32640
    7194:	1946703a 	and	r3,r3,r5
    7198:	0104303a 	nor	r2,zero,r4
    719c:	10c4703a 	and	r2,r2,r3
    71a0:	10001c1e 	bne	r2,zero,7214 <strcmp+0xb4>
    71a4:	4013883a 	mov	r9,r8
    71a8:	2811883a 	mov	r8,r5
    71ac:	00000106 	br	71b4 <strcmp+0x54>
    71b0:	1800181e 	bne	r3,zero,7214 <strcmp+0xb4>
    71b4:	39c00104 	addi	r7,r7,4
    71b8:	39000017 	ldw	r4,0(r7)
    71bc:	31800104 	addi	r6,r6,4
    71c0:	31400017 	ldw	r5,0(r6)
    71c4:	2245883a 	add	r2,r4,r9
    71c8:	1204703a 	and	r2,r2,r8
    71cc:	0106303a 	nor	r3,zero,r4
    71d0:	1886703a 	and	r3,r3,r2
    71d4:	217ff626 	beq	r4,r5,71b0 <strcmp+0x50>
    71d8:	3809883a 	mov	r4,r7
    71dc:	300b883a 	mov	r5,r6
    71e0:	20c00007 	ldb	r3,0(r4)
    71e4:	1800051e 	bne	r3,zero,71fc <strcmp+0x9c>
    71e8:	00000606 	br	7204 <strcmp+0xa4>
    71ec:	21000044 	addi	r4,r4,1
    71f0:	20c00007 	ldb	r3,0(r4)
    71f4:	29400044 	addi	r5,r5,1
    71f8:	18000226 	beq	r3,zero,7204 <strcmp+0xa4>
    71fc:	28800007 	ldb	r2,0(r5)
    7200:	18bffa26 	beq	r3,r2,71ec <strcmp+0x8c>
    7204:	20c00003 	ldbu	r3,0(r4)
    7208:	28800003 	ldbu	r2,0(r5)
    720c:	1885c83a 	sub	r2,r3,r2
    7210:	f800283a 	ret
    7214:	0005883a 	mov	r2,zero
    7218:	f800283a 	ret

0000721c <strlen>:
    721c:	208000cc 	andi	r2,r4,3
    7220:	2011883a 	mov	r8,r4
    7224:	1000161e 	bne	r2,zero,7280 <strlen+0x64>
    7228:	20c00017 	ldw	r3,0(r4)
    722c:	017fbff4 	movhi	r5,65279
    7230:	297fbfc4 	addi	r5,r5,-257
    7234:	01e02074 	movhi	r7,32897
    7238:	39e02004 	addi	r7,r7,-32640
    723c:	1945883a 	add	r2,r3,r5
    7240:	11c4703a 	and	r2,r2,r7
    7244:	00c6303a 	nor	r3,zero,r3
    7248:	1886703a 	and	r3,r3,r2
    724c:	18000c1e 	bne	r3,zero,7280 <strlen+0x64>
    7250:	280d883a 	mov	r6,r5
    7254:	380b883a 	mov	r5,r7
    7258:	21000104 	addi	r4,r4,4
    725c:	20800017 	ldw	r2,0(r4)
    7260:	1187883a 	add	r3,r2,r6
    7264:	1946703a 	and	r3,r3,r5
    7268:	0084303a 	nor	r2,zero,r2
    726c:	10c4703a 	and	r2,r2,r3
    7270:	103ff926 	beq	r2,zero,7258 <strlen+0x3c>
    7274:	20800007 	ldb	r2,0(r4)
    7278:	10000326 	beq	r2,zero,7288 <strlen+0x6c>
    727c:	21000044 	addi	r4,r4,1
    7280:	20800007 	ldb	r2,0(r4)
    7284:	103ffd1e 	bne	r2,zero,727c <strlen+0x60>
    7288:	2205c83a 	sub	r2,r4,r8
    728c:	f800283a 	ret

00007290 <_write_r>:
    7290:	defffd04 	addi	sp,sp,-12
    7294:	dc000015 	stw	r16,0(sp)
    7298:	04000074 	movhi	r16,1
    729c:	84033304 	addi	r16,r16,3276
    72a0:	dc400115 	stw	r17,4(sp)
    72a4:	80000015 	stw	zero,0(r16)
    72a8:	2023883a 	mov	r17,r4
    72ac:	2809883a 	mov	r4,r5
    72b0:	300b883a 	mov	r5,r6
    72b4:	380d883a 	mov	r6,r7
    72b8:	dfc00215 	stw	ra,8(sp)
    72bc:	000a7280 	call	a728 <write>
    72c0:	1007883a 	mov	r3,r2
    72c4:	00bfffc4 	movi	r2,-1
    72c8:	18800626 	beq	r3,r2,72e4 <_write_r+0x54>
    72cc:	1805883a 	mov	r2,r3
    72d0:	dfc00217 	ldw	ra,8(sp)
    72d4:	dc400117 	ldw	r17,4(sp)
    72d8:	dc000017 	ldw	r16,0(sp)
    72dc:	dec00304 	addi	sp,sp,12
    72e0:	f800283a 	ret
    72e4:	80800017 	ldw	r2,0(r16)
    72e8:	103ff826 	beq	r2,zero,72cc <_write_r+0x3c>
    72ec:	88800015 	stw	r2,0(r17)
    72f0:	1805883a 	mov	r2,r3
    72f4:	dfc00217 	ldw	ra,8(sp)
    72f8:	dc400117 	ldw	r17,4(sp)
    72fc:	dc000017 	ldw	r16,0(sp)
    7300:	dec00304 	addi	sp,sp,12
    7304:	f800283a 	ret

00007308 <_calloc_r>:
    7308:	defffe04 	addi	sp,sp,-8
    730c:	dc400015 	stw	r17,0(sp)
    7310:	2023883a 	mov	r17,r4
    7314:	2809883a 	mov	r4,r5
    7318:	300b883a 	mov	r5,r6
    731c:	dfc00115 	stw	ra,4(sp)
    7320:	000967c0 	call	967c <__mulsi3>
    7324:	100b883a 	mov	r5,r2
    7328:	8809883a 	mov	r4,r17
    732c:	0004e780 	call	4e78 <_malloc_r>
    7330:	1023883a 	mov	r17,r2
    7334:	01c00904 	movi	r7,36
    7338:	10000d26 	beq	r2,zero,7370 <_calloc_r+0x68>
    733c:	10ffff17 	ldw	r3,-4(r2)
    7340:	1009883a 	mov	r4,r2
    7344:	00bfff04 	movi	r2,-4
    7348:	1886703a 	and	r3,r3,r2
    734c:	1887883a 	add	r3,r3,r2
    7350:	180d883a 	mov	r6,r3
    7354:	000b883a 	mov	r5,zero
    7358:	38c01736 	bltu	r7,r3,73b8 <_calloc_r+0xb0>
    735c:	008004c4 	movi	r2,19
    7360:	10c00836 	bltu	r2,r3,7384 <_calloc_r+0x7c>
    7364:	20000215 	stw	zero,8(r4)
    7368:	20000015 	stw	zero,0(r4)
    736c:	20000115 	stw	zero,4(r4)
    7370:	8805883a 	mov	r2,r17
    7374:	dfc00117 	ldw	ra,4(sp)
    7378:	dc400017 	ldw	r17,0(sp)
    737c:	dec00204 	addi	sp,sp,8
    7380:	f800283a 	ret
    7384:	008006c4 	movi	r2,27
    7388:	88000015 	stw	zero,0(r17)
    738c:	88000115 	stw	zero,4(r17)
    7390:	89000204 	addi	r4,r17,8
    7394:	10fff32e 	bgeu	r2,r3,7364 <_calloc_r+0x5c>
    7398:	88000215 	stw	zero,8(r17)
    739c:	88000315 	stw	zero,12(r17)
    73a0:	89000404 	addi	r4,r17,16
    73a4:	19ffef1e 	bne	r3,r7,7364 <_calloc_r+0x5c>
    73a8:	89000604 	addi	r4,r17,24
    73ac:	88000415 	stw	zero,16(r17)
    73b0:	88000515 	stw	zero,20(r17)
    73b4:	003feb06 	br	7364 <_calloc_r+0x5c>
    73b8:	000581c0 	call	581c <memset>
    73bc:	8805883a 	mov	r2,r17
    73c0:	dfc00117 	ldw	ra,4(sp)
    73c4:	dc400017 	ldw	r17,0(sp)
    73c8:	dec00204 	addi	sp,sp,8
    73cc:	f800283a 	ret

000073d0 <_close_r>:
    73d0:	defffd04 	addi	sp,sp,-12
    73d4:	dc000015 	stw	r16,0(sp)
    73d8:	04000074 	movhi	r16,1
    73dc:	84033304 	addi	r16,r16,3276
    73e0:	dc400115 	stw	r17,4(sp)
    73e4:	80000015 	stw	zero,0(r16)
    73e8:	2023883a 	mov	r17,r4
    73ec:	2809883a 	mov	r4,r5
    73f0:	dfc00215 	stw	ra,8(sp)
    73f4:	0009d6c0 	call	9d6c <close>
    73f8:	1007883a 	mov	r3,r2
    73fc:	00bfffc4 	movi	r2,-1
    7400:	18800626 	beq	r3,r2,741c <_close_r+0x4c>
    7404:	1805883a 	mov	r2,r3
    7408:	dfc00217 	ldw	ra,8(sp)
    740c:	dc400117 	ldw	r17,4(sp)
    7410:	dc000017 	ldw	r16,0(sp)
    7414:	dec00304 	addi	sp,sp,12
    7418:	f800283a 	ret
    741c:	80800017 	ldw	r2,0(r16)
    7420:	103ff826 	beq	r2,zero,7404 <_close_r+0x34>
    7424:	88800015 	stw	r2,0(r17)
    7428:	1805883a 	mov	r2,r3
    742c:	dfc00217 	ldw	ra,8(sp)
    7430:	dc400117 	ldw	r17,4(sp)
    7434:	dc000017 	ldw	r16,0(sp)
    7438:	dec00304 	addi	sp,sp,12
    743c:	f800283a 	ret

00007440 <_fclose_r>:
    7440:	defffc04 	addi	sp,sp,-16
    7444:	dc400115 	stw	r17,4(sp)
    7448:	dc000015 	stw	r16,0(sp)
    744c:	dfc00315 	stw	ra,12(sp)
    7450:	dc800215 	stw	r18,8(sp)
    7454:	2821883a 	mov	r16,r5
    7458:	2023883a 	mov	r17,r4
    745c:	28002926 	beq	r5,zero,7504 <_fclose_r+0xc4>
    7460:	0003f280 	call	3f28 <__sfp_lock_acquire>
    7464:	88000226 	beq	r17,zero,7470 <_fclose_r+0x30>
    7468:	88800e17 	ldw	r2,56(r17)
    746c:	10002d26 	beq	r2,zero,7524 <_fclose_r+0xe4>
    7470:	8080030f 	ldh	r2,12(r16)
    7474:	10002226 	beq	r2,zero,7500 <_fclose_r+0xc0>
    7478:	8809883a 	mov	r4,r17
    747c:	800b883a 	mov	r5,r16
    7480:	0003ca00 	call	3ca0 <_fflush_r>
    7484:	1025883a 	mov	r18,r2
    7488:	80800b17 	ldw	r2,44(r16)
    748c:	10000426 	beq	r2,zero,74a0 <_fclose_r+0x60>
    7490:	81400717 	ldw	r5,28(r16)
    7494:	8809883a 	mov	r4,r17
    7498:	103ee83a 	callr	r2
    749c:	10002a16 	blt	r2,zero,7548 <_fclose_r+0x108>
    74a0:	8080030b 	ldhu	r2,12(r16)
    74a4:	1080200c 	andi	r2,r2,128
    74a8:	1000231e 	bne	r2,zero,7538 <_fclose_r+0xf8>
    74ac:	81400c17 	ldw	r5,48(r16)
    74b0:	28000526 	beq	r5,zero,74c8 <_fclose_r+0x88>
    74b4:	80801004 	addi	r2,r16,64
    74b8:	28800226 	beq	r5,r2,74c4 <_fclose_r+0x84>
    74bc:	8809883a 	mov	r4,r17
    74c0:	00042f00 	call	42f0 <_free_r>
    74c4:	80000c15 	stw	zero,48(r16)
    74c8:	81401117 	ldw	r5,68(r16)
    74cc:	28000326 	beq	r5,zero,74dc <_fclose_r+0x9c>
    74d0:	8809883a 	mov	r4,r17
    74d4:	00042f00 	call	42f0 <_free_r>
    74d8:	80001115 	stw	zero,68(r16)
    74dc:	8000030d 	sth	zero,12(r16)
    74e0:	0003f2c0 	call	3f2c <__sfp_lock_release>
    74e4:	9005883a 	mov	r2,r18
    74e8:	dfc00317 	ldw	ra,12(sp)
    74ec:	dc800217 	ldw	r18,8(sp)
    74f0:	dc400117 	ldw	r17,4(sp)
    74f4:	dc000017 	ldw	r16,0(sp)
    74f8:	dec00404 	addi	sp,sp,16
    74fc:	f800283a 	ret
    7500:	0003f2c0 	call	3f2c <__sfp_lock_release>
    7504:	0025883a 	mov	r18,zero
    7508:	9005883a 	mov	r2,r18
    750c:	dfc00317 	ldw	ra,12(sp)
    7510:	dc800217 	ldw	r18,8(sp)
    7514:	dc400117 	ldw	r17,4(sp)
    7518:	dc000017 	ldw	r16,0(sp)
    751c:	dec00404 	addi	sp,sp,16
    7520:	f800283a 	ret
    7524:	8809883a 	mov	r4,r17
    7528:	0003f380 	call	3f38 <__sinit>
    752c:	8080030f 	ldh	r2,12(r16)
    7530:	103fd11e 	bne	r2,zero,7478 <_fclose_r+0x38>
    7534:	003ff206 	br	7500 <_fclose_r+0xc0>
    7538:	81400417 	ldw	r5,16(r16)
    753c:	8809883a 	mov	r4,r17
    7540:	00042f00 	call	42f0 <_free_r>
    7544:	003fd906 	br	74ac <_fclose_r+0x6c>
    7548:	04bfffc4 	movi	r18,-1
    754c:	003fd406 	br	74a0 <_fclose_r+0x60>

00007550 <fclose>:
    7550:	00800074 	movhi	r2,1
    7554:	10bc5504 	addi	r2,r2,-3756
    7558:	200b883a 	mov	r5,r4
    755c:	11000017 	ldw	r4,0(r2)
    7560:	00074401 	jmpi	7440 <_fclose_r>

00007564 <_fstat_r>:
    7564:	defffd04 	addi	sp,sp,-12
    7568:	dc000015 	stw	r16,0(sp)
    756c:	04000074 	movhi	r16,1
    7570:	84033304 	addi	r16,r16,3276
    7574:	dc400115 	stw	r17,4(sp)
    7578:	80000015 	stw	zero,0(r16)
    757c:	2023883a 	mov	r17,r4
    7580:	2809883a 	mov	r4,r5
    7584:	300b883a 	mov	r5,r6
    7588:	dfc00215 	stw	ra,8(sp)
    758c:	0009ef80 	call	9ef8 <fstat>
    7590:	1007883a 	mov	r3,r2
    7594:	00bfffc4 	movi	r2,-1
    7598:	18800626 	beq	r3,r2,75b4 <_fstat_r+0x50>
    759c:	1805883a 	mov	r2,r3
    75a0:	dfc00217 	ldw	ra,8(sp)
    75a4:	dc400117 	ldw	r17,4(sp)
    75a8:	dc000017 	ldw	r16,0(sp)
    75ac:	dec00304 	addi	sp,sp,12
    75b0:	f800283a 	ret
    75b4:	80800017 	ldw	r2,0(r16)
    75b8:	103ff826 	beq	r2,zero,759c <_fstat_r+0x38>
    75bc:	88800015 	stw	r2,0(r17)
    75c0:	1805883a 	mov	r2,r3
    75c4:	dfc00217 	ldw	ra,8(sp)
    75c8:	dc400117 	ldw	r17,4(sp)
    75cc:	dc000017 	ldw	r16,0(sp)
    75d0:	dec00304 	addi	sp,sp,12
    75d4:	f800283a 	ret

000075d8 <_isatty_r>:
    75d8:	defffd04 	addi	sp,sp,-12
    75dc:	dc000015 	stw	r16,0(sp)
    75e0:	04000074 	movhi	r16,1
    75e4:	84033304 	addi	r16,r16,3276
    75e8:	dc400115 	stw	r17,4(sp)
    75ec:	80000015 	stw	zero,0(r16)
    75f0:	2023883a 	mov	r17,r4
    75f4:	2809883a 	mov	r4,r5
    75f8:	dfc00215 	stw	ra,8(sp)
    75fc:	000a0300 	call	a030 <isatty>
    7600:	1007883a 	mov	r3,r2
    7604:	00bfffc4 	movi	r2,-1
    7608:	18800626 	beq	r3,r2,7624 <_isatty_r+0x4c>
    760c:	1805883a 	mov	r2,r3
    7610:	dfc00217 	ldw	ra,8(sp)
    7614:	dc400117 	ldw	r17,4(sp)
    7618:	dc000017 	ldw	r16,0(sp)
    761c:	dec00304 	addi	sp,sp,12
    7620:	f800283a 	ret
    7624:	80800017 	ldw	r2,0(r16)
    7628:	103ff826 	beq	r2,zero,760c <_isatty_r+0x34>
    762c:	88800015 	stw	r2,0(r17)
    7630:	1805883a 	mov	r2,r3
    7634:	dfc00217 	ldw	ra,8(sp)
    7638:	dc400117 	ldw	r17,4(sp)
    763c:	dc000017 	ldw	r16,0(sp)
    7640:	dec00304 	addi	sp,sp,12
    7644:	f800283a 	ret

00007648 <_lseek_r>:
    7648:	defffd04 	addi	sp,sp,-12
    764c:	dc000015 	stw	r16,0(sp)
    7650:	04000074 	movhi	r16,1
    7654:	84033304 	addi	r16,r16,3276
    7658:	dc400115 	stw	r17,4(sp)
    765c:	80000015 	stw	zero,0(r16)
    7660:	2023883a 	mov	r17,r4
    7664:	2809883a 	mov	r4,r5
    7668:	300b883a 	mov	r5,r6
    766c:	380d883a 	mov	r6,r7
    7670:	dfc00215 	stw	ra,8(sp)
    7674:	000a2400 	call	a240 <lseek>
    7678:	1007883a 	mov	r3,r2
    767c:	00bfffc4 	movi	r2,-1
    7680:	18800626 	beq	r3,r2,769c <_lseek_r+0x54>
    7684:	1805883a 	mov	r2,r3
    7688:	dfc00217 	ldw	ra,8(sp)
    768c:	dc400117 	ldw	r17,4(sp)
    7690:	dc000017 	ldw	r16,0(sp)
    7694:	dec00304 	addi	sp,sp,12
    7698:	f800283a 	ret
    769c:	80800017 	ldw	r2,0(r16)
    76a0:	103ff826 	beq	r2,zero,7684 <_lseek_r+0x3c>
    76a4:	88800015 	stw	r2,0(r17)
    76a8:	1805883a 	mov	r2,r3
    76ac:	dfc00217 	ldw	ra,8(sp)
    76b0:	dc400117 	ldw	r17,4(sp)
    76b4:	dc000017 	ldw	r16,0(sp)
    76b8:	dec00304 	addi	sp,sp,12
    76bc:	f800283a 	ret

000076c0 <_read_r>:
    76c0:	defffd04 	addi	sp,sp,-12
    76c4:	dc000015 	stw	r16,0(sp)
    76c8:	04000074 	movhi	r16,1
    76cc:	84033304 	addi	r16,r16,3276
    76d0:	dc400115 	stw	r17,4(sp)
    76d4:	80000015 	stw	zero,0(r16)
    76d8:	2023883a 	mov	r17,r4
    76dc:	2809883a 	mov	r4,r5
    76e0:	300b883a 	mov	r5,r6
    76e4:	380d883a 	mov	r6,r7
    76e8:	dfc00215 	stw	ra,8(sp)
    76ec:	000a4400 	call	a440 <read>
    76f0:	1007883a 	mov	r3,r2
    76f4:	00bfffc4 	movi	r2,-1
    76f8:	18800626 	beq	r3,r2,7714 <_read_r+0x54>
    76fc:	1805883a 	mov	r2,r3
    7700:	dfc00217 	ldw	ra,8(sp)
    7704:	dc400117 	ldw	r17,4(sp)
    7708:	dc000017 	ldw	r16,0(sp)
    770c:	dec00304 	addi	sp,sp,12
    7710:	f800283a 	ret
    7714:	80800017 	ldw	r2,0(r16)
    7718:	103ff826 	beq	r2,zero,76fc <_read_r+0x3c>
    771c:	88800015 	stw	r2,0(r17)
    7720:	1805883a 	mov	r2,r3
    7724:	dfc00217 	ldw	ra,8(sp)
    7728:	dc400117 	ldw	r17,4(sp)
    772c:	dc000017 	ldw	r16,0(sp)
    7730:	dec00304 	addi	sp,sp,12
    7734:	f800283a 	ret

00007738 <__udivdi3>:
    7738:	defff104 	addi	sp,sp,-60
    773c:	0015883a 	mov	r10,zero
    7740:	2005883a 	mov	r2,r4
    7744:	3011883a 	mov	r8,r6
    7748:	df000d15 	stw	fp,52(sp)
    774c:	dd400a15 	stw	r21,40(sp)
    7750:	dcc00815 	stw	r19,32(sp)
    7754:	dfc00e15 	stw	ra,56(sp)
    7758:	ddc00c15 	stw	r23,48(sp)
    775c:	dd800b15 	stw	r22,44(sp)
    7760:	dd000915 	stw	r20,36(sp)
    7764:	dc800715 	stw	r18,28(sp)
    7768:	dc400615 	stw	r17,24(sp)
    776c:	dc000515 	stw	r16,20(sp)
    7770:	da800315 	stw	r10,12(sp)
    7774:	4027883a 	mov	r19,r8
    7778:	1039883a 	mov	fp,r2
    777c:	282b883a 	mov	r21,r5
    7780:	da800415 	stw	r10,16(sp)
    7784:	3800401e 	bne	r7,zero,7888 <__udivdi3+0x150>
    7788:	2a006536 	bltu	r5,r8,7920 <__udivdi3+0x1e8>
    778c:	4000b526 	beq	r8,zero,7a64 <__udivdi3+0x32c>
    7790:	00bfffd4 	movui	r2,65535
    7794:	14c0ad36 	bltu	r2,r19,7a4c <__udivdi3+0x314>
    7798:	00803fc4 	movi	r2,255
    779c:	14c15e36 	bltu	r2,r19,7d18 <__udivdi3+0x5e0>
    77a0:	000b883a 	mov	r5,zero
    77a4:	0005883a 	mov	r2,zero
    77a8:	9884d83a 	srl	r2,r19,r2
    77ac:	01000074 	movhi	r4,1
    77b0:	21354d04 	addi	r4,r4,-10956
    77b4:	01800804 	movi	r6,32
    77b8:	1105883a 	add	r2,r2,r4
    77bc:	10c00003 	ldbu	r3,0(r2)
    77c0:	28c7883a 	add	r3,r5,r3
    77c4:	30e9c83a 	sub	r20,r6,r3
    77c8:	a0010a1e 	bne	r20,zero,7bf4 <__udivdi3+0x4bc>
    77cc:	982ed43a 	srli	r23,r19,16
    77d0:	acebc83a 	sub	r21,r21,r19
    77d4:	9dbfffcc 	andi	r22,r19,65535
    77d8:	05000044 	movi	r20,1
    77dc:	a809883a 	mov	r4,r21
    77e0:	b80b883a 	mov	r5,r23
    77e4:	000966c0 	call	966c <__udivsi3>
    77e8:	100b883a 	mov	r5,r2
    77ec:	b009883a 	mov	r4,r22
    77f0:	1021883a 	mov	r16,r2
    77f4:	000967c0 	call	967c <__mulsi3>
    77f8:	a809883a 	mov	r4,r21
    77fc:	b80b883a 	mov	r5,r23
    7800:	1023883a 	mov	r17,r2
    7804:	00096740 	call	9674 <__umodsi3>
    7808:	1004943a 	slli	r2,r2,16
    780c:	e006d43a 	srli	r3,fp,16
    7810:	10c4b03a 	or	r2,r2,r3
    7814:	1440042e 	bgeu	r2,r17,7828 <__udivdi3+0xf0>
    7818:	14c5883a 	add	r2,r2,r19
    781c:	843fffc4 	addi	r16,r16,-1
    7820:	14c00136 	bltu	r2,r19,7828 <__udivdi3+0xf0>
    7824:	14415c36 	bltu	r2,r17,7d98 <__udivdi3+0x660>
    7828:	1463c83a 	sub	r17,r2,r17
    782c:	8809883a 	mov	r4,r17
    7830:	b80b883a 	mov	r5,r23
    7834:	000966c0 	call	966c <__udivsi3>
    7838:	100b883a 	mov	r5,r2
    783c:	b009883a 	mov	r4,r22
    7840:	102b883a 	mov	r21,r2
    7844:	000967c0 	call	967c <__mulsi3>
    7848:	8809883a 	mov	r4,r17
    784c:	b80b883a 	mov	r5,r23
    7850:	1025883a 	mov	r18,r2
    7854:	00096740 	call	9674 <__umodsi3>
    7858:	1004943a 	slli	r2,r2,16
    785c:	e0ffffcc 	andi	r3,fp,65535
    7860:	10c4b03a 	or	r2,r2,r3
    7864:	1480042e 	bgeu	r2,r18,7878 <__udivdi3+0x140>
    7868:	9885883a 	add	r2,r19,r2
    786c:	ad7fffc4 	addi	r21,r21,-1
    7870:	14c00136 	bltu	r2,r19,7878 <__udivdi3+0x140>
    7874:	14813c36 	bltu	r2,r18,7d68 <__udivdi3+0x630>
    7878:	8004943a 	slli	r2,r16,16
    787c:	a009883a 	mov	r4,r20
    7880:	a884b03a 	or	r2,r21,r2
    7884:	00001506 	br	78dc <__udivdi3+0x1a4>
    7888:	380d883a 	mov	r6,r7
    788c:	29c06c36 	bltu	r5,r7,7a40 <__udivdi3+0x308>
    7890:	00bfffd4 	movui	r2,65535
    7894:	11c06436 	bltu	r2,r7,7a28 <__udivdi3+0x2f0>
    7898:	00803fc4 	movi	r2,255
    789c:	11c11836 	bltu	r2,r7,7d00 <__udivdi3+0x5c8>
    78a0:	000b883a 	mov	r5,zero
    78a4:	0005883a 	mov	r2,zero
    78a8:	3084d83a 	srl	r2,r6,r2
    78ac:	01000074 	movhi	r4,1
    78b0:	21354d04 	addi	r4,r4,-10956
    78b4:	01c00804 	movi	r7,32
    78b8:	1105883a 	add	r2,r2,r4
    78bc:	10c00003 	ldbu	r3,0(r2)
    78c0:	28c7883a 	add	r3,r5,r3
    78c4:	38edc83a 	sub	r22,r7,r3
    78c8:	b000731e 	bne	r22,zero,7a98 <__udivdi3+0x360>
    78cc:	35400136 	bltu	r6,r21,78d4 <__udivdi3+0x19c>
    78d0:	e4c05b36 	bltu	fp,r19,7a40 <__udivdi3+0x308>
    78d4:	00800044 	movi	r2,1
    78d8:	0009883a 	mov	r4,zero
    78dc:	d8800315 	stw	r2,12(sp)
    78e0:	d9400317 	ldw	r5,12(sp)
    78e4:	2007883a 	mov	r3,r4
    78e8:	d9000415 	stw	r4,16(sp)
    78ec:	2805883a 	mov	r2,r5
    78f0:	dfc00e17 	ldw	ra,56(sp)
    78f4:	df000d17 	ldw	fp,52(sp)
    78f8:	ddc00c17 	ldw	r23,48(sp)
    78fc:	dd800b17 	ldw	r22,44(sp)
    7900:	dd400a17 	ldw	r21,40(sp)
    7904:	dd000917 	ldw	r20,36(sp)
    7908:	dcc00817 	ldw	r19,32(sp)
    790c:	dc800717 	ldw	r18,28(sp)
    7910:	dc400617 	ldw	r17,24(sp)
    7914:	dc000517 	ldw	r16,20(sp)
    7918:	dec00f04 	addi	sp,sp,60
    791c:	f800283a 	ret
    7920:	00bfffd4 	movui	r2,65535
    7924:	12005636 	bltu	r2,r8,7a80 <__udivdi3+0x348>
    7928:	00803fc4 	movi	r2,255
    792c:	12010036 	bltu	r2,r8,7d30 <__udivdi3+0x5f8>
    7930:	000b883a 	mov	r5,zero
    7934:	0005883a 	mov	r2,zero
    7938:	9884d83a 	srl	r2,r19,r2
    793c:	01000074 	movhi	r4,1
    7940:	21354d04 	addi	r4,r4,-10956
    7944:	01800804 	movi	r6,32
    7948:	1105883a 	add	r2,r2,r4
    794c:	10c00003 	ldbu	r3,0(r2)
    7950:	28c7883a 	add	r3,r5,r3
    7954:	30cbc83a 	sub	r5,r6,r3
    7958:	28000626 	beq	r5,zero,7974 <__udivdi3+0x23c>
    795c:	3145c83a 	sub	r2,r6,r5
    7960:	e084d83a 	srl	r2,fp,r2
    7964:	a946983a 	sll	r3,r21,r5
    7968:	e178983a 	sll	fp,fp,r5
    796c:	9966983a 	sll	r19,r19,r5
    7970:	18aab03a 	or	r21,r3,r2
    7974:	982ed43a 	srli	r23,r19,16
    7978:	a809883a 	mov	r4,r21
    797c:	9cbfffcc 	andi	r18,r19,65535
    7980:	b80b883a 	mov	r5,r23
    7984:	000966c0 	call	966c <__udivsi3>
    7988:	100b883a 	mov	r5,r2
    798c:	9009883a 	mov	r4,r18
    7990:	1021883a 	mov	r16,r2
    7994:	000967c0 	call	967c <__mulsi3>
    7998:	a809883a 	mov	r4,r21
    799c:	b80b883a 	mov	r5,r23
    79a0:	1023883a 	mov	r17,r2
    79a4:	00096740 	call	9674 <__umodsi3>
    79a8:	1004943a 	slli	r2,r2,16
    79ac:	e006d43a 	srli	r3,fp,16
    79b0:	10c4b03a 	or	r2,r2,r3
    79b4:	1440042e 	bgeu	r2,r17,79c8 <__udivdi3+0x290>
    79b8:	14c5883a 	add	r2,r2,r19
    79bc:	843fffc4 	addi	r16,r16,-1
    79c0:	14c00136 	bltu	r2,r19,79c8 <__udivdi3+0x290>
    79c4:	1440ea36 	bltu	r2,r17,7d70 <__udivdi3+0x638>
    79c8:	1463c83a 	sub	r17,r2,r17
    79cc:	8809883a 	mov	r4,r17
    79d0:	b80b883a 	mov	r5,r23
    79d4:	000966c0 	call	966c <__udivsi3>
    79d8:	100b883a 	mov	r5,r2
    79dc:	9009883a 	mov	r4,r18
    79e0:	102b883a 	mov	r21,r2
    79e4:	000967c0 	call	967c <__mulsi3>
    79e8:	8809883a 	mov	r4,r17
    79ec:	b80b883a 	mov	r5,r23
    79f0:	1025883a 	mov	r18,r2
    79f4:	00096740 	call	9674 <__umodsi3>
    79f8:	1004943a 	slli	r2,r2,16
    79fc:	e0ffffcc 	andi	r3,fp,65535
    7a00:	10c4b03a 	or	r2,r2,r3
    7a04:	1480042e 	bgeu	r2,r18,7a18 <__udivdi3+0x2e0>
    7a08:	9885883a 	add	r2,r19,r2
    7a0c:	ad7fffc4 	addi	r21,r21,-1
    7a10:	14c00136 	bltu	r2,r19,7a18 <__udivdi3+0x2e0>
    7a14:	1480d936 	bltu	r2,r18,7d7c <__udivdi3+0x644>
    7a18:	8004943a 	slli	r2,r16,16
    7a1c:	0009883a 	mov	r4,zero
    7a20:	a884b03a 	or	r2,r21,r2
    7a24:	003fad06 	br	78dc <__udivdi3+0x1a4>
    7a28:	00804034 	movhi	r2,256
    7a2c:	10bfffc4 	addi	r2,r2,-1
    7a30:	11c0b636 	bltu	r2,r7,7d0c <__udivdi3+0x5d4>
    7a34:	01400404 	movi	r5,16
    7a38:	2805883a 	mov	r2,r5
    7a3c:	003f9a06 	br	78a8 <__udivdi3+0x170>
    7a40:	0005883a 	mov	r2,zero
    7a44:	0009883a 	mov	r4,zero
    7a48:	003fa406 	br	78dc <__udivdi3+0x1a4>
    7a4c:	00804034 	movhi	r2,256
    7a50:	10bfffc4 	addi	r2,r2,-1
    7a54:	14c0b336 	bltu	r2,r19,7d24 <__udivdi3+0x5ec>
    7a58:	01400404 	movi	r5,16
    7a5c:	2805883a 	mov	r2,r5
    7a60:	003f5106 	br	77a8 <__udivdi3+0x70>
    7a64:	01000044 	movi	r4,1
    7a68:	000b883a 	mov	r5,zero
    7a6c:	000966c0 	call	966c <__udivsi3>
    7a70:	1027883a 	mov	r19,r2
    7a74:	00bfffd4 	movui	r2,65535
    7a78:	14fff436 	bltu	r2,r19,7a4c <__udivdi3+0x314>
    7a7c:	003f4606 	br	7798 <__udivdi3+0x60>
    7a80:	00804034 	movhi	r2,256
    7a84:	10bfffc4 	addi	r2,r2,-1
    7a88:	1200ac36 	bltu	r2,r8,7d3c <__udivdi3+0x604>
    7a8c:	01400404 	movi	r5,16
    7a90:	2805883a 	mov	r2,r5
    7a94:	003fa806 	br	7938 <__udivdi3+0x200>
    7a98:	3d85c83a 	sub	r2,r7,r22
    7a9c:	3588983a 	sll	r4,r6,r22
    7aa0:	9886d83a 	srl	r3,r19,r2
    7aa4:	a8a2d83a 	srl	r17,r21,r2
    7aa8:	e084d83a 	srl	r2,fp,r2
    7aac:	20eeb03a 	or	r23,r4,r3
    7ab0:	b824d43a 	srli	r18,r23,16
    7ab4:	ad86983a 	sll	r3,r21,r22
    7ab8:	8809883a 	mov	r4,r17
    7abc:	900b883a 	mov	r5,r18
    7ac0:	1886b03a 	or	r3,r3,r2
    7ac4:	d8c00115 	stw	r3,4(sp)
    7ac8:	bc3fffcc 	andi	r16,r23,65535
    7acc:	000966c0 	call	966c <__udivsi3>
    7ad0:	100b883a 	mov	r5,r2
    7ad4:	8009883a 	mov	r4,r16
    7ad8:	1029883a 	mov	r20,r2
    7adc:	000967c0 	call	967c <__mulsi3>
    7ae0:	900b883a 	mov	r5,r18
    7ae4:	8809883a 	mov	r4,r17
    7ae8:	102b883a 	mov	r21,r2
    7aec:	00096740 	call	9674 <__umodsi3>
    7af0:	d9400117 	ldw	r5,4(sp)
    7af4:	1004943a 	slli	r2,r2,16
    7af8:	9da6983a 	sll	r19,r19,r22
    7afc:	2806d43a 	srli	r3,r5,16
    7b00:	10c4b03a 	or	r2,r2,r3
    7b04:	1540032e 	bgeu	r2,r21,7b14 <__udivdi3+0x3dc>
    7b08:	15c5883a 	add	r2,r2,r23
    7b0c:	a53fffc4 	addi	r20,r20,-1
    7b10:	15c0912e 	bgeu	r2,r23,7d58 <__udivdi3+0x620>
    7b14:	1563c83a 	sub	r17,r2,r21
    7b18:	8809883a 	mov	r4,r17
    7b1c:	900b883a 	mov	r5,r18
    7b20:	000966c0 	call	966c <__udivsi3>
    7b24:	100b883a 	mov	r5,r2
    7b28:	8009883a 	mov	r4,r16
    7b2c:	102b883a 	mov	r21,r2
    7b30:	000967c0 	call	967c <__mulsi3>
    7b34:	8809883a 	mov	r4,r17
    7b38:	900b883a 	mov	r5,r18
    7b3c:	1021883a 	mov	r16,r2
    7b40:	00096740 	call	9674 <__umodsi3>
    7b44:	da800117 	ldw	r10,4(sp)
    7b48:	1004943a 	slli	r2,r2,16
    7b4c:	50ffffcc 	andi	r3,r10,65535
    7b50:	10c6b03a 	or	r3,r2,r3
    7b54:	1c00032e 	bgeu	r3,r16,7b64 <__udivdi3+0x42c>
    7b58:	1dc7883a 	add	r3,r3,r23
    7b5c:	ad7fffc4 	addi	r21,r21,-1
    7b60:	1dc0792e 	bgeu	r3,r23,7d48 <__udivdi3+0x610>
    7b64:	a004943a 	slli	r2,r20,16
    7b68:	982ed43a 	srli	r23,r19,16
    7b6c:	9cffffcc 	andi	r19,r19,65535
    7b70:	a8a4b03a 	or	r18,r21,r2
    7b74:	947fffcc 	andi	r17,r18,65535
    7b78:	902ad43a 	srli	r21,r18,16
    7b7c:	8809883a 	mov	r4,r17
    7b80:	980b883a 	mov	r5,r19
    7b84:	1c21c83a 	sub	r16,r3,r16
    7b88:	000967c0 	call	967c <__mulsi3>
    7b8c:	8809883a 	mov	r4,r17
    7b90:	b80b883a 	mov	r5,r23
    7b94:	1029883a 	mov	r20,r2
    7b98:	000967c0 	call	967c <__mulsi3>
    7b9c:	980b883a 	mov	r5,r19
    7ba0:	a809883a 	mov	r4,r21
    7ba4:	1023883a 	mov	r17,r2
    7ba8:	000967c0 	call	967c <__mulsi3>
    7bac:	a809883a 	mov	r4,r21
    7bb0:	b80b883a 	mov	r5,r23
    7bb4:	1027883a 	mov	r19,r2
    7bb8:	000967c0 	call	967c <__mulsi3>
    7bbc:	1009883a 	mov	r4,r2
    7bc0:	a004d43a 	srli	r2,r20,16
    7bc4:	8ce3883a 	add	r17,r17,r19
    7bc8:	1447883a 	add	r3,r2,r17
    7bcc:	1cc0022e 	bgeu	r3,r19,7bd8 <__udivdi3+0x4a0>
    7bd0:	00800074 	movhi	r2,1
    7bd4:	2089883a 	add	r4,r4,r2
    7bd8:	1804d43a 	srli	r2,r3,16
    7bdc:	2085883a 	add	r2,r4,r2
    7be0:	80804436 	bltu	r16,r2,7cf4 <__udivdi3+0x5bc>
    7be4:	80803e26 	beq	r16,r2,7ce0 <__udivdi3+0x5a8>
    7be8:	9005883a 	mov	r2,r18
    7bec:	0009883a 	mov	r4,zero
    7bf0:	003f3a06 	br	78dc <__udivdi3+0x1a4>
    7bf4:	9d26983a 	sll	r19,r19,r20
    7bf8:	3505c83a 	sub	r2,r6,r20
    7bfc:	a8a2d83a 	srl	r17,r21,r2
    7c00:	982ed43a 	srli	r23,r19,16
    7c04:	e084d83a 	srl	r2,fp,r2
    7c08:	ad06983a 	sll	r3,r21,r20
    7c0c:	8809883a 	mov	r4,r17
    7c10:	b80b883a 	mov	r5,r23
    7c14:	1886b03a 	or	r3,r3,r2
    7c18:	d8c00015 	stw	r3,0(sp)
    7c1c:	9dbfffcc 	andi	r22,r19,65535
    7c20:	000966c0 	call	966c <__udivsi3>
    7c24:	100b883a 	mov	r5,r2
    7c28:	b009883a 	mov	r4,r22
    7c2c:	d8800215 	stw	r2,8(sp)
    7c30:	000967c0 	call	967c <__mulsi3>
    7c34:	8809883a 	mov	r4,r17
    7c38:	b80b883a 	mov	r5,r23
    7c3c:	102b883a 	mov	r21,r2
    7c40:	00096740 	call	9674 <__umodsi3>
    7c44:	d9000017 	ldw	r4,0(sp)
    7c48:	1004943a 	slli	r2,r2,16
    7c4c:	2006d43a 	srli	r3,r4,16
    7c50:	10c4b03a 	or	r2,r2,r3
    7c54:	1540052e 	bgeu	r2,r21,7c6c <__udivdi3+0x534>
    7c58:	d9400217 	ldw	r5,8(sp)
    7c5c:	14c5883a 	add	r2,r2,r19
    7c60:	297fffc4 	addi	r5,r5,-1
    7c64:	d9400215 	stw	r5,8(sp)
    7c68:	14c0462e 	bgeu	r2,r19,7d84 <__udivdi3+0x64c>
    7c6c:	1563c83a 	sub	r17,r2,r21
    7c70:	8809883a 	mov	r4,r17
    7c74:	b80b883a 	mov	r5,r23
    7c78:	000966c0 	call	966c <__udivsi3>
    7c7c:	100b883a 	mov	r5,r2
    7c80:	b009883a 	mov	r4,r22
    7c84:	1025883a 	mov	r18,r2
    7c88:	000967c0 	call	967c <__mulsi3>
    7c8c:	8809883a 	mov	r4,r17
    7c90:	b80b883a 	mov	r5,r23
    7c94:	1021883a 	mov	r16,r2
    7c98:	00096740 	call	9674 <__umodsi3>
    7c9c:	da800017 	ldw	r10,0(sp)
    7ca0:	1004943a 	slli	r2,r2,16
    7ca4:	50ffffcc 	andi	r3,r10,65535
    7ca8:	10c6b03a 	or	r3,r2,r3
    7cac:	1c00062e 	bgeu	r3,r16,7cc8 <__udivdi3+0x590>
    7cb0:	1cc7883a 	add	r3,r3,r19
    7cb4:	94bfffc4 	addi	r18,r18,-1
    7cb8:	1cc00336 	bltu	r3,r19,7cc8 <__udivdi3+0x590>
    7cbc:	1c00022e 	bgeu	r3,r16,7cc8 <__udivdi3+0x590>
    7cc0:	94bfffc4 	addi	r18,r18,-1
    7cc4:	1cc7883a 	add	r3,r3,r19
    7cc8:	d9000217 	ldw	r4,8(sp)
    7ccc:	e538983a 	sll	fp,fp,r20
    7cd0:	1c2bc83a 	sub	r21,r3,r16
    7cd4:	2004943a 	slli	r2,r4,16
    7cd8:	90a8b03a 	or	r20,r18,r2
    7cdc:	003ebf06 	br	77dc <__udivdi3+0xa4>
    7ce0:	1804943a 	slli	r2,r3,16
    7ce4:	e588983a 	sll	r4,fp,r22
    7ce8:	a0ffffcc 	andi	r3,r20,65535
    7cec:	10c5883a 	add	r2,r2,r3
    7cf0:	20bfbd2e 	bgeu	r4,r2,7be8 <__udivdi3+0x4b0>
    7cf4:	90bfffc4 	addi	r2,r18,-1
    7cf8:	0009883a 	mov	r4,zero
    7cfc:	003ef706 	br	78dc <__udivdi3+0x1a4>
    7d00:	01400204 	movi	r5,8
    7d04:	2805883a 	mov	r2,r5
    7d08:	003ee706 	br	78a8 <__udivdi3+0x170>
    7d0c:	01400604 	movi	r5,24
    7d10:	2805883a 	mov	r2,r5
    7d14:	003ee406 	br	78a8 <__udivdi3+0x170>
    7d18:	01400204 	movi	r5,8
    7d1c:	2805883a 	mov	r2,r5
    7d20:	003ea106 	br	77a8 <__udivdi3+0x70>
    7d24:	01400604 	movi	r5,24
    7d28:	2805883a 	mov	r2,r5
    7d2c:	003e9e06 	br	77a8 <__udivdi3+0x70>
    7d30:	01400204 	movi	r5,8
    7d34:	2805883a 	mov	r2,r5
    7d38:	003eff06 	br	7938 <__udivdi3+0x200>
    7d3c:	01400604 	movi	r5,24
    7d40:	2805883a 	mov	r2,r5
    7d44:	003efc06 	br	7938 <__udivdi3+0x200>
    7d48:	1c3f862e 	bgeu	r3,r16,7b64 <__udivdi3+0x42c>
    7d4c:	1dc7883a 	add	r3,r3,r23
    7d50:	ad7fffc4 	addi	r21,r21,-1
    7d54:	003f8306 	br	7b64 <__udivdi3+0x42c>
    7d58:	157f6e2e 	bgeu	r2,r21,7b14 <__udivdi3+0x3dc>
    7d5c:	a53fffc4 	addi	r20,r20,-1
    7d60:	15c5883a 	add	r2,r2,r23
    7d64:	003f6b06 	br	7b14 <__udivdi3+0x3dc>
    7d68:	ad7fffc4 	addi	r21,r21,-1
    7d6c:	003ec206 	br	7878 <__udivdi3+0x140>
    7d70:	843fffc4 	addi	r16,r16,-1
    7d74:	14c5883a 	add	r2,r2,r19
    7d78:	003f1306 	br	79c8 <__udivdi3+0x290>
    7d7c:	ad7fffc4 	addi	r21,r21,-1
    7d80:	003f2506 	br	7a18 <__udivdi3+0x2e0>
    7d84:	157fb92e 	bgeu	r2,r21,7c6c <__udivdi3+0x534>
    7d88:	297fffc4 	addi	r5,r5,-1
    7d8c:	14c5883a 	add	r2,r2,r19
    7d90:	d9400215 	stw	r5,8(sp)
    7d94:	003fb506 	br	7c6c <__udivdi3+0x534>
    7d98:	843fffc4 	addi	r16,r16,-1
    7d9c:	14c5883a 	add	r2,r2,r19
    7da0:	003ea106 	br	7828 <__udivdi3+0xf0>

00007da4 <__umoddi3>:
    7da4:	defff004 	addi	sp,sp,-64
    7da8:	3011883a 	mov	r8,r6
    7dac:	000d883a 	mov	r6,zero
    7db0:	dd400b15 	stw	r21,44(sp)
    7db4:	dcc00915 	stw	r19,36(sp)
    7db8:	dc000615 	stw	r16,24(sp)
    7dbc:	dfc00f15 	stw	ra,60(sp)
    7dc0:	df000e15 	stw	fp,56(sp)
    7dc4:	ddc00d15 	stw	r23,52(sp)
    7dc8:	dd800c15 	stw	r22,48(sp)
    7dcc:	dd000a15 	stw	r20,40(sp)
    7dd0:	dc800815 	stw	r18,32(sp)
    7dd4:	dc400715 	stw	r17,28(sp)
    7dd8:	2817883a 	mov	r11,r5
    7ddc:	d9800415 	stw	r6,16(sp)
    7de0:	4027883a 	mov	r19,r8
    7de4:	d9800515 	stw	r6,20(sp)
    7de8:	2021883a 	mov	r16,r4
    7dec:	282b883a 	mov	r21,r5
    7df0:	38002c1e 	bne	r7,zero,7ea4 <__umoddi3+0x100>
    7df4:	2a005636 	bltu	r5,r8,7f50 <__umoddi3+0x1ac>
    7df8:	40009a26 	beq	r8,zero,8064 <__umoddi3+0x2c0>
    7dfc:	00bfffd4 	movui	r2,65535
    7e00:	14c09236 	bltu	r2,r19,804c <__umoddi3+0x2a8>
    7e04:	00803fc4 	movi	r2,255
    7e08:	14c15c36 	bltu	r2,r19,837c <__umoddi3+0x5d8>
    7e0c:	000b883a 	mov	r5,zero
    7e10:	0005883a 	mov	r2,zero
    7e14:	9884d83a 	srl	r2,r19,r2
    7e18:	01000074 	movhi	r4,1
    7e1c:	21354d04 	addi	r4,r4,-10956
    7e20:	01800804 	movi	r6,32
    7e24:	1105883a 	add	r2,r2,r4
    7e28:	10c00003 	ldbu	r3,0(r2)
    7e2c:	28c7883a 	add	r3,r5,r3
    7e30:	30e5c83a 	sub	r18,r6,r3
    7e34:	9000a41e 	bne	r18,zero,80c8 <__umoddi3+0x324>
    7e38:	982ed43a 	srli	r23,r19,16
    7e3c:	acebc83a 	sub	r21,r21,r19
    7e40:	9d3fffcc 	andi	r20,r19,65535
    7e44:	002d883a 	mov	r22,zero
    7e48:	a809883a 	mov	r4,r21
    7e4c:	b80b883a 	mov	r5,r23
    7e50:	000966c0 	call	966c <__udivsi3>
    7e54:	100b883a 	mov	r5,r2
    7e58:	a009883a 	mov	r4,r20
    7e5c:	000967c0 	call	967c <__mulsi3>
    7e60:	a809883a 	mov	r4,r21
    7e64:	b80b883a 	mov	r5,r23
    7e68:	1023883a 	mov	r17,r2
    7e6c:	00096740 	call	9674 <__umodsi3>
    7e70:	1004943a 	slli	r2,r2,16
    7e74:	8006d43a 	srli	r3,r16,16
    7e78:	10c4b03a 	or	r2,r2,r3
    7e7c:	1440032e 	bgeu	r2,r17,7e8c <__umoddi3+0xe8>
    7e80:	14c5883a 	add	r2,r2,r19
    7e84:	14c00136 	bltu	r2,r19,7e8c <__umoddi3+0xe8>
    7e88:	14415836 	bltu	r2,r17,83ec <__umoddi3+0x648>
    7e8c:	1463c83a 	sub	r17,r2,r17
    7e90:	8809883a 	mov	r4,r17
    7e94:	b80b883a 	mov	r5,r23
    7e98:	000966c0 	call	966c <__udivsi3>
    7e9c:	a009883a 	mov	r4,r20
    7ea0:	00005306 	br	7ff0 <__umoddi3+0x24c>
    7ea4:	380d883a 	mov	r6,r7
    7ea8:	29c0132e 	bgeu	r5,r7,7ef8 <__umoddi3+0x154>
    7eac:	d9000415 	stw	r4,16(sp)
    7eb0:	d9400515 	stw	r5,20(sp)
    7eb4:	d9400417 	ldw	r5,16(sp)
    7eb8:	5813883a 	mov	r9,r11
    7ebc:	2811883a 	mov	r8,r5
    7ec0:	4005883a 	mov	r2,r8
    7ec4:	4807883a 	mov	r3,r9
    7ec8:	dfc00f17 	ldw	ra,60(sp)
    7ecc:	df000e17 	ldw	fp,56(sp)
    7ed0:	ddc00d17 	ldw	r23,52(sp)
    7ed4:	dd800c17 	ldw	r22,48(sp)
    7ed8:	dd400b17 	ldw	r21,44(sp)
    7edc:	dd000a17 	ldw	r20,40(sp)
    7ee0:	dcc00917 	ldw	r19,36(sp)
    7ee4:	dc800817 	ldw	r18,32(sp)
    7ee8:	dc400717 	ldw	r17,28(sp)
    7eec:	dc000617 	ldw	r16,24(sp)
    7ef0:	dec01004 	addi	sp,sp,64
    7ef4:	f800283a 	ret
    7ef8:	00bfffd4 	movui	r2,65535
    7efc:	11c06636 	bltu	r2,r7,8098 <__umoddi3+0x2f4>
    7f00:	00803fc4 	movi	r2,255
    7f04:	11c12036 	bltu	r2,r7,8388 <__umoddi3+0x5e4>
    7f08:	000b883a 	mov	r5,zero
    7f0c:	0005883a 	mov	r2,zero
    7f10:	3084d83a 	srl	r2,r6,r2
    7f14:	01000074 	movhi	r4,1
    7f18:	21354d04 	addi	r4,r4,-10956
    7f1c:	01c00804 	movi	r7,32
    7f20:	1105883a 	add	r2,r2,r4
    7f24:	10c00003 	ldbu	r3,0(r2)
    7f28:	28c7883a 	add	r3,r5,r3
    7f2c:	38e5c83a 	sub	r18,r7,r3
    7f30:	9000941e 	bne	r18,zero,8184 <__umoddi3+0x3e0>
    7f34:	35405e36 	bltu	r6,r21,80b0 <__umoddi3+0x30c>
    7f38:	84c05d2e 	bgeu	r16,r19,80b0 <__umoddi3+0x30c>
    7f3c:	8011883a 	mov	r8,r16
    7f40:	a813883a 	mov	r9,r21
    7f44:	dc000415 	stw	r16,16(sp)
    7f48:	dd400515 	stw	r21,20(sp)
    7f4c:	003fdc06 	br	7ec0 <__umoddi3+0x11c>
    7f50:	00bfffd4 	movui	r2,65535
    7f54:	12004a36 	bltu	r2,r8,8080 <__umoddi3+0x2dc>
    7f58:	00803fc4 	movi	r2,255
    7f5c:	12010d36 	bltu	r2,r8,8394 <__umoddi3+0x5f0>
    7f60:	000b883a 	mov	r5,zero
    7f64:	0005883a 	mov	r2,zero
    7f68:	9884d83a 	srl	r2,r19,r2
    7f6c:	01000074 	movhi	r4,1
    7f70:	21354d04 	addi	r4,r4,-10956
    7f74:	01800804 	movi	r6,32
    7f78:	1105883a 	add	r2,r2,r4
    7f7c:	10c00003 	ldbu	r3,0(r2)
    7f80:	28c7883a 	add	r3,r5,r3
    7f84:	30c7c83a 	sub	r3,r6,r3
    7f88:	1800dc1e 	bne	r3,zero,82fc <__umoddi3+0x558>
    7f8c:	002d883a 	mov	r22,zero
    7f90:	982ed43a 	srli	r23,r19,16
    7f94:	a809883a 	mov	r4,r21
    7f98:	9cbfffcc 	andi	r18,r19,65535
    7f9c:	b80b883a 	mov	r5,r23
    7fa0:	000966c0 	call	966c <__udivsi3>
    7fa4:	100b883a 	mov	r5,r2
    7fa8:	9009883a 	mov	r4,r18
    7fac:	000967c0 	call	967c <__mulsi3>
    7fb0:	a809883a 	mov	r4,r21
    7fb4:	b80b883a 	mov	r5,r23
    7fb8:	1023883a 	mov	r17,r2
    7fbc:	00096740 	call	9674 <__umodsi3>
    7fc0:	1004943a 	slli	r2,r2,16
    7fc4:	8006d43a 	srli	r3,r16,16
    7fc8:	10c4b03a 	or	r2,r2,r3
    7fcc:	1440032e 	bgeu	r2,r17,7fdc <__umoddi3+0x238>
    7fd0:	14c5883a 	add	r2,r2,r19
    7fd4:	14c00136 	bltu	r2,r19,7fdc <__umoddi3+0x238>
    7fd8:	14410236 	bltu	r2,r17,83e4 <__umoddi3+0x640>
    7fdc:	1463c83a 	sub	r17,r2,r17
    7fe0:	8809883a 	mov	r4,r17
    7fe4:	b80b883a 	mov	r5,r23
    7fe8:	000966c0 	call	966c <__udivsi3>
    7fec:	9009883a 	mov	r4,r18
    7ff0:	100b883a 	mov	r5,r2
    7ff4:	000967c0 	call	967c <__mulsi3>
    7ff8:	8809883a 	mov	r4,r17
    7ffc:	b80b883a 	mov	r5,r23
    8000:	102b883a 	mov	r21,r2
    8004:	00096740 	call	9674 <__umodsi3>
    8008:	1004943a 	slli	r2,r2,16
    800c:	80ffffcc 	andi	r3,r16,65535
    8010:	10c4b03a 	or	r2,r2,r3
    8014:	1540042e 	bgeu	r2,r21,8028 <__umoddi3+0x284>
    8018:	14c5883a 	add	r2,r2,r19
    801c:	14c00236 	bltu	r2,r19,8028 <__umoddi3+0x284>
    8020:	1540012e 	bgeu	r2,r21,8028 <__umoddi3+0x284>
    8024:	14c5883a 	add	r2,r2,r19
    8028:	1545c83a 	sub	r2,r2,r21
    802c:	1584d83a 	srl	r2,r2,r22
    8030:	0013883a 	mov	r9,zero
    8034:	d8800415 	stw	r2,16(sp)
    8038:	d8c00417 	ldw	r3,16(sp)
    803c:	0005883a 	mov	r2,zero
    8040:	d8800515 	stw	r2,20(sp)
    8044:	1811883a 	mov	r8,r3
    8048:	003f9d06 	br	7ec0 <__umoddi3+0x11c>
    804c:	00804034 	movhi	r2,256
    8050:	10bfffc4 	addi	r2,r2,-1
    8054:	14c0c636 	bltu	r2,r19,8370 <__umoddi3+0x5cc>
    8058:	01400404 	movi	r5,16
    805c:	2805883a 	mov	r2,r5
    8060:	003f6c06 	br	7e14 <__umoddi3+0x70>
    8064:	01000044 	movi	r4,1
    8068:	000b883a 	mov	r5,zero
    806c:	000966c0 	call	966c <__udivsi3>
    8070:	1027883a 	mov	r19,r2
    8074:	00bfffd4 	movui	r2,65535
    8078:	14fff436 	bltu	r2,r19,804c <__umoddi3+0x2a8>
    807c:	003f6106 	br	7e04 <__umoddi3+0x60>
    8080:	00804034 	movhi	r2,256
    8084:	10bfffc4 	addi	r2,r2,-1
    8088:	1200c536 	bltu	r2,r8,83a0 <__umoddi3+0x5fc>
    808c:	01400404 	movi	r5,16
    8090:	2805883a 	mov	r2,r5
    8094:	003fb406 	br	7f68 <__umoddi3+0x1c4>
    8098:	00804034 	movhi	r2,256
    809c:	10bfffc4 	addi	r2,r2,-1
    80a0:	11c0c236 	bltu	r2,r7,83ac <__umoddi3+0x608>
    80a4:	01400404 	movi	r5,16
    80a8:	2805883a 	mov	r2,r5
    80ac:	003f9806 	br	7f10 <__umoddi3+0x16c>
    80b0:	84c9c83a 	sub	r4,r16,r19
    80b4:	8105803a 	cmpltu	r2,r16,r4
    80b8:	a987c83a 	sub	r3,r21,r6
    80bc:	18abc83a 	sub	r21,r3,r2
    80c0:	2021883a 	mov	r16,r4
    80c4:	003f9d06 	br	7f3c <__umoddi3+0x198>
    80c8:	9ca6983a 	sll	r19,r19,r18
    80cc:	3485c83a 	sub	r2,r6,r18
    80d0:	a8a2d83a 	srl	r17,r21,r2
    80d4:	982ed43a 	srli	r23,r19,16
    80d8:	ac86983a 	sll	r3,r21,r18
    80dc:	8084d83a 	srl	r2,r16,r2
    80e0:	8809883a 	mov	r4,r17
    80e4:	b80b883a 	mov	r5,r23
    80e8:	18b8b03a 	or	fp,r3,r2
    80ec:	9d3fffcc 	andi	r20,r19,65535
    80f0:	000966c0 	call	966c <__udivsi3>
    80f4:	100b883a 	mov	r5,r2
    80f8:	a009883a 	mov	r4,r20
    80fc:	000967c0 	call	967c <__mulsi3>
    8100:	8809883a 	mov	r4,r17
    8104:	b80b883a 	mov	r5,r23
    8108:	102b883a 	mov	r21,r2
    810c:	00096740 	call	9674 <__umodsi3>
    8110:	1004943a 	slli	r2,r2,16
    8114:	e006d43a 	srli	r3,fp,16
    8118:	902d883a 	mov	r22,r18
    811c:	10c4b03a 	or	r2,r2,r3
    8120:	1540022e 	bgeu	r2,r21,812c <__umoddi3+0x388>
    8124:	14c5883a 	add	r2,r2,r19
    8128:	14c0ab2e 	bgeu	r2,r19,83d8 <__umoddi3+0x634>
    812c:	1563c83a 	sub	r17,r2,r21
    8130:	8809883a 	mov	r4,r17
    8134:	b80b883a 	mov	r5,r23
    8138:	000966c0 	call	966c <__udivsi3>
    813c:	100b883a 	mov	r5,r2
    8140:	a009883a 	mov	r4,r20
    8144:	000967c0 	call	967c <__mulsi3>
    8148:	8809883a 	mov	r4,r17
    814c:	b80b883a 	mov	r5,r23
    8150:	102b883a 	mov	r21,r2
    8154:	00096740 	call	9674 <__umodsi3>
    8158:	1004943a 	slli	r2,r2,16
    815c:	e0ffffcc 	andi	r3,fp,65535
    8160:	10c4b03a 	or	r2,r2,r3
    8164:	1540042e 	bgeu	r2,r21,8178 <__umoddi3+0x3d4>
    8168:	14c5883a 	add	r2,r2,r19
    816c:	14c00236 	bltu	r2,r19,8178 <__umoddi3+0x3d4>
    8170:	1540012e 	bgeu	r2,r21,8178 <__umoddi3+0x3d4>
    8174:	14c5883a 	add	r2,r2,r19
    8178:	84a0983a 	sll	r16,r16,r18
    817c:	156bc83a 	sub	r21,r2,r21
    8180:	003f3106 	br	7e48 <__umoddi3+0xa4>
    8184:	3c8fc83a 	sub	r7,r7,r18
    8188:	3486983a 	sll	r3,r6,r18
    818c:	99c4d83a 	srl	r2,r19,r7
    8190:	a9e2d83a 	srl	r17,r21,r7
    8194:	ac8c983a 	sll	r6,r21,r18
    8198:	18acb03a 	or	r22,r3,r2
    819c:	b02ed43a 	srli	r23,r22,16
    81a0:	81c4d83a 	srl	r2,r16,r7
    81a4:	8809883a 	mov	r4,r17
    81a8:	b80b883a 	mov	r5,r23
    81ac:	308cb03a 	or	r6,r6,r2
    81b0:	d9c00315 	stw	r7,12(sp)
    81b4:	d9800215 	stw	r6,8(sp)
    81b8:	b53fffcc 	andi	r20,r22,65535
    81bc:	000966c0 	call	966c <__udivsi3>
    81c0:	100b883a 	mov	r5,r2
    81c4:	a009883a 	mov	r4,r20
    81c8:	1039883a 	mov	fp,r2
    81cc:	000967c0 	call	967c <__mulsi3>
    81d0:	8809883a 	mov	r4,r17
    81d4:	b80b883a 	mov	r5,r23
    81d8:	102b883a 	mov	r21,r2
    81dc:	00096740 	call	9674 <__umodsi3>
    81e0:	d9000217 	ldw	r4,8(sp)
    81e4:	1004943a 	slli	r2,r2,16
    81e8:	9ca6983a 	sll	r19,r19,r18
    81ec:	2006d43a 	srli	r3,r4,16
    81f0:	84a0983a 	sll	r16,r16,r18
    81f4:	dcc00015 	stw	r19,0(sp)
    81f8:	10c4b03a 	or	r2,r2,r3
    81fc:	dc000115 	stw	r16,4(sp)
    8200:	1540032e 	bgeu	r2,r21,8210 <__umoddi3+0x46c>
    8204:	1585883a 	add	r2,r2,r22
    8208:	e73fffc4 	addi	fp,fp,-1
    820c:	15806e2e 	bgeu	r2,r22,83c8 <__umoddi3+0x624>
    8210:	1563c83a 	sub	r17,r2,r21
    8214:	8809883a 	mov	r4,r17
    8218:	b80b883a 	mov	r5,r23
    821c:	000966c0 	call	966c <__udivsi3>
    8220:	100b883a 	mov	r5,r2
    8224:	a009883a 	mov	r4,r20
    8228:	1021883a 	mov	r16,r2
    822c:	000967c0 	call	967c <__mulsi3>
    8230:	b80b883a 	mov	r5,r23
    8234:	8809883a 	mov	r4,r17
    8238:	1029883a 	mov	r20,r2
    823c:	00096740 	call	9674 <__umodsi3>
    8240:	d9400217 	ldw	r5,8(sp)
    8244:	1004943a 	slli	r2,r2,16
    8248:	28ffffcc 	andi	r3,r5,65535
    824c:	10c4b03a 	or	r2,r2,r3
    8250:	1500032e 	bgeu	r2,r20,8260 <__umoddi3+0x4bc>
    8254:	1585883a 	add	r2,r2,r22
    8258:	843fffc4 	addi	r16,r16,-1
    825c:	1580562e 	bgeu	r2,r22,83b8 <__umoddi3+0x614>
    8260:	d9800017 	ldw	r6,0(sp)
    8264:	e022943a 	slli	r17,fp,16
    8268:	302ed43a 	srli	r23,r6,16
    826c:	8462b03a 	or	r17,r16,r17
    8270:	34ffffcc 	andi	r19,r6,65535
    8274:	882ad43a 	srli	r21,r17,16
    8278:	8c7fffcc 	andi	r17,r17,65535
    827c:	8809883a 	mov	r4,r17
    8280:	980b883a 	mov	r5,r19
    8284:	1521c83a 	sub	r16,r2,r20
    8288:	000967c0 	call	967c <__mulsi3>
    828c:	8809883a 	mov	r4,r17
    8290:	b80b883a 	mov	r5,r23
    8294:	1029883a 	mov	r20,r2
    8298:	000967c0 	call	967c <__mulsi3>
    829c:	980b883a 	mov	r5,r19
    82a0:	a809883a 	mov	r4,r21
    82a4:	1023883a 	mov	r17,r2
    82a8:	000967c0 	call	967c <__mulsi3>
    82ac:	a809883a 	mov	r4,r21
    82b0:	b80b883a 	mov	r5,r23
    82b4:	1027883a 	mov	r19,r2
    82b8:	000967c0 	call	967c <__mulsi3>
    82bc:	100b883a 	mov	r5,r2
    82c0:	a004d43a 	srli	r2,r20,16
    82c4:	8ce3883a 	add	r17,r17,r19
    82c8:	1449883a 	add	r4,r2,r17
    82cc:	24c0022e 	bgeu	r4,r19,82d8 <__umoddi3+0x534>
    82d0:	00800074 	movhi	r2,1
    82d4:	288b883a 	add	r5,r5,r2
    82d8:	2004d43a 	srli	r2,r4,16
    82dc:	2008943a 	slli	r4,r4,16
    82e0:	a0ffffcc 	andi	r3,r20,65535
    82e4:	288d883a 	add	r6,r5,r2
    82e8:	20c9883a 	add	r4,r4,r3
    82ec:	81800b36 	bltu	r16,r6,831c <__umoddi3+0x578>
    82f0:	81804026 	beq	r16,r6,83f4 <__umoddi3+0x650>
    82f4:	818dc83a 	sub	r6,r16,r6
    82f8:	00000f06 	br	8338 <__umoddi3+0x594>
    82fc:	30c5c83a 	sub	r2,r6,r3
    8300:	182d883a 	mov	r22,r3
    8304:	8084d83a 	srl	r2,r16,r2
    8308:	a8c6983a 	sll	r3,r21,r3
    830c:	9da6983a 	sll	r19,r19,r22
    8310:	85a0983a 	sll	r16,r16,r22
    8314:	18aab03a 	or	r21,r3,r2
    8318:	003f1d06 	br	7f90 <__umoddi3+0x1ec>
    831c:	d8c00017 	ldw	r3,0(sp)
    8320:	20c5c83a 	sub	r2,r4,r3
    8324:	2089803a 	cmpltu	r4,r4,r2
    8328:	3587c83a 	sub	r3,r6,r22
    832c:	1907c83a 	sub	r3,r3,r4
    8330:	80cdc83a 	sub	r6,r16,r3
    8334:	1009883a 	mov	r4,r2
    8338:	d9400117 	ldw	r5,4(sp)
    833c:	2905c83a 	sub	r2,r5,r4
    8340:	2887803a 	cmpltu	r3,r5,r2
    8344:	30c7c83a 	sub	r3,r6,r3
    8348:	d9800317 	ldw	r6,12(sp)
    834c:	1484d83a 	srl	r2,r2,r18
    8350:	1988983a 	sll	r4,r3,r6
    8354:	1c86d83a 	srl	r3,r3,r18
    8358:	2088b03a 	or	r4,r4,r2
    835c:	2011883a 	mov	r8,r4
    8360:	1813883a 	mov	r9,r3
    8364:	d9000415 	stw	r4,16(sp)
    8368:	d8c00515 	stw	r3,20(sp)
    836c:	003ed406 	br	7ec0 <__umoddi3+0x11c>
    8370:	01400604 	movi	r5,24
    8374:	2805883a 	mov	r2,r5
    8378:	003ea606 	br	7e14 <__umoddi3+0x70>
    837c:	01400204 	movi	r5,8
    8380:	2805883a 	mov	r2,r5
    8384:	003ea306 	br	7e14 <__umoddi3+0x70>
    8388:	01400204 	movi	r5,8
    838c:	2805883a 	mov	r2,r5
    8390:	003edf06 	br	7f10 <__umoddi3+0x16c>
    8394:	01400204 	movi	r5,8
    8398:	2805883a 	mov	r2,r5
    839c:	003ef206 	br	7f68 <__umoddi3+0x1c4>
    83a0:	01400604 	movi	r5,24
    83a4:	2805883a 	mov	r2,r5
    83a8:	003eef06 	br	7f68 <__umoddi3+0x1c4>
    83ac:	01400604 	movi	r5,24
    83b0:	2805883a 	mov	r2,r5
    83b4:	003ed606 	br	7f10 <__umoddi3+0x16c>
    83b8:	153fa92e 	bgeu	r2,r20,8260 <__umoddi3+0x4bc>
    83bc:	843fffc4 	addi	r16,r16,-1
    83c0:	1585883a 	add	r2,r2,r22
    83c4:	003fa606 	br	8260 <__umoddi3+0x4bc>
    83c8:	157f912e 	bgeu	r2,r21,8210 <__umoddi3+0x46c>
    83cc:	e73fffc4 	addi	fp,fp,-1
    83d0:	1585883a 	add	r2,r2,r22
    83d4:	003f8e06 	br	8210 <__umoddi3+0x46c>
    83d8:	157f542e 	bgeu	r2,r21,812c <__umoddi3+0x388>
    83dc:	14c5883a 	add	r2,r2,r19
    83e0:	003f5206 	br	812c <__umoddi3+0x388>
    83e4:	14c5883a 	add	r2,r2,r19
    83e8:	003efc06 	br	7fdc <__umoddi3+0x238>
    83ec:	14c5883a 	add	r2,r2,r19
    83f0:	003ea606 	br	7e8c <__umoddi3+0xe8>
    83f4:	d8800117 	ldw	r2,4(sp)
    83f8:	113fc836 	bltu	r2,r4,831c <__umoddi3+0x578>
    83fc:	000d883a 	mov	r6,zero
    8400:	003fcd06 	br	8338 <__umoddi3+0x594>

00008404 <_fpadd_parts>:
    8404:	defff804 	addi	sp,sp,-32
    8408:	dcc00315 	stw	r19,12(sp)
    840c:	2027883a 	mov	r19,r4
    8410:	21000017 	ldw	r4,0(r4)
    8414:	00c00044 	movi	r3,1
    8418:	dd400515 	stw	r21,20(sp)
    841c:	dd000415 	stw	r20,16(sp)
    8420:	ddc00715 	stw	r23,28(sp)
    8424:	dd800615 	stw	r22,24(sp)
    8428:	dc800215 	stw	r18,8(sp)
    842c:	dc400115 	stw	r17,4(sp)
    8430:	dc000015 	stw	r16,0(sp)
    8434:	282b883a 	mov	r21,r5
    8438:	3029883a 	mov	r20,r6
    843c:	1900632e 	bgeu	r3,r4,85cc <_fpadd_parts+0x1c8>
    8440:	28800017 	ldw	r2,0(r5)
    8444:	1880812e 	bgeu	r3,r2,864c <_fpadd_parts+0x248>
    8448:	00c00104 	movi	r3,4
    844c:	20c0dc26 	beq	r4,r3,87c0 <_fpadd_parts+0x3bc>
    8450:	10c07e26 	beq	r2,r3,864c <_fpadd_parts+0x248>
    8454:	00c00084 	movi	r3,2
    8458:	10c06726 	beq	r2,r3,85f8 <_fpadd_parts+0x1f4>
    845c:	20c07b26 	beq	r4,r3,864c <_fpadd_parts+0x248>
    8460:	9dc00217 	ldw	r23,8(r19)
    8464:	28c00217 	ldw	r3,8(r5)
    8468:	9c400317 	ldw	r17,12(r19)
    846c:	2bc00317 	ldw	r15,12(r5)
    8470:	b8cdc83a 	sub	r6,r23,r3
    8474:	9c800417 	ldw	r18,16(r19)
    8478:	2c000417 	ldw	r16,16(r5)
    847c:	3009883a 	mov	r4,r6
    8480:	30009716 	blt	r6,zero,86e0 <_fpadd_parts+0x2dc>
    8484:	00800fc4 	movi	r2,63
    8488:	11806b16 	blt	r2,r6,8638 <_fpadd_parts+0x234>
    848c:	0100a40e 	bge	zero,r4,8720 <_fpadd_parts+0x31c>
    8490:	35bff804 	addi	r22,r6,-32
    8494:	b000bc16 	blt	r22,zero,8788 <_fpadd_parts+0x384>
    8498:	8596d83a 	srl	r11,r16,r22
    849c:	0019883a 	mov	r12,zero
    84a0:	0013883a 	mov	r9,zero
    84a4:	01000044 	movi	r4,1
    84a8:	0015883a 	mov	r10,zero
    84ac:	b000be16 	blt	r22,zero,87a8 <_fpadd_parts+0x3a4>
    84b0:	2590983a 	sll	r8,r4,r22
    84b4:	000f883a 	mov	r7,zero
    84b8:	00bfffc4 	movi	r2,-1
    84bc:	3889883a 	add	r4,r7,r2
    84c0:	408b883a 	add	r5,r8,r2
    84c4:	21cd803a 	cmpltu	r6,r4,r7
    84c8:	314b883a 	add	r5,r6,r5
    84cc:	7904703a 	and	r2,r15,r4
    84d0:	8146703a 	and	r3,r16,r5
    84d4:	10c4b03a 	or	r2,r2,r3
    84d8:	10000226 	beq	r2,zero,84e4 <_fpadd_parts+0xe0>
    84dc:	02400044 	movi	r9,1
    84e0:	0015883a 	mov	r10,zero
    84e4:	5a5eb03a 	or	r15,r11,r9
    84e8:	62a0b03a 	or	r16,r12,r10
    84ec:	99400117 	ldw	r5,4(r19)
    84f0:	a8800117 	ldw	r2,4(r21)
    84f4:	28806e26 	beq	r5,r2,86b0 <_fpadd_parts+0x2ac>
    84f8:	28006626 	beq	r5,zero,8694 <_fpadd_parts+0x290>
    84fc:	7c45c83a 	sub	r2,r15,r17
    8500:	7889803a 	cmpltu	r4,r15,r2
    8504:	8487c83a 	sub	r3,r16,r18
    8508:	1909c83a 	sub	r4,r3,r4
    850c:	100d883a 	mov	r6,r2
    8510:	200f883a 	mov	r7,r4
    8514:	38007716 	blt	r7,zero,86f4 <_fpadd_parts+0x2f0>
    8518:	a5c00215 	stw	r23,8(r20)
    851c:	a1c00415 	stw	r7,16(r20)
    8520:	a0000115 	stw	zero,4(r20)
    8524:	a1800315 	stw	r6,12(r20)
    8528:	a2000317 	ldw	r8,12(r20)
    852c:	a2400417 	ldw	r9,16(r20)
    8530:	00bfffc4 	movi	r2,-1
    8534:	408b883a 	add	r5,r8,r2
    8538:	2a09803a 	cmpltu	r4,r5,r8
    853c:	488d883a 	add	r6,r9,r2
    8540:	01c40034 	movhi	r7,4096
    8544:	39ffffc4 	addi	r7,r7,-1
    8548:	218d883a 	add	r6,r4,r6
    854c:	39801736 	bltu	r7,r6,85ac <_fpadd_parts+0x1a8>
    8550:	31c06526 	beq	r6,r7,86e8 <_fpadd_parts+0x2e4>
    8554:	a3000217 	ldw	r12,8(r20)
    8558:	4209883a 	add	r4,r8,r8
    855c:	00bfffc4 	movi	r2,-1
    8560:	220f803a 	cmpltu	r7,r4,r8
    8564:	4a4b883a 	add	r5,r9,r9
    8568:	394f883a 	add	r7,r7,r5
    856c:	2095883a 	add	r10,r4,r2
    8570:	3897883a 	add	r11,r7,r2
    8574:	510d803a 	cmpltu	r6,r10,r4
    8578:	6099883a 	add	r12,r12,r2
    857c:	32d7883a 	add	r11,r6,r11
    8580:	00840034 	movhi	r2,4096
    8584:	10bfffc4 	addi	r2,r2,-1
    8588:	2011883a 	mov	r8,r4
    858c:	3813883a 	mov	r9,r7
    8590:	a1000315 	stw	r4,12(r20)
    8594:	a1c00415 	stw	r7,16(r20)
    8598:	a3000215 	stw	r12,8(r20)
    859c:	12c00336 	bltu	r2,r11,85ac <_fpadd_parts+0x1a8>
    85a0:	58bfed1e 	bne	r11,r2,8558 <_fpadd_parts+0x154>
    85a4:	00bfff84 	movi	r2,-2
    85a8:	12bfeb2e 	bgeu	r2,r10,8558 <_fpadd_parts+0x154>
    85ac:	a2800417 	ldw	r10,16(r20)
    85b0:	008000c4 	movi	r2,3
    85b4:	00c80034 	movhi	r3,8192
    85b8:	18ffffc4 	addi	r3,r3,-1
    85bc:	a2400317 	ldw	r9,12(r20)
    85c0:	a0800015 	stw	r2,0(r20)
    85c4:	1a802336 	bltu	r3,r10,8654 <_fpadd_parts+0x250>
    85c8:	a027883a 	mov	r19,r20
    85cc:	9805883a 	mov	r2,r19
    85d0:	ddc00717 	ldw	r23,28(sp)
    85d4:	dd800617 	ldw	r22,24(sp)
    85d8:	dd400517 	ldw	r21,20(sp)
    85dc:	dd000417 	ldw	r20,16(sp)
    85e0:	dcc00317 	ldw	r19,12(sp)
    85e4:	dc800217 	ldw	r18,8(sp)
    85e8:	dc400117 	ldw	r17,4(sp)
    85ec:	dc000017 	ldw	r16,0(sp)
    85f0:	dec00804 	addi	sp,sp,32
    85f4:	f800283a 	ret
    85f8:	20fff41e 	bne	r4,r3,85cc <_fpadd_parts+0x1c8>
    85fc:	31000015 	stw	r4,0(r6)
    8600:	98800117 	ldw	r2,4(r19)
    8604:	30800115 	stw	r2,4(r6)
    8608:	98c00217 	ldw	r3,8(r19)
    860c:	30c00215 	stw	r3,8(r6)
    8610:	98800317 	ldw	r2,12(r19)
    8614:	30800315 	stw	r2,12(r6)
    8618:	98c00417 	ldw	r3,16(r19)
    861c:	30c00415 	stw	r3,16(r6)
    8620:	98800117 	ldw	r2,4(r19)
    8624:	28c00117 	ldw	r3,4(r5)
    8628:	3027883a 	mov	r19,r6
    862c:	10c4703a 	and	r2,r2,r3
    8630:	30800115 	stw	r2,4(r6)
    8634:	003fe506 	br	85cc <_fpadd_parts+0x1c8>
    8638:	1dc02616 	blt	r3,r23,86d4 <_fpadd_parts+0x2d0>
    863c:	0023883a 	mov	r17,zero
    8640:	182f883a 	mov	r23,r3
    8644:	0025883a 	mov	r18,zero
    8648:	003fa806 	br	84ec <_fpadd_parts+0xe8>
    864c:	a827883a 	mov	r19,r21
    8650:	003fde06 	br	85cc <_fpadd_parts+0x1c8>
    8654:	01800044 	movi	r6,1
    8658:	500497fa 	slli	r2,r10,31
    865c:	4808d07a 	srli	r4,r9,1
    8660:	518ad83a 	srl	r5,r10,r6
    8664:	a2000217 	ldw	r8,8(r20)
    8668:	1108b03a 	or	r4,r2,r4
    866c:	0007883a 	mov	r3,zero
    8670:	4984703a 	and	r2,r9,r6
    8674:	208cb03a 	or	r6,r4,r2
    8678:	28ceb03a 	or	r7,r5,r3
    867c:	42000044 	addi	r8,r8,1
    8680:	a027883a 	mov	r19,r20
    8684:	a1c00415 	stw	r7,16(r20)
    8688:	a2000215 	stw	r8,8(r20)
    868c:	a1800315 	stw	r6,12(r20)
    8690:	003fce06 	br	85cc <_fpadd_parts+0x1c8>
    8694:	8bc5c83a 	sub	r2,r17,r15
    8698:	8889803a 	cmpltu	r4,r17,r2
    869c:	9407c83a 	sub	r3,r18,r16
    86a0:	1909c83a 	sub	r4,r3,r4
    86a4:	100d883a 	mov	r6,r2
    86a8:	200f883a 	mov	r7,r4
    86ac:	003f9906 	br	8514 <_fpadd_parts+0x110>
    86b0:	7c45883a 	add	r2,r15,r17
    86b4:	13c9803a 	cmpltu	r4,r2,r15
    86b8:	8487883a 	add	r3,r16,r18
    86bc:	20c9883a 	add	r4,r4,r3
    86c0:	a1400115 	stw	r5,4(r20)
    86c4:	a5c00215 	stw	r23,8(r20)
    86c8:	a0800315 	stw	r2,12(r20)
    86cc:	a1000415 	stw	r4,16(r20)
    86d0:	003fb606 	br	85ac <_fpadd_parts+0x1a8>
    86d4:	001f883a 	mov	r15,zero
    86d8:	0021883a 	mov	r16,zero
    86dc:	003f8306 	br	84ec <_fpadd_parts+0xe8>
    86e0:	018dc83a 	sub	r6,zero,r6
    86e4:	003f6706 	br	8484 <_fpadd_parts+0x80>
    86e8:	00bfff84 	movi	r2,-2
    86ec:	117faf36 	bltu	r2,r5,85ac <_fpadd_parts+0x1a8>
    86f0:	003f9806 	br	8554 <_fpadd_parts+0x150>
    86f4:	0005883a 	mov	r2,zero
    86f8:	1189c83a 	sub	r4,r2,r6
    86fc:	1105803a 	cmpltu	r2,r2,r4
    8700:	01cbc83a 	sub	r5,zero,r7
    8704:	2885c83a 	sub	r2,r5,r2
    8708:	01800044 	movi	r6,1
    870c:	a1800115 	stw	r6,4(r20)
    8710:	a5c00215 	stw	r23,8(r20)
    8714:	a1000315 	stw	r4,12(r20)
    8718:	a0800415 	stw	r2,16(r20)
    871c:	003f8206 	br	8528 <_fpadd_parts+0x124>
    8720:	203f7226 	beq	r4,zero,84ec <_fpadd_parts+0xe8>
    8724:	35bff804 	addi	r22,r6,-32
    8728:	b9af883a 	add	r23,r23,r6
    872c:	b0003116 	blt	r22,zero,87f4 <_fpadd_parts+0x3f0>
    8730:	959ad83a 	srl	r13,r18,r22
    8734:	001d883a 	mov	r14,zero
    8738:	000f883a 	mov	r7,zero
    873c:	01000044 	movi	r4,1
    8740:	0011883a 	mov	r8,zero
    8744:	b0002516 	blt	r22,zero,87dc <_fpadd_parts+0x3d8>
    8748:	2594983a 	sll	r10,r4,r22
    874c:	0013883a 	mov	r9,zero
    8750:	00bfffc4 	movi	r2,-1
    8754:	4889883a 	add	r4,r9,r2
    8758:	508b883a 	add	r5,r10,r2
    875c:	224d803a 	cmpltu	r6,r4,r9
    8760:	314b883a 	add	r5,r6,r5
    8764:	8904703a 	and	r2,r17,r4
    8768:	9146703a 	and	r3,r18,r5
    876c:	10c4b03a 	or	r2,r2,r3
    8770:	10000226 	beq	r2,zero,877c <_fpadd_parts+0x378>
    8774:	01c00044 	movi	r7,1
    8778:	0011883a 	mov	r8,zero
    877c:	69e2b03a 	or	r17,r13,r7
    8780:	7224b03a 	or	r18,r14,r8
    8784:	003f5906 	br	84ec <_fpadd_parts+0xe8>
    8788:	8407883a 	add	r3,r16,r16
    878c:	008007c4 	movi	r2,31
    8790:	1185c83a 	sub	r2,r2,r6
    8794:	1886983a 	sll	r3,r3,r2
    8798:	7996d83a 	srl	r11,r15,r6
    879c:	8198d83a 	srl	r12,r16,r6
    87a0:	1ad6b03a 	or	r11,r3,r11
    87a4:	003f3e06 	br	84a0 <_fpadd_parts+0x9c>
    87a8:	2006d07a 	srli	r3,r4,1
    87ac:	008007c4 	movi	r2,31
    87b0:	1185c83a 	sub	r2,r2,r6
    87b4:	1890d83a 	srl	r8,r3,r2
    87b8:	218e983a 	sll	r7,r4,r6
    87bc:	003f3e06 	br	84b8 <_fpadd_parts+0xb4>
    87c0:	113f821e 	bne	r2,r4,85cc <_fpadd_parts+0x1c8>
    87c4:	28c00117 	ldw	r3,4(r5)
    87c8:	98800117 	ldw	r2,4(r19)
    87cc:	10ff7f26 	beq	r2,r3,85cc <_fpadd_parts+0x1c8>
    87d0:	04c00074 	movhi	r19,1
    87d4:	9cf54804 	addi	r19,r19,-10976
    87d8:	003f7c06 	br	85cc <_fpadd_parts+0x1c8>
    87dc:	2006d07a 	srli	r3,r4,1
    87e0:	008007c4 	movi	r2,31
    87e4:	1185c83a 	sub	r2,r2,r6
    87e8:	1894d83a 	srl	r10,r3,r2
    87ec:	2192983a 	sll	r9,r4,r6
    87f0:	003fd706 	br	8750 <_fpadd_parts+0x34c>
    87f4:	9487883a 	add	r3,r18,r18
    87f8:	008007c4 	movi	r2,31
    87fc:	1185c83a 	sub	r2,r2,r6
    8800:	1886983a 	sll	r3,r3,r2
    8804:	899ad83a 	srl	r13,r17,r6
    8808:	919cd83a 	srl	r14,r18,r6
    880c:	1b5ab03a 	or	r13,r3,r13
    8810:	003fc906 	br	8738 <_fpadd_parts+0x334>

00008814 <__subdf3>:
    8814:	deffea04 	addi	sp,sp,-88
    8818:	dcc01415 	stw	r19,80(sp)
    881c:	dcc00404 	addi	r19,sp,16
    8820:	2011883a 	mov	r8,r4
    8824:	2813883a 	mov	r9,r5
    8828:	dc401315 	stw	r17,76(sp)
    882c:	d809883a 	mov	r4,sp
    8830:	980b883a 	mov	r5,r19
    8834:	dc400904 	addi	r17,sp,36
    8838:	dfc01515 	stw	ra,84(sp)
    883c:	da400115 	stw	r9,4(sp)
    8840:	d9c00315 	stw	r7,12(sp)
    8844:	da000015 	stw	r8,0(sp)
    8848:	d9800215 	stw	r6,8(sp)
    884c:	0009b6c0 	call	9b6c <__unpack_d>
    8850:	d9000204 	addi	r4,sp,8
    8854:	880b883a 	mov	r5,r17
    8858:	0009b6c0 	call	9b6c <__unpack_d>
    885c:	d8800a17 	ldw	r2,40(sp)
    8860:	880b883a 	mov	r5,r17
    8864:	9809883a 	mov	r4,r19
    8868:	d9800e04 	addi	r6,sp,56
    886c:	1080005c 	xori	r2,r2,1
    8870:	d8800a15 	stw	r2,40(sp)
    8874:	00084040 	call	8404 <_fpadd_parts>
    8878:	1009883a 	mov	r4,r2
    887c:	00098580 	call	9858 <__pack_d>
    8880:	dfc01517 	ldw	ra,84(sp)
    8884:	dcc01417 	ldw	r19,80(sp)
    8888:	dc401317 	ldw	r17,76(sp)
    888c:	dec01604 	addi	sp,sp,88
    8890:	f800283a 	ret

00008894 <__adddf3>:
    8894:	deffea04 	addi	sp,sp,-88
    8898:	dcc01415 	stw	r19,80(sp)
    889c:	dcc00404 	addi	r19,sp,16
    88a0:	2011883a 	mov	r8,r4
    88a4:	2813883a 	mov	r9,r5
    88a8:	dc401315 	stw	r17,76(sp)
    88ac:	d809883a 	mov	r4,sp
    88b0:	980b883a 	mov	r5,r19
    88b4:	dc400904 	addi	r17,sp,36
    88b8:	dfc01515 	stw	ra,84(sp)
    88bc:	da400115 	stw	r9,4(sp)
    88c0:	d9c00315 	stw	r7,12(sp)
    88c4:	da000015 	stw	r8,0(sp)
    88c8:	d9800215 	stw	r6,8(sp)
    88cc:	0009b6c0 	call	9b6c <__unpack_d>
    88d0:	d9000204 	addi	r4,sp,8
    88d4:	880b883a 	mov	r5,r17
    88d8:	0009b6c0 	call	9b6c <__unpack_d>
    88dc:	d9800e04 	addi	r6,sp,56
    88e0:	9809883a 	mov	r4,r19
    88e4:	880b883a 	mov	r5,r17
    88e8:	00084040 	call	8404 <_fpadd_parts>
    88ec:	1009883a 	mov	r4,r2
    88f0:	00098580 	call	9858 <__pack_d>
    88f4:	dfc01517 	ldw	ra,84(sp)
    88f8:	dcc01417 	ldw	r19,80(sp)
    88fc:	dc401317 	ldw	r17,76(sp)
    8900:	dec01604 	addi	sp,sp,88
    8904:	f800283a 	ret

00008908 <__muldf3>:
    8908:	deffe004 	addi	sp,sp,-128
    890c:	dc401815 	stw	r17,96(sp)
    8910:	dc400404 	addi	r17,sp,16
    8914:	2011883a 	mov	r8,r4
    8918:	2813883a 	mov	r9,r5
    891c:	dc001715 	stw	r16,92(sp)
    8920:	d809883a 	mov	r4,sp
    8924:	880b883a 	mov	r5,r17
    8928:	dc000904 	addi	r16,sp,36
    892c:	dfc01f15 	stw	ra,124(sp)
    8930:	da400115 	stw	r9,4(sp)
    8934:	d9c00315 	stw	r7,12(sp)
    8938:	da000015 	stw	r8,0(sp)
    893c:	d9800215 	stw	r6,8(sp)
    8940:	ddc01e15 	stw	r23,120(sp)
    8944:	dd801d15 	stw	r22,116(sp)
    8948:	dd401c15 	stw	r21,112(sp)
    894c:	dd001b15 	stw	r20,108(sp)
    8950:	dcc01a15 	stw	r19,104(sp)
    8954:	dc801915 	stw	r18,100(sp)
    8958:	0009b6c0 	call	9b6c <__unpack_d>
    895c:	d9000204 	addi	r4,sp,8
    8960:	800b883a 	mov	r5,r16
    8964:	0009b6c0 	call	9b6c <__unpack_d>
    8968:	d9000417 	ldw	r4,16(sp)
    896c:	00800044 	movi	r2,1
    8970:	1100102e 	bgeu	r2,r4,89b4 <__muldf3+0xac>
    8974:	d8c00917 	ldw	r3,36(sp)
    8978:	10c0062e 	bgeu	r2,r3,8994 <__muldf3+0x8c>
    897c:	00800104 	movi	r2,4
    8980:	20800a26 	beq	r4,r2,89ac <__muldf3+0xa4>
    8984:	1880cc26 	beq	r3,r2,8cb8 <__muldf3+0x3b0>
    8988:	00800084 	movi	r2,2
    898c:	20800926 	beq	r4,r2,89b4 <__muldf3+0xac>
    8990:	1880191e 	bne	r3,r2,89f8 <__muldf3+0xf0>
    8994:	d8c00a17 	ldw	r3,40(sp)
    8998:	d8800517 	ldw	r2,20(sp)
    899c:	8009883a 	mov	r4,r16
    89a0:	10c4c03a 	cmpne	r2,r2,r3
    89a4:	d8800a15 	stw	r2,40(sp)
    89a8:	00000706 	br	89c8 <__muldf3+0xc0>
    89ac:	00800084 	movi	r2,2
    89b0:	1880c326 	beq	r3,r2,8cc0 <__muldf3+0x3b8>
    89b4:	d8800517 	ldw	r2,20(sp)
    89b8:	d8c00a17 	ldw	r3,40(sp)
    89bc:	8809883a 	mov	r4,r17
    89c0:	10c4c03a 	cmpne	r2,r2,r3
    89c4:	d8800515 	stw	r2,20(sp)
    89c8:	00098580 	call	9858 <__pack_d>
    89cc:	dfc01f17 	ldw	ra,124(sp)
    89d0:	ddc01e17 	ldw	r23,120(sp)
    89d4:	dd801d17 	ldw	r22,116(sp)
    89d8:	dd401c17 	ldw	r21,112(sp)
    89dc:	dd001b17 	ldw	r20,108(sp)
    89e0:	dcc01a17 	ldw	r19,104(sp)
    89e4:	dc801917 	ldw	r18,100(sp)
    89e8:	dc401817 	ldw	r17,96(sp)
    89ec:	dc001717 	ldw	r16,92(sp)
    89f0:	dec02004 	addi	sp,sp,128
    89f4:	f800283a 	ret
    89f8:	dd800717 	ldw	r22,28(sp)
    89fc:	dc800c17 	ldw	r18,48(sp)
    8a00:	002b883a 	mov	r21,zero
    8a04:	0023883a 	mov	r17,zero
    8a08:	a80b883a 	mov	r5,r21
    8a0c:	b00d883a 	mov	r6,r22
    8a10:	880f883a 	mov	r7,r17
    8a14:	ddc00817 	ldw	r23,32(sp)
    8a18:	dcc00d17 	ldw	r19,52(sp)
    8a1c:	9009883a 	mov	r4,r18
    8a20:	00096b40 	call	96b4 <__muldi3>
    8a24:	001b883a 	mov	r13,zero
    8a28:	680f883a 	mov	r7,r13
    8a2c:	b009883a 	mov	r4,r22
    8a30:	000b883a 	mov	r5,zero
    8a34:	980d883a 	mov	r6,r19
    8a38:	b82d883a 	mov	r22,r23
    8a3c:	002f883a 	mov	r23,zero
    8a40:	db401615 	stw	r13,88(sp)
    8a44:	d8801315 	stw	r2,76(sp)
    8a48:	d8c01415 	stw	r3,80(sp)
    8a4c:	dcc01515 	stw	r19,84(sp)
    8a50:	00096b40 	call	96b4 <__muldi3>
    8a54:	b00d883a 	mov	r6,r22
    8a58:	000b883a 	mov	r5,zero
    8a5c:	9009883a 	mov	r4,r18
    8a60:	b80f883a 	mov	r7,r23
    8a64:	1021883a 	mov	r16,r2
    8a68:	1823883a 	mov	r17,r3
    8a6c:	00096b40 	call	96b4 <__muldi3>
    8a70:	8085883a 	add	r2,r16,r2
    8a74:	140d803a 	cmpltu	r6,r2,r16
    8a78:	88c7883a 	add	r3,r17,r3
    8a7c:	30cd883a 	add	r6,r6,r3
    8a80:	1029883a 	mov	r20,r2
    8a84:	302b883a 	mov	r21,r6
    8a88:	da801317 	ldw	r10,76(sp)
    8a8c:	dac01417 	ldw	r11,80(sp)
    8a90:	db001517 	ldw	r12,84(sp)
    8a94:	db401617 	ldw	r13,88(sp)
    8a98:	3440612e 	bgeu	r6,r17,8c20 <__muldf3+0x318>
    8a9c:	0009883a 	mov	r4,zero
    8aa0:	5105883a 	add	r2,r10,r4
    8aa4:	128d803a 	cmpltu	r6,r2,r10
    8aa8:	5d07883a 	add	r3,r11,r20
    8aac:	30cd883a 	add	r6,r6,r3
    8ab0:	0021883a 	mov	r16,zero
    8ab4:	04400044 	movi	r17,1
    8ab8:	1025883a 	mov	r18,r2
    8abc:	3027883a 	mov	r19,r6
    8ac0:	32c06236 	bltu	r6,r11,8c4c <__muldf3+0x344>
    8ac4:	59807a26 	beq	r11,r6,8cb0 <__muldf3+0x3a8>
    8ac8:	680b883a 	mov	r5,r13
    8acc:	b80f883a 	mov	r7,r23
    8ad0:	6009883a 	mov	r4,r12
    8ad4:	b00d883a 	mov	r6,r22
    8ad8:	00096b40 	call	96b4 <__muldi3>
    8adc:	1009883a 	mov	r4,r2
    8ae0:	000f883a 	mov	r7,zero
    8ae4:	1545883a 	add	r2,r2,r21
    8ae8:	1111803a 	cmpltu	r8,r2,r4
    8aec:	19c7883a 	add	r3,r3,r7
    8af0:	40c7883a 	add	r3,r8,r3
    8af4:	88cb883a 	add	r5,r17,r3
    8af8:	d8c00617 	ldw	r3,24(sp)
    8afc:	8089883a 	add	r4,r16,r2
    8b00:	d8800b17 	ldw	r2,44(sp)
    8b04:	18c00104 	addi	r3,r3,4
    8b08:	240d803a 	cmpltu	r6,r4,r16
    8b0c:	10c7883a 	add	r3,r2,r3
    8b10:	2013883a 	mov	r9,r4
    8b14:	d8800a17 	ldw	r2,40(sp)
    8b18:	d9000517 	ldw	r4,20(sp)
    8b1c:	314d883a 	add	r6,r6,r5
    8b20:	3015883a 	mov	r10,r6
    8b24:	2088c03a 	cmpne	r4,r4,r2
    8b28:	00880034 	movhi	r2,8192
    8b2c:	10bfffc4 	addi	r2,r2,-1
    8b30:	d9000f15 	stw	r4,60(sp)
    8b34:	d8c01015 	stw	r3,64(sp)
    8b38:	1180162e 	bgeu	r2,r6,8b94 <__muldf3+0x28c>
    8b3c:	1811883a 	mov	r8,r3
    8b40:	101f883a 	mov	r15,r2
    8b44:	980497fa 	slli	r2,r19,31
    8b48:	9016d07a 	srli	r11,r18,1
    8b4c:	500697fa 	slli	r3,r10,31
    8b50:	480cd07a 	srli	r6,r9,1
    8b54:	500ed07a 	srli	r7,r10,1
    8b58:	12d6b03a 	or	r11,r2,r11
    8b5c:	00800044 	movi	r2,1
    8b60:	198cb03a 	or	r6,r3,r6
    8b64:	4888703a 	and	r4,r9,r2
    8b68:	9818d07a 	srli	r12,r19,1
    8b6c:	001b883a 	mov	r13,zero
    8b70:	03a00034 	movhi	r14,32768
    8b74:	3013883a 	mov	r9,r6
    8b78:	3815883a 	mov	r10,r7
    8b7c:	4091883a 	add	r8,r8,r2
    8b80:	20000226 	beq	r4,zero,8b8c <__muldf3+0x284>
    8b84:	5b64b03a 	or	r18,r11,r13
    8b88:	63a6b03a 	or	r19,r12,r14
    8b8c:	7abfed36 	bltu	r15,r10,8b44 <__muldf3+0x23c>
    8b90:	da001015 	stw	r8,64(sp)
    8b94:	00840034 	movhi	r2,4096
    8b98:	10bfffc4 	addi	r2,r2,-1
    8b9c:	12801436 	bltu	r2,r10,8bf0 <__muldf3+0x2e8>
    8ba0:	da001017 	ldw	r8,64(sp)
    8ba4:	101f883a 	mov	r15,r2
    8ba8:	4a45883a 	add	r2,r9,r9
    8bac:	124d803a 	cmpltu	r6,r2,r9
    8bb0:	5287883a 	add	r3,r10,r10
    8bb4:	9497883a 	add	r11,r18,r18
    8bb8:	5c8f803a 	cmpltu	r7,r11,r18
    8bbc:	9cd9883a 	add	r12,r19,r19
    8bc0:	01000044 	movi	r4,1
    8bc4:	30cd883a 	add	r6,r6,r3
    8bc8:	3b0f883a 	add	r7,r7,r12
    8bcc:	423fffc4 	addi	r8,r8,-1
    8bd0:	1013883a 	mov	r9,r2
    8bd4:	3015883a 	mov	r10,r6
    8bd8:	111ab03a 	or	r13,r2,r4
    8bdc:	98003016 	blt	r19,zero,8ca0 <__muldf3+0x398>
    8be0:	5825883a 	mov	r18,r11
    8be4:	3827883a 	mov	r19,r7
    8be8:	7abfef2e 	bgeu	r15,r10,8ba8 <__muldf3+0x2a0>
    8bec:	da001015 	stw	r8,64(sp)
    8bf0:	00803fc4 	movi	r2,255
    8bf4:	488e703a 	and	r7,r9,r2
    8bf8:	00802004 	movi	r2,128
    8bfc:	0007883a 	mov	r3,zero
    8c00:	0011883a 	mov	r8,zero
    8c04:	38801826 	beq	r7,r2,8c68 <__muldf3+0x360>
    8c08:	008000c4 	movi	r2,3
    8c0c:	d9000e04 	addi	r4,sp,56
    8c10:	da801215 	stw	r10,72(sp)
    8c14:	d8800e15 	stw	r2,56(sp)
    8c18:	da401115 	stw	r9,68(sp)
    8c1c:	003f6a06 	br	89c8 <__muldf3+0xc0>
    8c20:	89802126 	beq	r17,r6,8ca8 <__muldf3+0x3a0>
    8c24:	0009883a 	mov	r4,zero
    8c28:	5105883a 	add	r2,r10,r4
    8c2c:	128d803a 	cmpltu	r6,r2,r10
    8c30:	5d07883a 	add	r3,r11,r20
    8c34:	30cd883a 	add	r6,r6,r3
    8c38:	0021883a 	mov	r16,zero
    8c3c:	0023883a 	mov	r17,zero
    8c40:	1025883a 	mov	r18,r2
    8c44:	3027883a 	mov	r19,r6
    8c48:	32ff9e2e 	bgeu	r6,r11,8ac4 <__muldf3+0x1bc>
    8c4c:	00800044 	movi	r2,1
    8c50:	8089883a 	add	r4,r16,r2
    8c54:	240d803a 	cmpltu	r6,r4,r16
    8c58:	344d883a 	add	r6,r6,r17
    8c5c:	2021883a 	mov	r16,r4
    8c60:	3023883a 	mov	r17,r6
    8c64:	003f9806 	br	8ac8 <__muldf3+0x1c0>
    8c68:	403fe71e 	bne	r8,zero,8c08 <__muldf3+0x300>
    8c6c:	01004004 	movi	r4,256
    8c70:	4904703a 	and	r2,r9,r4
    8c74:	10c4b03a 	or	r2,r2,r3
    8c78:	103fe31e 	bne	r2,zero,8c08 <__muldf3+0x300>
    8c7c:	94c4b03a 	or	r2,r18,r19
    8c80:	103fe126 	beq	r2,zero,8c08 <__muldf3+0x300>
    8c84:	49c5883a 	add	r2,r9,r7
    8c88:	1251803a 	cmpltu	r8,r2,r9
    8c8c:	4291883a 	add	r8,r8,r10
    8c90:	013fc004 	movi	r4,-256
    8c94:	1112703a 	and	r9,r2,r4
    8c98:	4015883a 	mov	r10,r8
    8c9c:	003fda06 	br	8c08 <__muldf3+0x300>
    8ca0:	6813883a 	mov	r9,r13
    8ca4:	003fce06 	br	8be0 <__muldf3+0x2d8>
    8ca8:	143f7c36 	bltu	r2,r16,8a9c <__muldf3+0x194>
    8cac:	003fdd06 	br	8c24 <__muldf3+0x31c>
    8cb0:	12bf852e 	bgeu	r2,r10,8ac8 <__muldf3+0x1c0>
    8cb4:	003fe506 	br	8c4c <__muldf3+0x344>
    8cb8:	00800084 	movi	r2,2
    8cbc:	20bf351e 	bne	r4,r2,8994 <__muldf3+0x8c>
    8cc0:	01000074 	movhi	r4,1
    8cc4:	21354804 	addi	r4,r4,-10976
    8cc8:	003f3f06 	br	89c8 <__muldf3+0xc0>

00008ccc <__divdf3>:
    8ccc:	deffed04 	addi	sp,sp,-76
    8cd0:	dcc01115 	stw	r19,68(sp)
    8cd4:	dcc00404 	addi	r19,sp,16
    8cd8:	2011883a 	mov	r8,r4
    8cdc:	2813883a 	mov	r9,r5
    8ce0:	dc000e15 	stw	r16,56(sp)
    8ce4:	d809883a 	mov	r4,sp
    8ce8:	980b883a 	mov	r5,r19
    8cec:	dc000904 	addi	r16,sp,36
    8cf0:	dfc01215 	stw	ra,72(sp)
    8cf4:	da400115 	stw	r9,4(sp)
    8cf8:	d9c00315 	stw	r7,12(sp)
    8cfc:	da000015 	stw	r8,0(sp)
    8d00:	d9800215 	stw	r6,8(sp)
    8d04:	dc801015 	stw	r18,64(sp)
    8d08:	dc400f15 	stw	r17,60(sp)
    8d0c:	0009b6c0 	call	9b6c <__unpack_d>
    8d10:	d9000204 	addi	r4,sp,8
    8d14:	800b883a 	mov	r5,r16
    8d18:	0009b6c0 	call	9b6c <__unpack_d>
    8d1c:	d9000417 	ldw	r4,16(sp)
    8d20:	00800044 	movi	r2,1
    8d24:	11000b2e 	bgeu	r2,r4,8d54 <__divdf3+0x88>
    8d28:	d9400917 	ldw	r5,36(sp)
    8d2c:	1140762e 	bgeu	r2,r5,8f08 <__divdf3+0x23c>
    8d30:	d8800517 	ldw	r2,20(sp)
    8d34:	d8c00a17 	ldw	r3,40(sp)
    8d38:	01800104 	movi	r6,4
    8d3c:	10c4f03a 	xor	r2,r2,r3
    8d40:	d8800515 	stw	r2,20(sp)
    8d44:	21800226 	beq	r4,r6,8d50 <__divdf3+0x84>
    8d48:	00800084 	movi	r2,2
    8d4c:	2080141e 	bne	r4,r2,8da0 <__divdf3+0xd4>
    8d50:	29000926 	beq	r5,r4,8d78 <__divdf3+0xac>
    8d54:	9809883a 	mov	r4,r19
    8d58:	00098580 	call	9858 <__pack_d>
    8d5c:	dfc01217 	ldw	ra,72(sp)
    8d60:	dcc01117 	ldw	r19,68(sp)
    8d64:	dc801017 	ldw	r18,64(sp)
    8d68:	dc400f17 	ldw	r17,60(sp)
    8d6c:	dc000e17 	ldw	r16,56(sp)
    8d70:	dec01304 	addi	sp,sp,76
    8d74:	f800283a 	ret
    8d78:	01000074 	movhi	r4,1
    8d7c:	21354804 	addi	r4,r4,-10976
    8d80:	00098580 	call	9858 <__pack_d>
    8d84:	dfc01217 	ldw	ra,72(sp)
    8d88:	dcc01117 	ldw	r19,68(sp)
    8d8c:	dc801017 	ldw	r18,64(sp)
    8d90:	dc400f17 	ldw	r17,60(sp)
    8d94:	dc000e17 	ldw	r16,56(sp)
    8d98:	dec01304 	addi	sp,sp,76
    8d9c:	f800283a 	ret
    8da0:	29805b26 	beq	r5,r6,8f10 <__divdf3+0x244>
    8da4:	28802d26 	beq	r5,r2,8e5c <__divdf3+0x190>
    8da8:	d8c00617 	ldw	r3,24(sp)
    8dac:	d8800b17 	ldw	r2,44(sp)
    8db0:	d9c00817 	ldw	r7,32(sp)
    8db4:	dc400d17 	ldw	r17,52(sp)
    8db8:	188bc83a 	sub	r5,r3,r2
    8dbc:	d9800717 	ldw	r6,28(sp)
    8dc0:	dc000c17 	ldw	r16,48(sp)
    8dc4:	d9400615 	stw	r5,24(sp)
    8dc8:	3c403836 	bltu	r7,r17,8eac <__divdf3+0x1e0>
    8dcc:	89c03626 	beq	r17,r7,8ea8 <__divdf3+0x1dc>
    8dd0:	0015883a 	mov	r10,zero
    8dd4:	001d883a 	mov	r14,zero
    8dd8:	02c40034 	movhi	r11,4096
    8ddc:	001f883a 	mov	r15,zero
    8de0:	003f883a 	mov	ra,zero
    8de4:	04800f44 	movi	r18,61
    8de8:	00000f06 	br	8e28 <__divdf3+0x15c>
    8dec:	601d883a 	mov	r14,r12
    8df0:	681f883a 	mov	r15,r13
    8df4:	400d883a 	mov	r6,r8
    8df8:	100f883a 	mov	r7,r2
    8dfc:	3191883a 	add	r8,r6,r6
    8e00:	5808d07a 	srli	r4,r11,1
    8e04:	4185803a 	cmpltu	r2,r8,r6
    8e08:	39d3883a 	add	r9,r7,r7
    8e0c:	28c6b03a 	or	r3,r5,r3
    8e10:	1245883a 	add	r2,r2,r9
    8e14:	1815883a 	mov	r10,r3
    8e18:	2017883a 	mov	r11,r4
    8e1c:	400d883a 	mov	r6,r8
    8e20:	100f883a 	mov	r7,r2
    8e24:	fc801726 	beq	ra,r18,8e84 <__divdf3+0x1b8>
    8e28:	580a97fa 	slli	r5,r11,31
    8e2c:	5006d07a 	srli	r3,r10,1
    8e30:	ffc00044 	addi	ra,ra,1
    8e34:	3c7ff136 	bltu	r7,r17,8dfc <__divdf3+0x130>
    8e38:	3411c83a 	sub	r8,r6,r16
    8e3c:	3205803a 	cmpltu	r2,r6,r8
    8e40:	3c53c83a 	sub	r9,r7,r17
    8e44:	7298b03a 	or	r12,r14,r10
    8e48:	7adab03a 	or	r13,r15,r11
    8e4c:	4885c83a 	sub	r2,r9,r2
    8e50:	89ffe61e 	bne	r17,r7,8dec <__divdf3+0x120>
    8e54:	343fe936 	bltu	r6,r16,8dfc <__divdf3+0x130>
    8e58:	003fe406 	br	8dec <__divdf3+0x120>
    8e5c:	9809883a 	mov	r4,r19
    8e60:	d9800415 	stw	r6,16(sp)
    8e64:	00098580 	call	9858 <__pack_d>
    8e68:	dfc01217 	ldw	ra,72(sp)
    8e6c:	dcc01117 	ldw	r19,68(sp)
    8e70:	dc801017 	ldw	r18,64(sp)
    8e74:	dc400f17 	ldw	r17,60(sp)
    8e78:	dc000e17 	ldw	r16,56(sp)
    8e7c:	dec01304 	addi	sp,sp,76
    8e80:	f800283a 	ret
    8e84:	00803fc4 	movi	r2,255
    8e88:	7090703a 	and	r8,r14,r2
    8e8c:	00802004 	movi	r2,128
    8e90:	0007883a 	mov	r3,zero
    8e94:	0013883a 	mov	r9,zero
    8e98:	40800d26 	beq	r8,r2,8ed0 <__divdf3+0x204>
    8e9c:	dbc00815 	stw	r15,32(sp)
    8ea0:	db800715 	stw	r14,28(sp)
    8ea4:	003fab06 	br	8d54 <__divdf3+0x88>
    8ea8:	343fc92e 	bgeu	r6,r16,8dd0 <__divdf3+0x104>
    8eac:	3185883a 	add	r2,r6,r6
    8eb0:	1189803a 	cmpltu	r4,r2,r6
    8eb4:	39c7883a 	add	r3,r7,r7
    8eb8:	20c9883a 	add	r4,r4,r3
    8ebc:	297fffc4 	addi	r5,r5,-1
    8ec0:	100d883a 	mov	r6,r2
    8ec4:	200f883a 	mov	r7,r4
    8ec8:	d9400615 	stw	r5,24(sp)
    8ecc:	003fc006 	br	8dd0 <__divdf3+0x104>
    8ed0:	483ff21e 	bne	r9,zero,8e9c <__divdf3+0x1d0>
    8ed4:	01004004 	movi	r4,256
    8ed8:	7104703a 	and	r2,r14,r4
    8edc:	10c4b03a 	or	r2,r2,r3
    8ee0:	103fee1e 	bne	r2,zero,8e9c <__divdf3+0x1d0>
    8ee4:	31c4b03a 	or	r2,r6,r7
    8ee8:	103fec26 	beq	r2,zero,8e9c <__divdf3+0x1d0>
    8eec:	7205883a 	add	r2,r14,r8
    8ef0:	1391803a 	cmpltu	r8,r2,r14
    8ef4:	43d1883a 	add	r8,r8,r15
    8ef8:	013fc004 	movi	r4,-256
    8efc:	111c703a 	and	r14,r2,r4
    8f00:	401f883a 	mov	r15,r8
    8f04:	003fe506 	br	8e9c <__divdf3+0x1d0>
    8f08:	8009883a 	mov	r4,r16
    8f0c:	003f9206 	br	8d58 <__divdf3+0x8c>
    8f10:	9809883a 	mov	r4,r19
    8f14:	d8000715 	stw	zero,28(sp)
    8f18:	d8000815 	stw	zero,32(sp)
    8f1c:	d8000615 	stw	zero,24(sp)
    8f20:	003f8d06 	br	8d58 <__divdf3+0x8c>

00008f24 <__eqdf2>:
    8f24:	deffef04 	addi	sp,sp,-68
    8f28:	dc400f15 	stw	r17,60(sp)
    8f2c:	dc400404 	addi	r17,sp,16
    8f30:	2005883a 	mov	r2,r4
    8f34:	2807883a 	mov	r3,r5
    8f38:	dc000e15 	stw	r16,56(sp)
    8f3c:	d809883a 	mov	r4,sp
    8f40:	880b883a 	mov	r5,r17
    8f44:	dc000904 	addi	r16,sp,36
    8f48:	d8c00115 	stw	r3,4(sp)
    8f4c:	d8800015 	stw	r2,0(sp)
    8f50:	d9800215 	stw	r6,8(sp)
    8f54:	dfc01015 	stw	ra,64(sp)
    8f58:	d9c00315 	stw	r7,12(sp)
    8f5c:	0009b6c0 	call	9b6c <__unpack_d>
    8f60:	d9000204 	addi	r4,sp,8
    8f64:	800b883a 	mov	r5,r16
    8f68:	0009b6c0 	call	9b6c <__unpack_d>
    8f6c:	d8800417 	ldw	r2,16(sp)
    8f70:	00c00044 	movi	r3,1
    8f74:	180d883a 	mov	r6,r3
    8f78:	1880062e 	bgeu	r3,r2,8f94 <__eqdf2+0x70>
    8f7c:	d8800917 	ldw	r2,36(sp)
    8f80:	8809883a 	mov	r4,r17
    8f84:	800b883a 	mov	r5,r16
    8f88:	1880022e 	bgeu	r3,r2,8f94 <__eqdf2+0x70>
    8f8c:	0009ca40 	call	9ca4 <__fpcmp_parts_d>
    8f90:	100d883a 	mov	r6,r2
    8f94:	3005883a 	mov	r2,r6
    8f98:	dfc01017 	ldw	ra,64(sp)
    8f9c:	dc400f17 	ldw	r17,60(sp)
    8fa0:	dc000e17 	ldw	r16,56(sp)
    8fa4:	dec01104 	addi	sp,sp,68
    8fa8:	f800283a 	ret

00008fac <__nedf2>:
    8fac:	deffef04 	addi	sp,sp,-68
    8fb0:	dc400f15 	stw	r17,60(sp)
    8fb4:	dc400404 	addi	r17,sp,16
    8fb8:	2005883a 	mov	r2,r4
    8fbc:	2807883a 	mov	r3,r5
    8fc0:	dc000e15 	stw	r16,56(sp)
    8fc4:	d809883a 	mov	r4,sp
    8fc8:	880b883a 	mov	r5,r17
    8fcc:	dc000904 	addi	r16,sp,36
    8fd0:	d8c00115 	stw	r3,4(sp)
    8fd4:	d8800015 	stw	r2,0(sp)
    8fd8:	d9800215 	stw	r6,8(sp)
    8fdc:	dfc01015 	stw	ra,64(sp)
    8fe0:	d9c00315 	stw	r7,12(sp)
    8fe4:	0009b6c0 	call	9b6c <__unpack_d>
    8fe8:	d9000204 	addi	r4,sp,8
    8fec:	800b883a 	mov	r5,r16
    8ff0:	0009b6c0 	call	9b6c <__unpack_d>
    8ff4:	d8800417 	ldw	r2,16(sp)
    8ff8:	00c00044 	movi	r3,1
    8ffc:	180d883a 	mov	r6,r3
    9000:	1880062e 	bgeu	r3,r2,901c <__nedf2+0x70>
    9004:	d8800917 	ldw	r2,36(sp)
    9008:	8809883a 	mov	r4,r17
    900c:	800b883a 	mov	r5,r16
    9010:	1880022e 	bgeu	r3,r2,901c <__nedf2+0x70>
    9014:	0009ca40 	call	9ca4 <__fpcmp_parts_d>
    9018:	100d883a 	mov	r6,r2
    901c:	3005883a 	mov	r2,r6
    9020:	dfc01017 	ldw	ra,64(sp)
    9024:	dc400f17 	ldw	r17,60(sp)
    9028:	dc000e17 	ldw	r16,56(sp)
    902c:	dec01104 	addi	sp,sp,68
    9030:	f800283a 	ret

00009034 <__gtdf2>:
    9034:	deffef04 	addi	sp,sp,-68
    9038:	dc400f15 	stw	r17,60(sp)
    903c:	dc400404 	addi	r17,sp,16
    9040:	2005883a 	mov	r2,r4
    9044:	2807883a 	mov	r3,r5
    9048:	dc000e15 	stw	r16,56(sp)
    904c:	d809883a 	mov	r4,sp
    9050:	880b883a 	mov	r5,r17
    9054:	dc000904 	addi	r16,sp,36
    9058:	d8c00115 	stw	r3,4(sp)
    905c:	d8800015 	stw	r2,0(sp)
    9060:	d9800215 	stw	r6,8(sp)
    9064:	dfc01015 	stw	ra,64(sp)
    9068:	d9c00315 	stw	r7,12(sp)
    906c:	0009b6c0 	call	9b6c <__unpack_d>
    9070:	d9000204 	addi	r4,sp,8
    9074:	800b883a 	mov	r5,r16
    9078:	0009b6c0 	call	9b6c <__unpack_d>
    907c:	d8800417 	ldw	r2,16(sp)
    9080:	00c00044 	movi	r3,1
    9084:	01bfffc4 	movi	r6,-1
    9088:	1880062e 	bgeu	r3,r2,90a4 <__gtdf2+0x70>
    908c:	d8800917 	ldw	r2,36(sp)
    9090:	8809883a 	mov	r4,r17
    9094:	800b883a 	mov	r5,r16
    9098:	1880022e 	bgeu	r3,r2,90a4 <__gtdf2+0x70>
    909c:	0009ca40 	call	9ca4 <__fpcmp_parts_d>
    90a0:	100d883a 	mov	r6,r2
    90a4:	3005883a 	mov	r2,r6
    90a8:	dfc01017 	ldw	ra,64(sp)
    90ac:	dc400f17 	ldw	r17,60(sp)
    90b0:	dc000e17 	ldw	r16,56(sp)
    90b4:	dec01104 	addi	sp,sp,68
    90b8:	f800283a 	ret

000090bc <__gedf2>:
    90bc:	deffef04 	addi	sp,sp,-68
    90c0:	dc400f15 	stw	r17,60(sp)
    90c4:	dc400404 	addi	r17,sp,16
    90c8:	2005883a 	mov	r2,r4
    90cc:	2807883a 	mov	r3,r5
    90d0:	dc000e15 	stw	r16,56(sp)
    90d4:	d809883a 	mov	r4,sp
    90d8:	880b883a 	mov	r5,r17
    90dc:	dc000904 	addi	r16,sp,36
    90e0:	d8c00115 	stw	r3,4(sp)
    90e4:	d8800015 	stw	r2,0(sp)
    90e8:	d9800215 	stw	r6,8(sp)
    90ec:	dfc01015 	stw	ra,64(sp)
    90f0:	d9c00315 	stw	r7,12(sp)
    90f4:	0009b6c0 	call	9b6c <__unpack_d>
    90f8:	d9000204 	addi	r4,sp,8
    90fc:	800b883a 	mov	r5,r16
    9100:	0009b6c0 	call	9b6c <__unpack_d>
    9104:	d8800417 	ldw	r2,16(sp)
    9108:	00c00044 	movi	r3,1
    910c:	01bfffc4 	movi	r6,-1
    9110:	1880062e 	bgeu	r3,r2,912c <__gedf2+0x70>
    9114:	d8800917 	ldw	r2,36(sp)
    9118:	8809883a 	mov	r4,r17
    911c:	800b883a 	mov	r5,r16
    9120:	1880022e 	bgeu	r3,r2,912c <__gedf2+0x70>
    9124:	0009ca40 	call	9ca4 <__fpcmp_parts_d>
    9128:	100d883a 	mov	r6,r2
    912c:	3005883a 	mov	r2,r6
    9130:	dfc01017 	ldw	ra,64(sp)
    9134:	dc400f17 	ldw	r17,60(sp)
    9138:	dc000e17 	ldw	r16,56(sp)
    913c:	dec01104 	addi	sp,sp,68
    9140:	f800283a 	ret

00009144 <__ltdf2>:
    9144:	deffef04 	addi	sp,sp,-68
    9148:	dc400f15 	stw	r17,60(sp)
    914c:	dc400404 	addi	r17,sp,16
    9150:	2005883a 	mov	r2,r4
    9154:	2807883a 	mov	r3,r5
    9158:	dc000e15 	stw	r16,56(sp)
    915c:	d809883a 	mov	r4,sp
    9160:	880b883a 	mov	r5,r17
    9164:	dc000904 	addi	r16,sp,36
    9168:	d8c00115 	stw	r3,4(sp)
    916c:	d8800015 	stw	r2,0(sp)
    9170:	d9800215 	stw	r6,8(sp)
    9174:	dfc01015 	stw	ra,64(sp)
    9178:	d9c00315 	stw	r7,12(sp)
    917c:	0009b6c0 	call	9b6c <__unpack_d>
    9180:	d9000204 	addi	r4,sp,8
    9184:	800b883a 	mov	r5,r16
    9188:	0009b6c0 	call	9b6c <__unpack_d>
    918c:	d8800417 	ldw	r2,16(sp)
    9190:	00c00044 	movi	r3,1
    9194:	180d883a 	mov	r6,r3
    9198:	1880062e 	bgeu	r3,r2,91b4 <__ltdf2+0x70>
    919c:	d8800917 	ldw	r2,36(sp)
    91a0:	8809883a 	mov	r4,r17
    91a4:	800b883a 	mov	r5,r16
    91a8:	1880022e 	bgeu	r3,r2,91b4 <__ltdf2+0x70>
    91ac:	0009ca40 	call	9ca4 <__fpcmp_parts_d>
    91b0:	100d883a 	mov	r6,r2
    91b4:	3005883a 	mov	r2,r6
    91b8:	dfc01017 	ldw	ra,64(sp)
    91bc:	dc400f17 	ldw	r17,60(sp)
    91c0:	dc000e17 	ldw	r16,56(sp)
    91c4:	dec01104 	addi	sp,sp,68
    91c8:	f800283a 	ret

000091cc <__floatsidf>:
    91cc:	2006d7fa 	srli	r3,r4,31
    91d0:	defff604 	addi	sp,sp,-40
    91d4:	008000c4 	movi	r2,3
    91d8:	dfc00915 	stw	ra,36(sp)
    91dc:	dcc00815 	stw	r19,32(sp)
    91e0:	dc800715 	stw	r18,28(sp)
    91e4:	dc400615 	stw	r17,24(sp)
    91e8:	dc000515 	stw	r16,20(sp)
    91ec:	d8800015 	stw	r2,0(sp)
    91f0:	d8c00115 	stw	r3,4(sp)
    91f4:	20000f1e 	bne	r4,zero,9234 <__floatsidf+0x68>
    91f8:	00800084 	movi	r2,2
    91fc:	d8800015 	stw	r2,0(sp)
    9200:	d809883a 	mov	r4,sp
    9204:	00098580 	call	9858 <__pack_d>
    9208:	1009883a 	mov	r4,r2
    920c:	180b883a 	mov	r5,r3
    9210:	2005883a 	mov	r2,r4
    9214:	2807883a 	mov	r3,r5
    9218:	dfc00917 	ldw	ra,36(sp)
    921c:	dcc00817 	ldw	r19,32(sp)
    9220:	dc800717 	ldw	r18,28(sp)
    9224:	dc400617 	ldw	r17,24(sp)
    9228:	dc000517 	ldw	r16,20(sp)
    922c:	dec00a04 	addi	sp,sp,40
    9230:	f800283a 	ret
    9234:	00800f04 	movi	r2,60
    9238:	1807003a 	cmpeq	r3,r3,zero
    923c:	d8800215 	stw	r2,8(sp)
    9240:	18001126 	beq	r3,zero,9288 <__floatsidf+0xbc>
    9244:	0027883a 	mov	r19,zero
    9248:	2025883a 	mov	r18,r4
    924c:	d9000315 	stw	r4,12(sp)
    9250:	dcc00415 	stw	r19,16(sp)
    9254:	00097d80 	call	97d8 <__clzsi2>
    9258:	11000744 	addi	r4,r2,29
    925c:	013fe80e 	bge	zero,r4,9200 <__floatsidf+0x34>
    9260:	10bfff44 	addi	r2,r2,-3
    9264:	10000c16 	blt	r2,zero,9298 <__floatsidf+0xcc>
    9268:	90a2983a 	sll	r17,r18,r2
    926c:	0021883a 	mov	r16,zero
    9270:	d8800217 	ldw	r2,8(sp)
    9274:	dc400415 	stw	r17,16(sp)
    9278:	dc000315 	stw	r16,12(sp)
    927c:	1105c83a 	sub	r2,r2,r4
    9280:	d8800215 	stw	r2,8(sp)
    9284:	003fde06 	br	9200 <__floatsidf+0x34>
    9288:	00a00034 	movhi	r2,32768
    928c:	20800a26 	beq	r4,r2,92b8 <__floatsidf+0xec>
    9290:	0109c83a 	sub	r4,zero,r4
    9294:	003feb06 	br	9244 <__floatsidf+0x78>
    9298:	9006d07a 	srli	r3,r18,1
    929c:	008007c4 	movi	r2,31
    92a0:	1105c83a 	sub	r2,r2,r4
    92a4:	1886d83a 	srl	r3,r3,r2
    92a8:	9922983a 	sll	r17,r19,r4
    92ac:	9120983a 	sll	r16,r18,r4
    92b0:	1c62b03a 	or	r17,r3,r17
    92b4:	003fee06 	br	9270 <__floatsidf+0xa4>
    92b8:	0009883a 	mov	r4,zero
    92bc:	01707834 	movhi	r5,49632
    92c0:	003fd306 	br	9210 <__floatsidf+0x44>

000092c4 <__fixdfsi>:
    92c4:	defff804 	addi	sp,sp,-32
    92c8:	2005883a 	mov	r2,r4
    92cc:	2807883a 	mov	r3,r5
    92d0:	d809883a 	mov	r4,sp
    92d4:	d9400204 	addi	r5,sp,8
    92d8:	d8c00115 	stw	r3,4(sp)
    92dc:	d8800015 	stw	r2,0(sp)
    92e0:	dfc00715 	stw	ra,28(sp)
    92e4:	0009b6c0 	call	9b6c <__unpack_d>
    92e8:	d8c00217 	ldw	r3,8(sp)
    92ec:	00800084 	movi	r2,2
    92f0:	1880051e 	bne	r3,r2,9308 <__fixdfsi+0x44>
    92f4:	0007883a 	mov	r3,zero
    92f8:	1805883a 	mov	r2,r3
    92fc:	dfc00717 	ldw	ra,28(sp)
    9300:	dec00804 	addi	sp,sp,32
    9304:	f800283a 	ret
    9308:	00800044 	movi	r2,1
    930c:	10fff92e 	bgeu	r2,r3,92f4 <__fixdfsi+0x30>
    9310:	00800104 	movi	r2,4
    9314:	18800426 	beq	r3,r2,9328 <__fixdfsi+0x64>
    9318:	d8c00417 	ldw	r3,16(sp)
    931c:	183ff516 	blt	r3,zero,92f4 <__fixdfsi+0x30>
    9320:	00800784 	movi	r2,30
    9324:	10c0080e 	bge	r2,r3,9348 <__fixdfsi+0x84>
    9328:	d8800317 	ldw	r2,12(sp)
    932c:	1000121e 	bne	r2,zero,9378 <__fixdfsi+0xb4>
    9330:	00e00034 	movhi	r3,32768
    9334:	18ffffc4 	addi	r3,r3,-1
    9338:	1805883a 	mov	r2,r3
    933c:	dfc00717 	ldw	ra,28(sp)
    9340:	dec00804 	addi	sp,sp,32
    9344:	f800283a 	ret
    9348:	00800f04 	movi	r2,60
    934c:	10d1c83a 	sub	r8,r2,r3
    9350:	40bff804 	addi	r2,r8,-32
    9354:	d9800517 	ldw	r6,20(sp)
    9358:	d9c00617 	ldw	r7,24(sp)
    935c:	10000816 	blt	r2,zero,9380 <__fixdfsi+0xbc>
    9360:	3888d83a 	srl	r4,r7,r2
    9364:	d8800317 	ldw	r2,12(sp)
    9368:	2007883a 	mov	r3,r4
    936c:	103fe226 	beq	r2,zero,92f8 <__fixdfsi+0x34>
    9370:	0107c83a 	sub	r3,zero,r4
    9374:	003fe006 	br	92f8 <__fixdfsi+0x34>
    9378:	00e00034 	movhi	r3,32768
    937c:	003fde06 	br	92f8 <__fixdfsi+0x34>
    9380:	39c7883a 	add	r3,r7,r7
    9384:	008007c4 	movi	r2,31
    9388:	1205c83a 	sub	r2,r2,r8
    938c:	1886983a 	sll	r3,r3,r2
    9390:	3208d83a 	srl	r4,r6,r8
    9394:	1908b03a 	or	r4,r3,r4
    9398:	003ff206 	br	9364 <__fixdfsi+0xa0>

0000939c <__floatunsidf>:
    939c:	defff204 	addi	sp,sp,-56
    93a0:	dfc00d15 	stw	ra,52(sp)
    93a4:	ddc00c15 	stw	r23,48(sp)
    93a8:	dd800b15 	stw	r22,44(sp)
    93ac:	dd400a15 	stw	r21,40(sp)
    93b0:	dd000915 	stw	r20,36(sp)
    93b4:	dcc00815 	stw	r19,32(sp)
    93b8:	dc800715 	stw	r18,28(sp)
    93bc:	dc400615 	stw	r17,24(sp)
    93c0:	dc000515 	stw	r16,20(sp)
    93c4:	d8000115 	stw	zero,4(sp)
    93c8:	20000f1e 	bne	r4,zero,9408 <__floatunsidf+0x6c>
    93cc:	00800084 	movi	r2,2
    93d0:	d8800015 	stw	r2,0(sp)
    93d4:	d809883a 	mov	r4,sp
    93d8:	00098580 	call	9858 <__pack_d>
    93dc:	dfc00d17 	ldw	ra,52(sp)
    93e0:	ddc00c17 	ldw	r23,48(sp)
    93e4:	dd800b17 	ldw	r22,44(sp)
    93e8:	dd400a17 	ldw	r21,40(sp)
    93ec:	dd000917 	ldw	r20,36(sp)
    93f0:	dcc00817 	ldw	r19,32(sp)
    93f4:	dc800717 	ldw	r18,28(sp)
    93f8:	dc400617 	ldw	r17,24(sp)
    93fc:	dc000517 	ldw	r16,20(sp)
    9400:	dec00e04 	addi	sp,sp,56
    9404:	f800283a 	ret
    9408:	008000c4 	movi	r2,3
    940c:	00c00f04 	movi	r3,60
    9410:	002f883a 	mov	r23,zero
    9414:	202d883a 	mov	r22,r4
    9418:	d8800015 	stw	r2,0(sp)
    941c:	d8c00215 	stw	r3,8(sp)
    9420:	d9000315 	stw	r4,12(sp)
    9424:	ddc00415 	stw	r23,16(sp)
    9428:	00097d80 	call	97d8 <__clzsi2>
    942c:	12400744 	addi	r9,r2,29
    9430:	48000b16 	blt	r9,zero,9460 <__floatunsidf+0xc4>
    9434:	483fe726 	beq	r9,zero,93d4 <__floatunsidf+0x38>
    9438:	10bfff44 	addi	r2,r2,-3
    943c:	10002e16 	blt	r2,zero,94f8 <__floatunsidf+0x15c>
    9440:	b0a2983a 	sll	r17,r22,r2
    9444:	0021883a 	mov	r16,zero
    9448:	d8800217 	ldw	r2,8(sp)
    944c:	dc400415 	stw	r17,16(sp)
    9450:	dc000315 	stw	r16,12(sp)
    9454:	1245c83a 	sub	r2,r2,r9
    9458:	d8800215 	stw	r2,8(sp)
    945c:	003fdd06 	br	93d4 <__floatunsidf+0x38>
    9460:	0255c83a 	sub	r10,zero,r9
    9464:	51bff804 	addi	r6,r10,-32
    9468:	30001b16 	blt	r6,zero,94d8 <__floatunsidf+0x13c>
    946c:	b9a8d83a 	srl	r20,r23,r6
    9470:	002b883a 	mov	r21,zero
    9474:	000f883a 	mov	r7,zero
    9478:	01000044 	movi	r4,1
    947c:	0011883a 	mov	r8,zero
    9480:	30002516 	blt	r6,zero,9518 <__floatunsidf+0x17c>
    9484:	21a6983a 	sll	r19,r4,r6
    9488:	0025883a 	mov	r18,zero
    948c:	00bfffc4 	movi	r2,-1
    9490:	9089883a 	add	r4,r18,r2
    9494:	988b883a 	add	r5,r19,r2
    9498:	248d803a 	cmpltu	r6,r4,r18
    949c:	314b883a 	add	r5,r6,r5
    94a0:	b104703a 	and	r2,r22,r4
    94a4:	b946703a 	and	r3,r23,r5
    94a8:	10c4b03a 	or	r2,r2,r3
    94ac:	10000226 	beq	r2,zero,94b8 <__floatunsidf+0x11c>
    94b0:	01c00044 	movi	r7,1
    94b4:	0011883a 	mov	r8,zero
    94b8:	d9000217 	ldw	r4,8(sp)
    94bc:	a1c4b03a 	or	r2,r20,r7
    94c0:	aa06b03a 	or	r3,r21,r8
    94c4:	2249c83a 	sub	r4,r4,r9
    94c8:	d8c00415 	stw	r3,16(sp)
    94cc:	d9000215 	stw	r4,8(sp)
    94d0:	d8800315 	stw	r2,12(sp)
    94d4:	003fbf06 	br	93d4 <__floatunsidf+0x38>
    94d8:	bdc7883a 	add	r3,r23,r23
    94dc:	008007c4 	movi	r2,31
    94e0:	1285c83a 	sub	r2,r2,r10
    94e4:	1886983a 	sll	r3,r3,r2
    94e8:	b2a8d83a 	srl	r20,r22,r10
    94ec:	baaad83a 	srl	r21,r23,r10
    94f0:	1d28b03a 	or	r20,r3,r20
    94f4:	003fdf06 	br	9474 <__floatunsidf+0xd8>
    94f8:	b006d07a 	srli	r3,r22,1
    94fc:	008007c4 	movi	r2,31
    9500:	1245c83a 	sub	r2,r2,r9
    9504:	1886d83a 	srl	r3,r3,r2
    9508:	ba62983a 	sll	r17,r23,r9
    950c:	b260983a 	sll	r16,r22,r9
    9510:	1c62b03a 	or	r17,r3,r17
    9514:	003fcc06 	br	9448 <__floatunsidf+0xac>
    9518:	2006d07a 	srli	r3,r4,1
    951c:	008007c4 	movi	r2,31
    9520:	1285c83a 	sub	r2,r2,r10
    9524:	18a6d83a 	srl	r19,r3,r2
    9528:	22a4983a 	sll	r18,r4,r10
    952c:	003fd706 	br	948c <__floatunsidf+0xf0>

00009530 <udivmodsi4>:
    9530:	29001b2e 	bgeu	r5,r4,95a0 <udivmodsi4+0x70>
    9534:	28001a16 	blt	r5,zero,95a0 <udivmodsi4+0x70>
    9538:	00800044 	movi	r2,1
    953c:	0007883a 	mov	r3,zero
    9540:	01c007c4 	movi	r7,31
    9544:	00000306 	br	9554 <udivmodsi4+0x24>
    9548:	19c01326 	beq	r3,r7,9598 <udivmodsi4+0x68>
    954c:	18c00044 	addi	r3,r3,1
    9550:	28000416 	blt	r5,zero,9564 <udivmodsi4+0x34>
    9554:	294b883a 	add	r5,r5,r5
    9558:	1085883a 	add	r2,r2,r2
    955c:	293ffa36 	bltu	r5,r4,9548 <udivmodsi4+0x18>
    9560:	10000d26 	beq	r2,zero,9598 <udivmodsi4+0x68>
    9564:	0007883a 	mov	r3,zero
    9568:	21400236 	bltu	r4,r5,9574 <udivmodsi4+0x44>
    956c:	2149c83a 	sub	r4,r4,r5
    9570:	1886b03a 	or	r3,r3,r2
    9574:	1004d07a 	srli	r2,r2,1
    9578:	280ad07a 	srli	r5,r5,1
    957c:	103ffa1e 	bne	r2,zero,9568 <udivmodsi4+0x38>
    9580:	30000226 	beq	r6,zero,958c <udivmodsi4+0x5c>
    9584:	2005883a 	mov	r2,r4
    9588:	f800283a 	ret
    958c:	1809883a 	mov	r4,r3
    9590:	2005883a 	mov	r2,r4
    9594:	f800283a 	ret
    9598:	0007883a 	mov	r3,zero
    959c:	003ff806 	br	9580 <udivmodsi4+0x50>
    95a0:	00800044 	movi	r2,1
    95a4:	0007883a 	mov	r3,zero
    95a8:	003fef06 	br	9568 <udivmodsi4+0x38>

000095ac <__divsi3>:
    95ac:	defffe04 	addi	sp,sp,-8
    95b0:	dc000015 	stw	r16,0(sp)
    95b4:	dfc00115 	stw	ra,4(sp)
    95b8:	0021883a 	mov	r16,zero
    95bc:	20000c16 	blt	r4,zero,95f0 <__divsi3+0x44>
    95c0:	000d883a 	mov	r6,zero
    95c4:	28000e16 	blt	r5,zero,9600 <__divsi3+0x54>
    95c8:	00095300 	call	9530 <udivmodsi4>
    95cc:	1007883a 	mov	r3,r2
    95d0:	8005003a 	cmpeq	r2,r16,zero
    95d4:	1000011e 	bne	r2,zero,95dc <__divsi3+0x30>
    95d8:	00c7c83a 	sub	r3,zero,r3
    95dc:	1805883a 	mov	r2,r3
    95e0:	dfc00117 	ldw	ra,4(sp)
    95e4:	dc000017 	ldw	r16,0(sp)
    95e8:	dec00204 	addi	sp,sp,8
    95ec:	f800283a 	ret
    95f0:	0109c83a 	sub	r4,zero,r4
    95f4:	04000044 	movi	r16,1
    95f8:	000d883a 	mov	r6,zero
    95fc:	283ff20e 	bge	r5,zero,95c8 <__divsi3+0x1c>
    9600:	014bc83a 	sub	r5,zero,r5
    9604:	8021003a 	cmpeq	r16,r16,zero
    9608:	003fef06 	br	95c8 <__divsi3+0x1c>

0000960c <__modsi3>:
    960c:	deffff04 	addi	sp,sp,-4
    9610:	dfc00015 	stw	ra,0(sp)
    9614:	01800044 	movi	r6,1
    9618:	2807883a 	mov	r3,r5
    961c:	20000416 	blt	r4,zero,9630 <__modsi3+0x24>
    9620:	28000c16 	blt	r5,zero,9654 <__modsi3+0x48>
    9624:	dfc00017 	ldw	ra,0(sp)
    9628:	dec00104 	addi	sp,sp,4
    962c:	00095301 	jmpi	9530 <udivmodsi4>
    9630:	0109c83a 	sub	r4,zero,r4
    9634:	28000b16 	blt	r5,zero,9664 <__modsi3+0x58>
    9638:	180b883a 	mov	r5,r3
    963c:	01800044 	movi	r6,1
    9640:	00095300 	call	9530 <udivmodsi4>
    9644:	0085c83a 	sub	r2,zero,r2
    9648:	dfc00017 	ldw	ra,0(sp)
    964c:	dec00104 	addi	sp,sp,4
    9650:	f800283a 	ret
    9654:	014bc83a 	sub	r5,zero,r5
    9658:	dfc00017 	ldw	ra,0(sp)
    965c:	dec00104 	addi	sp,sp,4
    9660:	00095301 	jmpi	9530 <udivmodsi4>
    9664:	0147c83a 	sub	r3,zero,r5
    9668:	003ff306 	br	9638 <__modsi3+0x2c>

0000966c <__udivsi3>:
    966c:	000d883a 	mov	r6,zero
    9670:	00095301 	jmpi	9530 <udivmodsi4>

00009674 <__umodsi3>:
    9674:	01800044 	movi	r6,1
    9678:	00095301 	jmpi	9530 <udivmodsi4>

0000967c <__mulsi3>:
    967c:	20000a26 	beq	r4,zero,96a8 <__mulsi3+0x2c>
    9680:	0007883a 	mov	r3,zero
    9684:	2080004c 	andi	r2,r4,1
    9688:	1005003a 	cmpeq	r2,r2,zero
    968c:	2008d07a 	srli	r4,r4,1
    9690:	1000011e 	bne	r2,zero,9698 <__mulsi3+0x1c>
    9694:	1947883a 	add	r3,r3,r5
    9698:	294b883a 	add	r5,r5,r5
    969c:	203ff91e 	bne	r4,zero,9684 <__mulsi3+0x8>
    96a0:	1805883a 	mov	r2,r3
    96a4:	f800283a 	ret
    96a8:	0007883a 	mov	r3,zero
    96ac:	1805883a 	mov	r2,r3
    96b0:	f800283a 	ret

000096b4 <__muldi3>:
    96b4:	defff204 	addi	sp,sp,-56
    96b8:	df000c15 	stw	fp,48(sp)
    96bc:	3038d43a 	srli	fp,r6,16
    96c0:	dd000815 	stw	r20,32(sp)
    96c4:	dc400515 	stw	r17,20(sp)
    96c8:	2028d43a 	srli	r20,r4,16
    96cc:	247fffcc 	andi	r17,r4,65535
    96d0:	dc000415 	stw	r16,16(sp)
    96d4:	343fffcc 	andi	r16,r6,65535
    96d8:	dcc00715 	stw	r19,28(sp)
    96dc:	d9000015 	stw	r4,0(sp)
    96e0:	2827883a 	mov	r19,r5
    96e4:	8809883a 	mov	r4,r17
    96e8:	d9400115 	stw	r5,4(sp)
    96ec:	800b883a 	mov	r5,r16
    96f0:	d9800215 	stw	r6,8(sp)
    96f4:	dfc00d15 	stw	ra,52(sp)
    96f8:	d9c00315 	stw	r7,12(sp)
    96fc:	dd800a15 	stw	r22,40(sp)
    9700:	dd400915 	stw	r21,36(sp)
    9704:	302d883a 	mov	r22,r6
    9708:	ddc00b15 	stw	r23,44(sp)
    970c:	dc800615 	stw	r18,24(sp)
    9710:	000967c0 	call	967c <__mulsi3>
    9714:	8809883a 	mov	r4,r17
    9718:	e00b883a 	mov	r5,fp
    971c:	102b883a 	mov	r21,r2
    9720:	000967c0 	call	967c <__mulsi3>
    9724:	800b883a 	mov	r5,r16
    9728:	a009883a 	mov	r4,r20
    972c:	1023883a 	mov	r17,r2
    9730:	000967c0 	call	967c <__mulsi3>
    9734:	a009883a 	mov	r4,r20
    9738:	e00b883a 	mov	r5,fp
    973c:	1021883a 	mov	r16,r2
    9740:	000967c0 	call	967c <__mulsi3>
    9744:	a8ffffcc 	andi	r3,r21,65535
    9748:	a82ad43a 	srli	r21,r21,16
    974c:	8c23883a 	add	r17,r17,r16
    9750:	1011883a 	mov	r8,r2
    9754:	ac6b883a 	add	r21,r21,r17
    9758:	a804943a 	slli	r2,r21,16
    975c:	b009883a 	mov	r4,r22
    9760:	980b883a 	mov	r5,r19
    9764:	10c7883a 	add	r3,r2,r3
    9768:	a812d43a 	srli	r9,r21,16
    976c:	180d883a 	mov	r6,r3
    9770:	ac00022e 	bgeu	r21,r16,977c <__muldi3+0xc8>
    9774:	00800074 	movhi	r2,1
    9778:	4091883a 	add	r8,r8,r2
    977c:	4267883a 	add	r19,r8,r9
    9780:	302d883a 	mov	r22,r6
    9784:	000967c0 	call	967c <__mulsi3>
    9788:	d9400317 	ldw	r5,12(sp)
    978c:	d9000017 	ldw	r4,0(sp)
    9790:	1023883a 	mov	r17,r2
    9794:	000967c0 	call	967c <__mulsi3>
    9798:	14cb883a 	add	r5,r2,r19
    979c:	894b883a 	add	r5,r17,r5
    97a0:	b005883a 	mov	r2,r22
    97a4:	2807883a 	mov	r3,r5
    97a8:	dfc00d17 	ldw	ra,52(sp)
    97ac:	df000c17 	ldw	fp,48(sp)
    97b0:	ddc00b17 	ldw	r23,44(sp)
    97b4:	dd800a17 	ldw	r22,40(sp)
    97b8:	dd400917 	ldw	r21,36(sp)
    97bc:	dd000817 	ldw	r20,32(sp)
    97c0:	dcc00717 	ldw	r19,28(sp)
    97c4:	dc800617 	ldw	r18,24(sp)
    97c8:	dc400517 	ldw	r17,20(sp)
    97cc:	dc000417 	ldw	r16,16(sp)
    97d0:	dec00e04 	addi	sp,sp,56
    97d4:	f800283a 	ret

000097d8 <__clzsi2>:
    97d8:	00bfffd4 	movui	r2,65535
    97dc:	11000e36 	bltu	r2,r4,9818 <__clzsi2+0x40>
    97e0:	00803fc4 	movi	r2,255
    97e4:	01400204 	movi	r5,8
    97e8:	0007883a 	mov	r3,zero
    97ec:	11001036 	bltu	r2,r4,9830 <__clzsi2+0x58>
    97f0:	000b883a 	mov	r5,zero
    97f4:	20c6d83a 	srl	r3,r4,r3
    97f8:	00800074 	movhi	r2,1
    97fc:	10b54d04 	addi	r2,r2,-10956
    9800:	1887883a 	add	r3,r3,r2
    9804:	18800003 	ldbu	r2,0(r3)
    9808:	00c00804 	movi	r3,32
    980c:	2885883a 	add	r2,r5,r2
    9810:	1885c83a 	sub	r2,r3,r2
    9814:	f800283a 	ret
    9818:	01400404 	movi	r5,16
    981c:	00804034 	movhi	r2,256
    9820:	10bfffc4 	addi	r2,r2,-1
    9824:	2807883a 	mov	r3,r5
    9828:	113ff22e 	bgeu	r2,r4,97f4 <__clzsi2+0x1c>
    982c:	01400604 	movi	r5,24
    9830:	2807883a 	mov	r3,r5
    9834:	20c6d83a 	srl	r3,r4,r3
    9838:	00800074 	movhi	r2,1
    983c:	10b54d04 	addi	r2,r2,-10956
    9840:	1887883a 	add	r3,r3,r2
    9844:	18800003 	ldbu	r2,0(r3)
    9848:	00c00804 	movi	r3,32
    984c:	2885883a 	add	r2,r5,r2
    9850:	1885c83a 	sub	r2,r3,r2
    9854:	f800283a 	ret

00009858 <__pack_d>:
    9858:	20c00017 	ldw	r3,0(r4)
    985c:	defffd04 	addi	sp,sp,-12
    9860:	dc000015 	stw	r16,0(sp)
    9864:	dc800215 	stw	r18,8(sp)
    9868:	dc400115 	stw	r17,4(sp)
    986c:	00800044 	movi	r2,1
    9870:	22000317 	ldw	r8,12(r4)
    9874:	001f883a 	mov	r15,zero
    9878:	22400417 	ldw	r9,16(r4)
    987c:	24000117 	ldw	r16,4(r4)
    9880:	10c0552e 	bgeu	r2,r3,99d8 <__pack_d+0x180>
    9884:	00800104 	movi	r2,4
    9888:	18804f26 	beq	r3,r2,99c8 <__pack_d+0x170>
    988c:	00800084 	movi	r2,2
    9890:	18800226 	beq	r3,r2,989c <__pack_d+0x44>
    9894:	4244b03a 	or	r2,r8,r9
    9898:	10001a1e 	bne	r2,zero,9904 <__pack_d+0xac>
    989c:	000d883a 	mov	r6,zero
    98a0:	000f883a 	mov	r7,zero
    98a4:	0011883a 	mov	r8,zero
    98a8:	00800434 	movhi	r2,16
    98ac:	10bfffc4 	addi	r2,r2,-1
    98b0:	301d883a 	mov	r14,r6
    98b4:	3884703a 	and	r2,r7,r2
    98b8:	400a953a 	slli	r5,r8,20
    98bc:	79bffc2c 	andhi	r6,r15,65520
    98c0:	308cb03a 	or	r6,r6,r2
    98c4:	00e00434 	movhi	r3,32784
    98c8:	18ffffc4 	addi	r3,r3,-1
    98cc:	800497fa 	slli	r2,r16,31
    98d0:	30c6703a 	and	r3,r6,r3
    98d4:	1946b03a 	or	r3,r3,r5
    98d8:	01600034 	movhi	r5,32768
    98dc:	297fffc4 	addi	r5,r5,-1
    98e0:	194a703a 	and	r5,r3,r5
    98e4:	288ab03a 	or	r5,r5,r2
    98e8:	2807883a 	mov	r3,r5
    98ec:	7005883a 	mov	r2,r14
    98f0:	dc800217 	ldw	r18,8(sp)
    98f4:	dc400117 	ldw	r17,4(sp)
    98f8:	dc000017 	ldw	r16,0(sp)
    98fc:	dec00304 	addi	sp,sp,12
    9900:	f800283a 	ret
    9904:	21000217 	ldw	r4,8(r4)
    9908:	00bf0084 	movi	r2,-1022
    990c:	20803f16 	blt	r4,r2,9a0c <__pack_d+0x1b4>
    9910:	0080ffc4 	movi	r2,1023
    9914:	11002c16 	blt	r2,r4,99c8 <__pack_d+0x170>
    9918:	00803fc4 	movi	r2,255
    991c:	408c703a 	and	r6,r8,r2
    9920:	00802004 	movi	r2,128
    9924:	0007883a 	mov	r3,zero
    9928:	000f883a 	mov	r7,zero
    992c:	2280ffc4 	addi	r10,r4,1023
    9930:	30801e26 	beq	r6,r2,99ac <__pack_d+0x154>
    9934:	00801fc4 	movi	r2,127
    9938:	4089883a 	add	r4,r8,r2
    993c:	220d803a 	cmpltu	r6,r4,r8
    9940:	324d883a 	add	r6,r6,r9
    9944:	2011883a 	mov	r8,r4
    9948:	3013883a 	mov	r9,r6
    994c:	00880034 	movhi	r2,8192
    9950:	10bfffc4 	addi	r2,r2,-1
    9954:	12400d36 	bltu	r2,r9,998c <__pack_d+0x134>
    9958:	4804963a 	slli	r2,r9,24
    995c:	400cd23a 	srli	r6,r8,8
    9960:	480ed23a 	srli	r7,r9,8
    9964:	013fffc4 	movi	r4,-1
    9968:	118cb03a 	or	r6,r2,r6
    996c:	01400434 	movhi	r5,16
    9970:	297fffc4 	addi	r5,r5,-1
    9974:	3104703a 	and	r2,r6,r4
    9978:	3946703a 	and	r3,r7,r5
    997c:	5201ffcc 	andi	r8,r10,2047
    9980:	100d883a 	mov	r6,r2
    9984:	180f883a 	mov	r7,r3
    9988:	003fc706 	br	98a8 <__pack_d+0x50>
    998c:	480897fa 	slli	r4,r9,31
    9990:	4004d07a 	srli	r2,r8,1
    9994:	4806d07a 	srli	r3,r9,1
    9998:	52800044 	addi	r10,r10,1
    999c:	2084b03a 	or	r2,r4,r2
    99a0:	1011883a 	mov	r8,r2
    99a4:	1813883a 	mov	r9,r3
    99a8:	003feb06 	br	9958 <__pack_d+0x100>
    99ac:	383fe11e 	bne	r7,zero,9934 <__pack_d+0xdc>
    99b0:	01004004 	movi	r4,256
    99b4:	4104703a 	and	r2,r8,r4
    99b8:	10c4b03a 	or	r2,r2,r3
    99bc:	103fe326 	beq	r2,zero,994c <__pack_d+0xf4>
    99c0:	3005883a 	mov	r2,r6
    99c4:	003fdc06 	br	9938 <__pack_d+0xe0>
    99c8:	000d883a 	mov	r6,zero
    99cc:	000f883a 	mov	r7,zero
    99d0:	0201ffc4 	movi	r8,2047
    99d4:	003fb406 	br	98a8 <__pack_d+0x50>
    99d8:	0005883a 	mov	r2,zero
    99dc:	00c00234 	movhi	r3,8
    99e0:	408cb03a 	or	r6,r8,r2
    99e4:	48ceb03a 	or	r7,r9,r3
    99e8:	013fffc4 	movi	r4,-1
    99ec:	01400434 	movhi	r5,16
    99f0:	297fffc4 	addi	r5,r5,-1
    99f4:	3104703a 	and	r2,r6,r4
    99f8:	3946703a 	and	r3,r7,r5
    99fc:	100d883a 	mov	r6,r2
    9a00:	180f883a 	mov	r7,r3
    9a04:	0201ffc4 	movi	r8,2047
    9a08:	003fa706 	br	98a8 <__pack_d+0x50>
    9a0c:	1109c83a 	sub	r4,r2,r4
    9a10:	00800e04 	movi	r2,56
    9a14:	11004316 	blt	r2,r4,9b24 <__pack_d+0x2cc>
    9a18:	21fff804 	addi	r7,r4,-32
    9a1c:	38004516 	blt	r7,zero,9b34 <__pack_d+0x2dc>
    9a20:	49d8d83a 	srl	r12,r9,r7
    9a24:	001b883a 	mov	r13,zero
    9a28:	0023883a 	mov	r17,zero
    9a2c:	01400044 	movi	r5,1
    9a30:	0025883a 	mov	r18,zero
    9a34:	38004716 	blt	r7,zero,9b54 <__pack_d+0x2fc>
    9a38:	29d6983a 	sll	r11,r5,r7
    9a3c:	0015883a 	mov	r10,zero
    9a40:	00bfffc4 	movi	r2,-1
    9a44:	5089883a 	add	r4,r10,r2
    9a48:	588b883a 	add	r5,r11,r2
    9a4c:	228d803a 	cmpltu	r6,r4,r10
    9a50:	314b883a 	add	r5,r6,r5
    9a54:	4104703a 	and	r2,r8,r4
    9a58:	4946703a 	and	r3,r9,r5
    9a5c:	10c4b03a 	or	r2,r2,r3
    9a60:	10000226 	beq	r2,zero,9a6c <__pack_d+0x214>
    9a64:	04400044 	movi	r17,1
    9a68:	0025883a 	mov	r18,zero
    9a6c:	00803fc4 	movi	r2,255
    9a70:	644eb03a 	or	r7,r12,r17
    9a74:	3892703a 	and	r9,r7,r2
    9a78:	00802004 	movi	r2,128
    9a7c:	6c90b03a 	or	r8,r13,r18
    9a80:	0015883a 	mov	r10,zero
    9a84:	48801626 	beq	r9,r2,9ae0 <__pack_d+0x288>
    9a88:	01001fc4 	movi	r4,127
    9a8c:	3905883a 	add	r2,r7,r4
    9a90:	11cd803a 	cmpltu	r6,r2,r7
    9a94:	320d883a 	add	r6,r6,r8
    9a98:	100f883a 	mov	r7,r2
    9a9c:	00840034 	movhi	r2,4096
    9aa0:	10bfffc4 	addi	r2,r2,-1
    9aa4:	3011883a 	mov	r8,r6
    9aa8:	0007883a 	mov	r3,zero
    9aac:	11801b36 	bltu	r2,r6,9b1c <__pack_d+0x2c4>
    9ab0:	4004963a 	slli	r2,r8,24
    9ab4:	3808d23a 	srli	r4,r7,8
    9ab8:	400ad23a 	srli	r5,r8,8
    9abc:	1813883a 	mov	r9,r3
    9ac0:	1108b03a 	or	r4,r2,r4
    9ac4:	00bfffc4 	movi	r2,-1
    9ac8:	00c00434 	movhi	r3,16
    9acc:	18ffffc4 	addi	r3,r3,-1
    9ad0:	208c703a 	and	r6,r4,r2
    9ad4:	28ce703a 	and	r7,r5,r3
    9ad8:	4a01ffcc 	andi	r8,r9,2047
    9adc:	003f7206 	br	98a8 <__pack_d+0x50>
    9ae0:	503fe91e 	bne	r10,zero,9a88 <__pack_d+0x230>
    9ae4:	01004004 	movi	r4,256
    9ae8:	3904703a 	and	r2,r7,r4
    9aec:	0007883a 	mov	r3,zero
    9af0:	10c4b03a 	or	r2,r2,r3
    9af4:	10000626 	beq	r2,zero,9b10 <__pack_d+0x2b8>
    9af8:	3a45883a 	add	r2,r7,r9
    9afc:	11cd803a 	cmpltu	r6,r2,r7
    9b00:	320d883a 	add	r6,r6,r8
    9b04:	100f883a 	mov	r7,r2
    9b08:	3011883a 	mov	r8,r6
    9b0c:	0007883a 	mov	r3,zero
    9b10:	00840034 	movhi	r2,4096
    9b14:	10bfffc4 	addi	r2,r2,-1
    9b18:	123fe52e 	bgeu	r2,r8,9ab0 <__pack_d+0x258>
    9b1c:	00c00044 	movi	r3,1
    9b20:	003fe306 	br	9ab0 <__pack_d+0x258>
    9b24:	0009883a 	mov	r4,zero
    9b28:	0013883a 	mov	r9,zero
    9b2c:	000b883a 	mov	r5,zero
    9b30:	003fe406 	br	9ac4 <__pack_d+0x26c>
    9b34:	4a47883a 	add	r3,r9,r9
    9b38:	008007c4 	movi	r2,31
    9b3c:	1105c83a 	sub	r2,r2,r4
    9b40:	1886983a 	sll	r3,r3,r2
    9b44:	4118d83a 	srl	r12,r8,r4
    9b48:	491ad83a 	srl	r13,r9,r4
    9b4c:	1b18b03a 	or	r12,r3,r12
    9b50:	003fb506 	br	9a28 <__pack_d+0x1d0>
    9b54:	2806d07a 	srli	r3,r5,1
    9b58:	008007c4 	movi	r2,31
    9b5c:	1105c83a 	sub	r2,r2,r4
    9b60:	1896d83a 	srl	r11,r3,r2
    9b64:	2914983a 	sll	r10,r5,r4
    9b68:	003fb506 	br	9a40 <__pack_d+0x1e8>

00009b6c <__unpack_d>:
    9b6c:	20c00117 	ldw	r3,4(r4)
    9b70:	22400017 	ldw	r9,0(r4)
    9b74:	00800434 	movhi	r2,16
    9b78:	10bfffc4 	addi	r2,r2,-1
    9b7c:	1808d53a 	srli	r4,r3,20
    9b80:	180cd7fa 	srli	r6,r3,31
    9b84:	1894703a 	and	r10,r3,r2
    9b88:	2201ffcc 	andi	r8,r4,2047
    9b8c:	281b883a 	mov	r13,r5
    9b90:	4817883a 	mov	r11,r9
    9b94:	29800115 	stw	r6,4(r5)
    9b98:	5019883a 	mov	r12,r10
    9b9c:	40001e1e 	bne	r8,zero,9c18 <__unpack_d+0xac>
    9ba0:	4a84b03a 	or	r2,r9,r10
    9ba4:	10001926 	beq	r2,zero,9c0c <__unpack_d+0xa0>
    9ba8:	4804d63a 	srli	r2,r9,24
    9bac:	500c923a 	slli	r6,r10,8
    9bb0:	013f0084 	movi	r4,-1022
    9bb4:	00c40034 	movhi	r3,4096
    9bb8:	18ffffc4 	addi	r3,r3,-1
    9bbc:	118cb03a 	or	r6,r2,r6
    9bc0:	008000c4 	movi	r2,3
    9bc4:	480a923a 	slli	r5,r9,8
    9bc8:	68800015 	stw	r2,0(r13)
    9bcc:	69000215 	stw	r4,8(r13)
    9bd0:	19800b36 	bltu	r3,r6,9c00 <__unpack_d+0x94>
    9bd4:	200f883a 	mov	r7,r4
    9bd8:	1811883a 	mov	r8,r3
    9bdc:	2945883a 	add	r2,r5,r5
    9be0:	1149803a 	cmpltu	r4,r2,r5
    9be4:	3187883a 	add	r3,r6,r6
    9be8:	20c9883a 	add	r4,r4,r3
    9bec:	100b883a 	mov	r5,r2
    9bf0:	200d883a 	mov	r6,r4
    9bf4:	39ffffc4 	addi	r7,r7,-1
    9bf8:	413ff82e 	bgeu	r8,r4,9bdc <__unpack_d+0x70>
    9bfc:	69c00215 	stw	r7,8(r13)
    9c00:	69800415 	stw	r6,16(r13)
    9c04:	69400315 	stw	r5,12(r13)
    9c08:	f800283a 	ret
    9c0c:	00800084 	movi	r2,2
    9c10:	28800015 	stw	r2,0(r5)
    9c14:	f800283a 	ret
    9c18:	0081ffc4 	movi	r2,2047
    9c1c:	40800f26 	beq	r8,r2,9c5c <__unpack_d+0xf0>
    9c20:	480cd63a 	srli	r6,r9,24
    9c24:	5006923a 	slli	r3,r10,8
    9c28:	4804923a 	slli	r2,r9,8
    9c2c:	0009883a 	mov	r4,zero
    9c30:	30c6b03a 	or	r3,r6,r3
    9c34:	01440034 	movhi	r5,4096
    9c38:	110cb03a 	or	r6,r2,r4
    9c3c:	423f0044 	addi	r8,r8,-1023
    9c40:	194eb03a 	or	r7,r3,r5
    9c44:	008000c4 	movi	r2,3
    9c48:	69c00415 	stw	r7,16(r13)
    9c4c:	6a000215 	stw	r8,8(r13)
    9c50:	68800015 	stw	r2,0(r13)
    9c54:	69800315 	stw	r6,12(r13)
    9c58:	f800283a 	ret
    9c5c:	4a84b03a 	or	r2,r9,r10
    9c60:	1000031e 	bne	r2,zero,9c70 <__unpack_d+0x104>
    9c64:	00800104 	movi	r2,4
    9c68:	28800015 	stw	r2,0(r5)
    9c6c:	f800283a 	ret
    9c70:	0009883a 	mov	r4,zero
    9c74:	01400234 	movhi	r5,8
    9c78:	4904703a 	and	r2,r9,r4
    9c7c:	5146703a 	and	r3,r10,r5
    9c80:	10c4b03a 	or	r2,r2,r3
    9c84:	10000526 	beq	r2,zero,9c9c <__unpack_d+0x130>
    9c88:	00800044 	movi	r2,1
    9c8c:	68800015 	stw	r2,0(r13)
    9c90:	6b000415 	stw	r12,16(r13)
    9c94:	6ac00315 	stw	r11,12(r13)
    9c98:	f800283a 	ret
    9c9c:	68000015 	stw	zero,0(r13)
    9ca0:	003ffb06 	br	9c90 <__unpack_d+0x124>

00009ca4 <__fpcmp_parts_d>:
    9ca4:	21800017 	ldw	r6,0(r4)
    9ca8:	00c00044 	movi	r3,1
    9cac:	19800a2e 	bgeu	r3,r6,9cd8 <__fpcmp_parts_d+0x34>
    9cb0:	28800017 	ldw	r2,0(r5)
    9cb4:	1880082e 	bgeu	r3,r2,9cd8 <__fpcmp_parts_d+0x34>
    9cb8:	00c00104 	movi	r3,4
    9cbc:	30c02626 	beq	r6,r3,9d58 <__fpcmp_parts_d+0xb4>
    9cc0:	10c02226 	beq	r2,r3,9d4c <__fpcmp_parts_d+0xa8>
    9cc4:	00c00084 	movi	r3,2
    9cc8:	30c00526 	beq	r6,r3,9ce0 <__fpcmp_parts_d+0x3c>
    9ccc:	10c0071e 	bne	r2,r3,9cec <__fpcmp_parts_d+0x48>
    9cd0:	20800117 	ldw	r2,4(r4)
    9cd4:	1000091e 	bne	r2,zero,9cfc <__fpcmp_parts_d+0x58>
    9cd8:	00800044 	movi	r2,1
    9cdc:	f800283a 	ret
    9ce0:	10c01a1e 	bne	r2,r3,9d4c <__fpcmp_parts_d+0xa8>
    9ce4:	0005883a 	mov	r2,zero
    9ce8:	f800283a 	ret
    9cec:	22000117 	ldw	r8,4(r4)
    9cf0:	28800117 	ldw	r2,4(r5)
    9cf4:	40800326 	beq	r8,r2,9d04 <__fpcmp_parts_d+0x60>
    9cf8:	403ff726 	beq	r8,zero,9cd8 <__fpcmp_parts_d+0x34>
    9cfc:	00bfffc4 	movi	r2,-1
    9d00:	f800283a 	ret
    9d04:	20c00217 	ldw	r3,8(r4)
    9d08:	28800217 	ldw	r2,8(r5)
    9d0c:	10fffa16 	blt	r2,r3,9cf8 <__fpcmp_parts_d+0x54>
    9d10:	18800916 	blt	r3,r2,9d38 <__fpcmp_parts_d+0x94>
    9d14:	21c00417 	ldw	r7,16(r4)
    9d18:	28c00417 	ldw	r3,16(r5)
    9d1c:	21800317 	ldw	r6,12(r4)
    9d20:	28800317 	ldw	r2,12(r5)
    9d24:	19fff436 	bltu	r3,r7,9cf8 <__fpcmp_parts_d+0x54>
    9d28:	38c00526 	beq	r7,r3,9d40 <__fpcmp_parts_d+0x9c>
    9d2c:	38c00236 	bltu	r7,r3,9d38 <__fpcmp_parts_d+0x94>
    9d30:	19ffec1e 	bne	r3,r7,9ce4 <__fpcmp_parts_d+0x40>
    9d34:	30bfeb2e 	bgeu	r6,r2,9ce4 <__fpcmp_parts_d+0x40>
    9d38:	403fe71e 	bne	r8,zero,9cd8 <__fpcmp_parts_d+0x34>
    9d3c:	003fef06 	br	9cfc <__fpcmp_parts_d+0x58>
    9d40:	11bffa2e 	bgeu	r2,r6,9d2c <__fpcmp_parts_d+0x88>
    9d44:	403fe426 	beq	r8,zero,9cd8 <__fpcmp_parts_d+0x34>
    9d48:	003fec06 	br	9cfc <__fpcmp_parts_d+0x58>
    9d4c:	28800117 	ldw	r2,4(r5)
    9d50:	103fe11e 	bne	r2,zero,9cd8 <__fpcmp_parts_d+0x34>
    9d54:	003fe906 	br	9cfc <__fpcmp_parts_d+0x58>
    9d58:	11bfdd1e 	bne	r2,r6,9cd0 <__fpcmp_parts_d+0x2c>
    9d5c:	28c00117 	ldw	r3,4(r5)
    9d60:	20800117 	ldw	r2,4(r4)
    9d64:	1885c83a 	sub	r2,r3,r2
    9d68:	f800283a 	ret

00009d6c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9d6c:	defff804 	addi	sp,sp,-32
    9d70:	dfc00715 	stw	ra,28(sp)
    9d74:	df000615 	stw	fp,24(sp)
    9d78:	df000604 	addi	fp,sp,24
    9d7c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9d80:	e0bffc17 	ldw	r2,-16(fp)
    9d84:	1004803a 	cmplt	r2,r2,zero
    9d88:	1000091e 	bne	r2,zero,9db0 <close+0x44>
    9d8c:	e13ffc17 	ldw	r4,-16(fp)
    9d90:	01400304 	movi	r5,12
    9d94:	000967c0 	call	967c <__mulsi3>
    9d98:	1007883a 	mov	r3,r2
    9d9c:	00800074 	movhi	r2,1
    9da0:	10b7ac04 	addi	r2,r2,-8528
    9da4:	1887883a 	add	r3,r3,r2
    9da8:	e0ffff15 	stw	r3,-4(fp)
    9dac:	00000106 	br	9db4 <close+0x48>
    9db0:	e03fff15 	stw	zero,-4(fp)
    9db4:	e0bfff17 	ldw	r2,-4(fp)
    9db8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    9dbc:	e0bffb17 	ldw	r2,-20(fp)
    9dc0:	1005003a 	cmpeq	r2,r2,zero
    9dc4:	10001d1e 	bne	r2,zero,9e3c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9dc8:	e0bffb17 	ldw	r2,-20(fp)
    9dcc:	10800017 	ldw	r2,0(r2)
    9dd0:	10800417 	ldw	r2,16(r2)
    9dd4:	1005003a 	cmpeq	r2,r2,zero
    9dd8:	1000071e 	bne	r2,zero,9df8 <close+0x8c>
    9ddc:	e0bffb17 	ldw	r2,-20(fp)
    9de0:	10800017 	ldw	r2,0(r2)
    9de4:	10800417 	ldw	r2,16(r2)
    9de8:	e13ffb17 	ldw	r4,-20(fp)
    9dec:	103ee83a 	callr	r2
    9df0:	e0bffe15 	stw	r2,-8(fp)
    9df4:	00000106 	br	9dfc <close+0x90>
    9df8:	e03ffe15 	stw	zero,-8(fp)
    9dfc:	e0bffe17 	ldw	r2,-8(fp)
    9e00:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9e04:	e13ffc17 	ldw	r4,-16(fp)
    9e08:	000a5c40 	call	a5c4 <alt_release_fd>
    if (rval < 0)
    9e0c:	e0bffa17 	ldw	r2,-24(fp)
    9e10:	1004403a 	cmpge	r2,r2,zero
    9e14:	1000071e 	bne	r2,zero,9e34 <close+0xc8>
    {
      ALT_ERRNO = -rval;
    9e18:	0009e6c0 	call	9e6c <alt_get_errno>
    9e1c:	e0fffa17 	ldw	r3,-24(fp)
    9e20:	00c7c83a 	sub	r3,zero,r3
    9e24:	10c00015 	stw	r3,0(r2)
      return -1;
    9e28:	00bfffc4 	movi	r2,-1
    9e2c:	e0bffd15 	stw	r2,-12(fp)
    9e30:	00000806 	br	9e54 <close+0xe8>
    }
    return 0;
    9e34:	e03ffd15 	stw	zero,-12(fp)
    9e38:	00000606 	br	9e54 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9e3c:	0009e6c0 	call	9e6c <alt_get_errno>
    9e40:	1007883a 	mov	r3,r2
    9e44:	00801444 	movi	r2,81
    9e48:	18800015 	stw	r2,0(r3)
    return -1;
    9e4c:	00bfffc4 	movi	r2,-1
    9e50:	e0bffd15 	stw	r2,-12(fp)
    9e54:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    9e58:	e037883a 	mov	sp,fp
    9e5c:	dfc00117 	ldw	ra,4(sp)
    9e60:	df000017 	ldw	fp,0(sp)
    9e64:	dec00204 	addi	sp,sp,8
    9e68:	f800283a 	ret

00009e6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9e6c:	defffd04 	addi	sp,sp,-12
    9e70:	dfc00215 	stw	ra,8(sp)
    9e74:	df000115 	stw	fp,4(sp)
    9e78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9e7c:	00800074 	movhi	r2,1
    9e80:	10bc6004 	addi	r2,r2,-3712
    9e84:	10800017 	ldw	r2,0(r2)
    9e88:	1005003a 	cmpeq	r2,r2,zero
    9e8c:	1000061e 	bne	r2,zero,9ea8 <alt_get_errno+0x3c>
    9e90:	00800074 	movhi	r2,1
    9e94:	10bc6004 	addi	r2,r2,-3712
    9e98:	10800017 	ldw	r2,0(r2)
    9e9c:	103ee83a 	callr	r2
    9ea0:	e0bfff15 	stw	r2,-4(fp)
    9ea4:	00000306 	br	9eb4 <alt_get_errno+0x48>
    9ea8:	00800074 	movhi	r2,1
    9eac:	10833304 	addi	r2,r2,3276
    9eb0:	e0bfff15 	stw	r2,-4(fp)
    9eb4:	e0bfff17 	ldw	r2,-4(fp)
}
    9eb8:	e037883a 	mov	sp,fp
    9ebc:	dfc00117 	ldw	ra,4(sp)
    9ec0:	df000017 	ldw	fp,0(sp)
    9ec4:	dec00204 	addi	sp,sp,8
    9ec8:	f800283a 	ret

00009ecc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    9ecc:	defffc04 	addi	sp,sp,-16
    9ed0:	df000315 	stw	fp,12(sp)
    9ed4:	df000304 	addi	fp,sp,12
    9ed8:	e13ffd15 	stw	r4,-12(fp)
    9edc:	e17ffe15 	stw	r5,-8(fp)
    9ee0:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9ee4:	e0bfff17 	ldw	r2,-4(fp)
}
    9ee8:	e037883a 	mov	sp,fp
    9eec:	df000017 	ldw	fp,0(sp)
    9ef0:	dec00104 	addi	sp,sp,4
    9ef4:	f800283a 	ret

00009ef8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    9ef8:	defff904 	addi	sp,sp,-28
    9efc:	dfc00615 	stw	ra,24(sp)
    9f00:	df000515 	stw	fp,20(sp)
    9f04:	df000504 	addi	fp,sp,20
    9f08:	e13ffc15 	stw	r4,-16(fp)
    9f0c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    9f10:	e0bffc17 	ldw	r2,-16(fp)
    9f14:	1004803a 	cmplt	r2,r2,zero
    9f18:	1000091e 	bne	r2,zero,9f40 <fstat+0x48>
    9f1c:	e13ffc17 	ldw	r4,-16(fp)
    9f20:	01400304 	movi	r5,12
    9f24:	000967c0 	call	967c <__mulsi3>
    9f28:	1007883a 	mov	r3,r2
    9f2c:	00800074 	movhi	r2,1
    9f30:	10b7ac04 	addi	r2,r2,-8528
    9f34:	1887883a 	add	r3,r3,r2
    9f38:	e0ffff15 	stw	r3,-4(fp)
    9f3c:	00000106 	br	9f44 <fstat+0x4c>
    9f40:	e03fff15 	stw	zero,-4(fp)
    9f44:	e0bfff17 	ldw	r2,-4(fp)
    9f48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    9f4c:	e0bffb17 	ldw	r2,-20(fp)
    9f50:	1005003a 	cmpeq	r2,r2,zero
    9f54:	1000121e 	bne	r2,zero,9fa0 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    9f58:	e0bffb17 	ldw	r2,-20(fp)
    9f5c:	10800017 	ldw	r2,0(r2)
    9f60:	10800817 	ldw	r2,32(r2)
    9f64:	1005003a 	cmpeq	r2,r2,zero
    9f68:	1000081e 	bne	r2,zero,9f8c <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
    9f6c:	e0bffb17 	ldw	r2,-20(fp)
    9f70:	10800017 	ldw	r2,0(r2)
    9f74:	10800817 	ldw	r2,32(r2)
    9f78:	e13ffb17 	ldw	r4,-20(fp)
    9f7c:	e17ffd17 	ldw	r5,-12(fp)
    9f80:	103ee83a 	callr	r2
    9f84:	e0bffe15 	stw	r2,-8(fp)
    9f88:	00000b06 	br	9fb8 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    9f8c:	e0fffd17 	ldw	r3,-12(fp)
    9f90:	00880004 	movi	r2,8192
    9f94:	18800115 	stw	r2,4(r3)
      return 0;
    9f98:	e03ffe15 	stw	zero,-8(fp)
    9f9c:	00000606 	br	9fb8 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    9fa0:	0009fd00 	call	9fd0 <alt_get_errno>
    9fa4:	1007883a 	mov	r3,r2
    9fa8:	00801444 	movi	r2,81
    9fac:	18800015 	stw	r2,0(r3)
    return -1;
    9fb0:	00bfffc4 	movi	r2,-1
    9fb4:	e0bffe15 	stw	r2,-8(fp)
    9fb8:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    9fbc:	e037883a 	mov	sp,fp
    9fc0:	dfc00117 	ldw	ra,4(sp)
    9fc4:	df000017 	ldw	fp,0(sp)
    9fc8:	dec00204 	addi	sp,sp,8
    9fcc:	f800283a 	ret

00009fd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9fd0:	defffd04 	addi	sp,sp,-12
    9fd4:	dfc00215 	stw	ra,8(sp)
    9fd8:	df000115 	stw	fp,4(sp)
    9fdc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    9fe0:	00800074 	movhi	r2,1
    9fe4:	10bc6004 	addi	r2,r2,-3712
    9fe8:	10800017 	ldw	r2,0(r2)
    9fec:	1005003a 	cmpeq	r2,r2,zero
    9ff0:	1000061e 	bne	r2,zero,a00c <alt_get_errno+0x3c>
    9ff4:	00800074 	movhi	r2,1
    9ff8:	10bc6004 	addi	r2,r2,-3712
    9ffc:	10800017 	ldw	r2,0(r2)
    a000:	103ee83a 	callr	r2
    a004:	e0bfff15 	stw	r2,-4(fp)
    a008:	00000306 	br	a018 <alt_get_errno+0x48>
    a00c:	00800074 	movhi	r2,1
    a010:	10833304 	addi	r2,r2,3276
    a014:	e0bfff15 	stw	r2,-4(fp)
    a018:	e0bfff17 	ldw	r2,-4(fp)
}
    a01c:	e037883a 	mov	sp,fp
    a020:	dfc00117 	ldw	ra,4(sp)
    a024:	df000017 	ldw	fp,0(sp)
    a028:	dec00204 	addi	sp,sp,8
    a02c:	f800283a 	ret

0000a030 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    a030:	deffeb04 	addi	sp,sp,-84
    a034:	dfc01415 	stw	ra,80(sp)
    a038:	df001315 	stw	fp,76(sp)
    a03c:	df001304 	addi	fp,sp,76
    a040:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a044:	e0bffd17 	ldw	r2,-12(fp)
    a048:	1004803a 	cmplt	r2,r2,zero
    a04c:	1000091e 	bne	r2,zero,a074 <isatty+0x44>
    a050:	e13ffd17 	ldw	r4,-12(fp)
    a054:	01400304 	movi	r5,12
    a058:	000967c0 	call	967c <__mulsi3>
    a05c:	1007883a 	mov	r3,r2
    a060:	00800074 	movhi	r2,1
    a064:	10b7ac04 	addi	r2,r2,-8528
    a068:	1887883a 	add	r3,r3,r2
    a06c:	e0ffff15 	stw	r3,-4(fp)
    a070:	00000106 	br	a078 <isatty+0x48>
    a074:	e03fff15 	stw	zero,-4(fp)
    a078:	e0bfff17 	ldw	r2,-4(fp)
    a07c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    a080:	e0bfed17 	ldw	r2,-76(fp)
    a084:	1005003a 	cmpeq	r2,r2,zero
    a088:	10000f1e 	bne	r2,zero,a0c8 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    a08c:	e0bfed17 	ldw	r2,-76(fp)
    a090:	10800017 	ldw	r2,0(r2)
    a094:	10800817 	ldw	r2,32(r2)
    a098:	1004c03a 	cmpne	r2,r2,zero
    a09c:	1000031e 	bne	r2,zero,a0ac <isatty+0x7c>
    {
      return 1;
    a0a0:	00800044 	movi	r2,1
    a0a4:	e0bffe15 	stw	r2,-8(fp)
    a0a8:	00000c06 	br	a0dc <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    a0ac:	e17fee04 	addi	r5,fp,-72
    a0b0:	e13ffd17 	ldw	r4,-12(fp)
    a0b4:	0009ef80 	call	9ef8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    a0b8:	e0bfef17 	ldw	r2,-68(fp)
    a0bc:	10880020 	cmpeqi	r2,r2,8192
    a0c0:	e0bffe15 	stw	r2,-8(fp)
    a0c4:	00000506 	br	a0dc <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    a0c8:	000a0f40 	call	a0f4 <alt_get_errno>
    a0cc:	1007883a 	mov	r3,r2
    a0d0:	00801444 	movi	r2,81
    a0d4:	18800015 	stw	r2,0(r3)
    return 0;
    a0d8:	e03ffe15 	stw	zero,-8(fp)
    a0dc:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    a0e0:	e037883a 	mov	sp,fp
    a0e4:	dfc00117 	ldw	ra,4(sp)
    a0e8:	df000017 	ldw	fp,0(sp)
    a0ec:	dec00204 	addi	sp,sp,8
    a0f0:	f800283a 	ret

0000a0f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a0f4:	defffd04 	addi	sp,sp,-12
    a0f8:	dfc00215 	stw	ra,8(sp)
    a0fc:	df000115 	stw	fp,4(sp)
    a100:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a104:	00800074 	movhi	r2,1
    a108:	10bc6004 	addi	r2,r2,-3712
    a10c:	10800017 	ldw	r2,0(r2)
    a110:	1005003a 	cmpeq	r2,r2,zero
    a114:	1000061e 	bne	r2,zero,a130 <alt_get_errno+0x3c>
    a118:	00800074 	movhi	r2,1
    a11c:	10bc6004 	addi	r2,r2,-3712
    a120:	10800017 	ldw	r2,0(r2)
    a124:	103ee83a 	callr	r2
    a128:	e0bfff15 	stw	r2,-4(fp)
    a12c:	00000306 	br	a13c <alt_get_errno+0x48>
    a130:	00800074 	movhi	r2,1
    a134:	10833304 	addi	r2,r2,3276
    a138:	e0bfff15 	stw	r2,-4(fp)
    a13c:	e0bfff17 	ldw	r2,-4(fp)
}
    a140:	e037883a 	mov	sp,fp
    a144:	dfc00117 	ldw	ra,4(sp)
    a148:	df000017 	ldw	fp,0(sp)
    a14c:	dec00204 	addi	sp,sp,8
    a150:	f800283a 	ret

0000a154 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    a154:	defffe04 	addi	sp,sp,-8
    a158:	dfc00115 	stw	ra,4(sp)
    a15c:	df000015 	stw	fp,0(sp)
    a160:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    a164:	01000074 	movhi	r4,1
    a168:	213c6504 	addi	r4,r4,-3692
    a16c:	01400074 	movhi	r5,1
    a170:	29759d04 	addi	r5,r5,-10636
    a174:	01800074 	movhi	r6,1
    a178:	31bc6504 	addi	r6,r6,-3692
    a17c:	000a1d40 	call	a1d4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    a180:	01000034 	movhi	r4,0
    a184:	21000804 	addi	r4,r4,32
    a188:	01400034 	movhi	r5,0
    a18c:	29400804 	addi	r5,r5,32
    a190:	01800034 	movhi	r6,0
    a194:	31806d04 	addi	r6,r6,436
    a198:	000a1d40 	call	a1d4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    a19c:	01000074 	movhi	r4,1
    a1a0:	2134c604 	addi	r4,r4,-11496
    a1a4:	01400074 	movhi	r5,1
    a1a8:	2974c604 	addi	r5,r5,-11496
    a1ac:	01800074 	movhi	r6,1
    a1b0:	31b59d04 	addi	r6,r6,-10636
    a1b4:	000a1d40 	call	a1d4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    a1b8:	000c1b00 	call	c1b0 <alt_dcache_flush_all>
  alt_icache_flush_all();
    a1bc:	000c3a80 	call	c3a8 <alt_icache_flush_all>
}
    a1c0:	e037883a 	mov	sp,fp
    a1c4:	dfc00117 	ldw	ra,4(sp)
    a1c8:	df000017 	ldw	fp,0(sp)
    a1cc:	dec00204 	addi	sp,sp,8
    a1d0:	f800283a 	ret

0000a1d4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    a1d4:	defffc04 	addi	sp,sp,-16
    a1d8:	df000315 	stw	fp,12(sp)
    a1dc:	df000304 	addi	fp,sp,12
    a1e0:	e13ffd15 	stw	r4,-12(fp)
    a1e4:	e17ffe15 	stw	r5,-8(fp)
    a1e8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    a1ec:	e0fffe17 	ldw	r3,-8(fp)
    a1f0:	e0bffd17 	ldw	r2,-12(fp)
    a1f4:	18800e26 	beq	r3,r2,a230 <alt_load_section+0x5c>
  {
    while( to != end )
    a1f8:	00000a06 	br	a224 <alt_load_section+0x50>
    {
      *to++ = *from++;
    a1fc:	e0bffd17 	ldw	r2,-12(fp)
    a200:	10c00017 	ldw	r3,0(r2)
    a204:	e0bffe17 	ldw	r2,-8(fp)
    a208:	10c00015 	stw	r3,0(r2)
    a20c:	e0bffe17 	ldw	r2,-8(fp)
    a210:	10800104 	addi	r2,r2,4
    a214:	e0bffe15 	stw	r2,-8(fp)
    a218:	e0bffd17 	ldw	r2,-12(fp)
    a21c:	10800104 	addi	r2,r2,4
    a220:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    a224:	e0fffe17 	ldw	r3,-8(fp)
    a228:	e0bfff17 	ldw	r2,-4(fp)
    a22c:	18bff31e 	bne	r3,r2,a1fc <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    a230:	e037883a 	mov	sp,fp
    a234:	df000017 	ldw	fp,0(sp)
    a238:	dec00104 	addi	sp,sp,4
    a23c:	f800283a 	ret

0000a240 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    a240:	defff804 	addi	sp,sp,-32
    a244:	dfc00715 	stw	ra,28(sp)
    a248:	df000615 	stw	fp,24(sp)
    a24c:	df000604 	addi	fp,sp,24
    a250:	e13ffc15 	stw	r4,-16(fp)
    a254:	e17ffd15 	stw	r5,-12(fp)
    a258:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    a25c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a260:	e0bffc17 	ldw	r2,-16(fp)
    a264:	1004803a 	cmplt	r2,r2,zero
    a268:	1000091e 	bne	r2,zero,a290 <lseek+0x50>
    a26c:	e13ffc17 	ldw	r4,-16(fp)
    a270:	01400304 	movi	r5,12
    a274:	000967c0 	call	967c <__mulsi3>
    a278:	1007883a 	mov	r3,r2
    a27c:	00800074 	movhi	r2,1
    a280:	10b7ac04 	addi	r2,r2,-8528
    a284:	1887883a 	add	r3,r3,r2
    a288:	e0ffff15 	stw	r3,-4(fp)
    a28c:	00000106 	br	a294 <lseek+0x54>
    a290:	e03fff15 	stw	zero,-4(fp)
    a294:	e0bfff17 	ldw	r2,-4(fp)
    a298:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    a29c:	e0bffb17 	ldw	r2,-20(fp)
    a2a0:	1005003a 	cmpeq	r2,r2,zero
    a2a4:	1000111e 	bne	r2,zero,a2ec <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    a2a8:	e0bffb17 	ldw	r2,-20(fp)
    a2ac:	10800017 	ldw	r2,0(r2)
    a2b0:	10800717 	ldw	r2,28(r2)
    a2b4:	1005003a 	cmpeq	r2,r2,zero
    a2b8:	1000091e 	bne	r2,zero,a2e0 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    a2bc:	e0bffb17 	ldw	r2,-20(fp)
    a2c0:	10800017 	ldw	r2,0(r2)
    a2c4:	10800717 	ldw	r2,28(r2)
    a2c8:	e13ffb17 	ldw	r4,-20(fp)
    a2cc:	e17ffd17 	ldw	r5,-12(fp)
    a2d0:	e1bffe17 	ldw	r6,-8(fp)
    a2d4:	103ee83a 	callr	r2
    a2d8:	e0bffa15 	stw	r2,-24(fp)
    a2dc:	00000506 	br	a2f4 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    a2e0:	00bfde84 	movi	r2,-134
    a2e4:	e0bffa15 	stw	r2,-24(fp)
    a2e8:	00000206 	br	a2f4 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
    a2ec:	00bfebc4 	movi	r2,-81
    a2f0:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    a2f4:	e0bffa17 	ldw	r2,-24(fp)
    a2f8:	1004403a 	cmpge	r2,r2,zero
    a2fc:	1000071e 	bne	r2,zero,a31c <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
    a300:	000a3340 	call	a334 <alt_get_errno>
    a304:	1007883a 	mov	r3,r2
    a308:	e0bffa17 	ldw	r2,-24(fp)
    a30c:	0085c83a 	sub	r2,zero,r2
    a310:	18800015 	stw	r2,0(r3)
    rc = -1;
    a314:	00bfffc4 	movi	r2,-1
    a318:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    a31c:	e0bffa17 	ldw	r2,-24(fp)
}
    a320:	e037883a 	mov	sp,fp
    a324:	dfc00117 	ldw	ra,4(sp)
    a328:	df000017 	ldw	fp,0(sp)
    a32c:	dec00204 	addi	sp,sp,8
    a330:	f800283a 	ret

0000a334 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a334:	defffd04 	addi	sp,sp,-12
    a338:	dfc00215 	stw	ra,8(sp)
    a33c:	df000115 	stw	fp,4(sp)
    a340:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a344:	00800074 	movhi	r2,1
    a348:	10bc6004 	addi	r2,r2,-3712
    a34c:	10800017 	ldw	r2,0(r2)
    a350:	1005003a 	cmpeq	r2,r2,zero
    a354:	1000061e 	bne	r2,zero,a370 <alt_get_errno+0x3c>
    a358:	00800074 	movhi	r2,1
    a35c:	10bc6004 	addi	r2,r2,-3712
    a360:	10800017 	ldw	r2,0(r2)
    a364:	103ee83a 	callr	r2
    a368:	e0bfff15 	stw	r2,-4(fp)
    a36c:	00000306 	br	a37c <alt_get_errno+0x48>
    a370:	00800074 	movhi	r2,1
    a374:	10833304 	addi	r2,r2,3276
    a378:	e0bfff15 	stw	r2,-4(fp)
    a37c:	e0bfff17 	ldw	r2,-4(fp)
}
    a380:	e037883a 	mov	sp,fp
    a384:	dfc00117 	ldw	ra,4(sp)
    a388:	df000017 	ldw	fp,0(sp)
    a38c:	dec00204 	addi	sp,sp,8
    a390:	f800283a 	ret

0000a394 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    a394:	defffd04 	addi	sp,sp,-12
    a398:	dfc00215 	stw	ra,8(sp)
    a39c:	df000115 	stw	fp,4(sp)
    a3a0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    a3a4:	0009883a 	mov	r4,zero
    a3a8:	000a8ac0 	call	a8ac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    a3ac:	000a8e00 	call	a8e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    a3b0:	01000074 	movhi	r4,1
    a3b4:	21359004 	addi	r4,r4,-10688
    a3b8:	01400074 	movhi	r5,1
    a3bc:	29759004 	addi	r5,r5,-10688
    a3c0:	01800074 	movhi	r6,1
    a3c4:	31b59004 	addi	r6,r6,-10688
    a3c8:	000c7680 	call	c768 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    a3cc:	000c2e00 	call	c2e0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    a3d0:	01000074 	movhi	r4,1
    a3d4:	2130d104 	addi	r4,r4,-15548
    a3d8:	000cf0c0 	call	cf0c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    a3dc:	d126df17 	ldw	r4,-25732(gp)
    a3e0:	d166e017 	ldw	r5,-25728(gp)
    a3e4:	d1a6e117 	ldw	r6,-25724(gp)
    a3e8:	00002f40 	call	2f4 <main>
    a3ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    a3f0:	01000044 	movi	r4,1
    a3f4:	0009d6c0 	call	9d6c <close>
  exit (result);
    a3f8:	e13fff17 	ldw	r4,-4(fp)
    a3fc:	000cf200 	call	cf20 <exit>

0000a400 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    a400:	defffe04 	addi	sp,sp,-8
    a404:	df000115 	stw	fp,4(sp)
    a408:	df000104 	addi	fp,sp,4
    a40c:	e13fff15 	stw	r4,-4(fp)
}
    a410:	e037883a 	mov	sp,fp
    a414:	df000017 	ldw	fp,0(sp)
    a418:	dec00104 	addi	sp,sp,4
    a41c:	f800283a 	ret

0000a420 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    a420:	defffe04 	addi	sp,sp,-8
    a424:	df000115 	stw	fp,4(sp)
    a428:	df000104 	addi	fp,sp,4
    a42c:	e13fff15 	stw	r4,-4(fp)
}
    a430:	e037883a 	mov	sp,fp
    a434:	df000017 	ldw	fp,0(sp)
    a438:	dec00104 	addi	sp,sp,4
    a43c:	f800283a 	ret

0000a440 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    a440:	defff704 	addi	sp,sp,-36
    a444:	dfc00815 	stw	ra,32(sp)
    a448:	df000715 	stw	fp,28(sp)
    a44c:	df000704 	addi	fp,sp,28
    a450:	e13ffb15 	stw	r4,-20(fp)
    a454:	e17ffc15 	stw	r5,-16(fp)
    a458:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a45c:	e0bffb17 	ldw	r2,-20(fp)
    a460:	1004803a 	cmplt	r2,r2,zero
    a464:	1000091e 	bne	r2,zero,a48c <read+0x4c>
    a468:	e13ffb17 	ldw	r4,-20(fp)
    a46c:	01400304 	movi	r5,12
    a470:	000967c0 	call	967c <__mulsi3>
    a474:	1007883a 	mov	r3,r2
    a478:	00800074 	movhi	r2,1
    a47c:	10b7ac04 	addi	r2,r2,-8528
    a480:	1887883a 	add	r3,r3,r2
    a484:	e0ffff15 	stw	r3,-4(fp)
    a488:	00000106 	br	a490 <read+0x50>
    a48c:	e03fff15 	stw	zero,-4(fp)
    a490:	e0bfff17 	ldw	r2,-4(fp)
    a494:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a498:	e0bffa17 	ldw	r2,-24(fp)
    a49c:	1005003a 	cmpeq	r2,r2,zero
    a4a0:	1000241e 	bne	r2,zero,a534 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    a4a4:	e0bffa17 	ldw	r2,-24(fp)
    a4a8:	10800217 	ldw	r2,8(r2)
    a4ac:	108000cc 	andi	r2,r2,3
    a4b0:	10800060 	cmpeqi	r2,r2,1
    a4b4:	10001a1e 	bne	r2,zero,a520 <read+0xe0>
    a4b8:	e0bffa17 	ldw	r2,-24(fp)
    a4bc:	10800017 	ldw	r2,0(r2)
    a4c0:	10800517 	ldw	r2,20(r2)
    a4c4:	1005003a 	cmpeq	r2,r2,zero
    a4c8:	1000151e 	bne	r2,zero,a520 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    a4cc:	e0bffa17 	ldw	r2,-24(fp)
    a4d0:	10800017 	ldw	r2,0(r2)
    a4d4:	10800517 	ldw	r2,20(r2)
    a4d8:	e17ffc17 	ldw	r5,-16(fp)
    a4dc:	e1bffd17 	ldw	r6,-12(fp)
    a4e0:	e13ffa17 	ldw	r4,-24(fp)
    a4e4:	103ee83a 	callr	r2
    a4e8:	e0bff915 	stw	r2,-28(fp)
    a4ec:	e0bff917 	ldw	r2,-28(fp)
    a4f0:	1004403a 	cmpge	r2,r2,zero
    a4f4:	1000071e 	bne	r2,zero,a514 <read+0xd4>
        {
          ALT_ERRNO = -rval;
    a4f8:	000a5640 	call	a564 <alt_get_errno>
    a4fc:	e0fff917 	ldw	r3,-28(fp)
    a500:	00c7c83a 	sub	r3,zero,r3
    a504:	10c00015 	stw	r3,0(r2)
          return -1;
    a508:	00bfffc4 	movi	r2,-1
    a50c:	e0bffe15 	stw	r2,-8(fp)
    a510:	00000e06 	br	a54c <read+0x10c>
        }
        return rval;
    a514:	e0bff917 	ldw	r2,-28(fp)
    a518:	e0bffe15 	stw	r2,-8(fp)
    a51c:	00000b06 	br	a54c <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
    a520:	000a5640 	call	a564 <alt_get_errno>
    a524:	1007883a 	mov	r3,r2
    a528:	00800344 	movi	r2,13
    a52c:	18800015 	stw	r2,0(r3)
    a530:	00000406 	br	a544 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    a534:	000a5640 	call	a564 <alt_get_errno>
    a538:	1007883a 	mov	r3,r2
    a53c:	00801444 	movi	r2,81
    a540:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a544:	00bfffc4 	movi	r2,-1
    a548:	e0bffe15 	stw	r2,-8(fp)
    a54c:	e0bffe17 	ldw	r2,-8(fp)
}
    a550:	e037883a 	mov	sp,fp
    a554:	dfc00117 	ldw	ra,4(sp)
    a558:	df000017 	ldw	fp,0(sp)
    a55c:	dec00204 	addi	sp,sp,8
    a560:	f800283a 	ret

0000a564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a564:	defffd04 	addi	sp,sp,-12
    a568:	dfc00215 	stw	ra,8(sp)
    a56c:	df000115 	stw	fp,4(sp)
    a570:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a574:	00800074 	movhi	r2,1
    a578:	10bc6004 	addi	r2,r2,-3712
    a57c:	10800017 	ldw	r2,0(r2)
    a580:	1005003a 	cmpeq	r2,r2,zero
    a584:	1000061e 	bne	r2,zero,a5a0 <alt_get_errno+0x3c>
    a588:	00800074 	movhi	r2,1
    a58c:	10bc6004 	addi	r2,r2,-3712
    a590:	10800017 	ldw	r2,0(r2)
    a594:	103ee83a 	callr	r2
    a598:	e0bfff15 	stw	r2,-4(fp)
    a59c:	00000306 	br	a5ac <alt_get_errno+0x48>
    a5a0:	00800074 	movhi	r2,1
    a5a4:	10833304 	addi	r2,r2,3276
    a5a8:	e0bfff15 	stw	r2,-4(fp)
    a5ac:	e0bfff17 	ldw	r2,-4(fp)
}
    a5b0:	e037883a 	mov	sp,fp
    a5b4:	dfc00117 	ldw	ra,4(sp)
    a5b8:	df000017 	ldw	fp,0(sp)
    a5bc:	dec00204 	addi	sp,sp,8
    a5c0:	f800283a 	ret

0000a5c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a5c4:	defffc04 	addi	sp,sp,-16
    a5c8:	dfc00315 	stw	ra,12(sp)
    a5cc:	df000215 	stw	fp,8(sp)
    a5d0:	dc000115 	stw	r16,4(sp)
    a5d4:	df000104 	addi	fp,sp,4
    a5d8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a5dc:	e0bfff17 	ldw	r2,-4(fp)
    a5e0:	108000d0 	cmplti	r2,r2,3
    a5e4:	10000f1e 	bne	r2,zero,a624 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
    a5e8:	e13fff17 	ldw	r4,-4(fp)
    a5ec:	04000074 	movhi	r16,1
    a5f0:	8437ac04 	addi	r16,r16,-8528
    a5f4:	01400304 	movi	r5,12
    a5f8:	000967c0 	call	967c <__mulsi3>
    a5fc:	1405883a 	add	r2,r2,r16
    a600:	10800204 	addi	r2,r2,8
    a604:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a608:	e13fff17 	ldw	r4,-4(fp)
    a60c:	04000074 	movhi	r16,1
    a610:	8437ac04 	addi	r16,r16,-8528
    a614:	01400304 	movi	r5,12
    a618:	000967c0 	call	967c <__mulsi3>
    a61c:	1405883a 	add	r2,r2,r16
    a620:	10000015 	stw	zero,0(r2)
  }
}
    a624:	e037883a 	mov	sp,fp
    a628:	dfc00217 	ldw	ra,8(sp)
    a62c:	df000117 	ldw	fp,4(sp)
    a630:	dc000017 	ldw	r16,0(sp)
    a634:	dec00304 	addi	sp,sp,12
    a638:	f800283a 	ret

0000a63c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    a63c:	defff804 	addi	sp,sp,-32
    a640:	df000715 	stw	fp,28(sp)
    a644:	df000704 	addi	fp,sp,28
    a648:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a64c:	0005303a 	rdctl	r2,status
    a650:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a654:	e0fffb17 	ldw	r3,-20(fp)
    a658:	00bfff84 	movi	r2,-2
    a65c:	1884703a 	and	r2,r3,r2
    a660:	1001703a 	wrctl	status,r2
  
  return context;
    a664:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    a668:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    a66c:	d0a00c17 	ldw	r2,-32720(gp)
    a670:	10c000c4 	addi	r3,r2,3
    a674:	00bfff04 	movi	r2,-4
    a678:	1884703a 	and	r2,r3,r2
    a67c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    a680:	d0e00c17 	ldw	r3,-32720(gp)
    a684:	e0bffe17 	ldw	r2,-8(fp)
    a688:	1887883a 	add	r3,r3,r2
    a68c:	00808034 	movhi	r2,512
    a690:	10800004 	addi	r2,r2,0
    a694:	10c0072e 	bgeu	r2,r3,a6b4 <sbrk+0x78>
    a698:	e0bffd17 	ldw	r2,-12(fp)
    a69c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a6a0:	e0bffa17 	ldw	r2,-24(fp)
    a6a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    a6a8:	00bfffc4 	movi	r2,-1
    a6ac:	e0bfff15 	stw	r2,-4(fp)
    a6b0:	00000c06 	br	a6e4 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    a6b4:	d0a00c17 	ldw	r2,-32720(gp)
    a6b8:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    a6bc:	d0e00c17 	ldw	r3,-32720(gp)
    a6c0:	e0bffe17 	ldw	r2,-8(fp)
    a6c4:	1885883a 	add	r2,r3,r2
    a6c8:	d0a00c15 	stw	r2,-32720(gp)
    a6cc:	e0bffd17 	ldw	r2,-12(fp)
    a6d0:	e0bff915 	stw	r2,-28(fp)
    a6d4:	e0bff917 	ldw	r2,-28(fp)
    a6d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    a6dc:	e0bffc17 	ldw	r2,-16(fp)
    a6e0:	e0bfff15 	stw	r2,-4(fp)
    a6e4:	e0bfff17 	ldw	r2,-4(fp)
} 
    a6e8:	e037883a 	mov	sp,fp
    a6ec:	df000017 	ldw	fp,0(sp)
    a6f0:	dec00104 	addi	sp,sp,4
    a6f4:	f800283a 	ret

0000a6f8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    a6f8:	defffd04 	addi	sp,sp,-12
    a6fc:	dfc00215 	stw	ra,8(sp)
    a700:	df000115 	stw	fp,4(sp)
    a704:	df000104 	addi	fp,sp,4
    a708:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    a70c:	e13fff17 	ldw	r4,-4(fp)
    a710:	000c0540 	call	c054 <alt_busy_sleep>
}
    a714:	e037883a 	mov	sp,fp
    a718:	dfc00117 	ldw	ra,4(sp)
    a71c:	df000017 	ldw	fp,0(sp)
    a720:	dec00204 	addi	sp,sp,8
    a724:	f800283a 	ret

0000a728 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    a728:	defff704 	addi	sp,sp,-36
    a72c:	dfc00815 	stw	ra,32(sp)
    a730:	df000715 	stw	fp,28(sp)
    a734:	df000704 	addi	fp,sp,28
    a738:	e13ffb15 	stw	r4,-20(fp)
    a73c:	e17ffc15 	stw	r5,-16(fp)
    a740:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    a744:	e0bffb17 	ldw	r2,-20(fp)
    a748:	1004803a 	cmplt	r2,r2,zero
    a74c:	1000091e 	bne	r2,zero,a774 <write+0x4c>
    a750:	e13ffb17 	ldw	r4,-20(fp)
    a754:	01400304 	movi	r5,12
    a758:	000967c0 	call	967c <__mulsi3>
    a75c:	1007883a 	mov	r3,r2
    a760:	00800074 	movhi	r2,1
    a764:	10b7ac04 	addi	r2,r2,-8528
    a768:	1887883a 	add	r3,r3,r2
    a76c:	e0ffff15 	stw	r3,-4(fp)
    a770:	00000106 	br	a778 <write+0x50>
    a774:	e03fff15 	stw	zero,-4(fp)
    a778:	e0bfff17 	ldw	r2,-4(fp)
    a77c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    a780:	e0bffa17 	ldw	r2,-24(fp)
    a784:	1005003a 	cmpeq	r2,r2,zero
    a788:	1000241e 	bne	r2,zero,a81c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    a78c:	e0bffa17 	ldw	r2,-24(fp)
    a790:	10800217 	ldw	r2,8(r2)
    a794:	108000cc 	andi	r2,r2,3
    a798:	1005003a 	cmpeq	r2,r2,zero
    a79c:	10001a1e 	bne	r2,zero,a808 <write+0xe0>
    a7a0:	e0bffa17 	ldw	r2,-24(fp)
    a7a4:	10800017 	ldw	r2,0(r2)
    a7a8:	10800617 	ldw	r2,24(r2)
    a7ac:	1005003a 	cmpeq	r2,r2,zero
    a7b0:	1000151e 	bne	r2,zero,a808 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    a7b4:	e0bffa17 	ldw	r2,-24(fp)
    a7b8:	10800017 	ldw	r2,0(r2)
    a7bc:	10800617 	ldw	r2,24(r2)
    a7c0:	e17ffc17 	ldw	r5,-16(fp)
    a7c4:	e1bffd17 	ldw	r6,-12(fp)
    a7c8:	e13ffa17 	ldw	r4,-24(fp)
    a7cc:	103ee83a 	callr	r2
    a7d0:	e0bff915 	stw	r2,-28(fp)
    a7d4:	e0bff917 	ldw	r2,-28(fp)
    a7d8:	1004403a 	cmpge	r2,r2,zero
    a7dc:	1000071e 	bne	r2,zero,a7fc <write+0xd4>
      {
        ALT_ERRNO = -rval;
    a7e0:	000a84c0 	call	a84c <alt_get_errno>
    a7e4:	e0fff917 	ldw	r3,-28(fp)
    a7e8:	00c7c83a 	sub	r3,zero,r3
    a7ec:	10c00015 	stw	r3,0(r2)
        return -1;
    a7f0:	00bfffc4 	movi	r2,-1
    a7f4:	e0bffe15 	stw	r2,-8(fp)
    a7f8:	00000e06 	br	a834 <write+0x10c>
      }
      return rval;
    a7fc:	e0bff917 	ldw	r2,-28(fp)
    a800:	e0bffe15 	stw	r2,-8(fp)
    a804:	00000b06 	br	a834 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
    a808:	000a84c0 	call	a84c <alt_get_errno>
    a80c:	1007883a 	mov	r3,r2
    a810:	00800344 	movi	r2,13
    a814:	18800015 	stw	r2,0(r3)
    a818:	00000406 	br	a82c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    a81c:	000a84c0 	call	a84c <alt_get_errno>
    a820:	1007883a 	mov	r3,r2
    a824:	00801444 	movi	r2,81
    a828:	18800015 	stw	r2,0(r3)
  }
  return -1;
    a82c:	00bfffc4 	movi	r2,-1
    a830:	e0bffe15 	stw	r2,-8(fp)
    a834:	e0bffe17 	ldw	r2,-8(fp)
}
    a838:	e037883a 	mov	sp,fp
    a83c:	dfc00117 	ldw	ra,4(sp)
    a840:	df000017 	ldw	fp,0(sp)
    a844:	dec00204 	addi	sp,sp,8
    a848:	f800283a 	ret

0000a84c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    a84c:	defffd04 	addi	sp,sp,-12
    a850:	dfc00215 	stw	ra,8(sp)
    a854:	df000115 	stw	fp,4(sp)
    a858:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    a85c:	00800074 	movhi	r2,1
    a860:	10bc6004 	addi	r2,r2,-3712
    a864:	10800017 	ldw	r2,0(r2)
    a868:	1005003a 	cmpeq	r2,r2,zero
    a86c:	1000061e 	bne	r2,zero,a888 <alt_get_errno+0x3c>
    a870:	00800074 	movhi	r2,1
    a874:	10bc6004 	addi	r2,r2,-3712
    a878:	10800017 	ldw	r2,0(r2)
    a87c:	103ee83a 	callr	r2
    a880:	e0bfff15 	stw	r2,-4(fp)
    a884:	00000306 	br	a894 <alt_get_errno+0x48>
    a888:	00800074 	movhi	r2,1
    a88c:	10833304 	addi	r2,r2,3276
    a890:	e0bfff15 	stw	r2,-4(fp)
    a894:	e0bfff17 	ldw	r2,-4(fp)
}
    a898:	e037883a 	mov	sp,fp
    a89c:	dfc00117 	ldw	ra,4(sp)
    a8a0:	df000017 	ldw	fp,0(sp)
    a8a4:	dec00204 	addi	sp,sp,8
    a8a8:	f800283a 	ret

0000a8ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    a8ac:	defffd04 	addi	sp,sp,-12
    a8b0:	dfc00215 	stw	ra,8(sp)
    a8b4:	df000115 	stw	fp,4(sp)
    a8b8:	df000104 	addi	fp,sp,4
    a8bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
    a8c0:	000cc680 	call	cc68 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    a8c4:	00800044 	movi	r2,1
    a8c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    a8cc:	e037883a 	mov	sp,fp
    a8d0:	dfc00117 	ldw	ra,4(sp)
    a8d4:	df000017 	ldw	fp,0(sp)
    a8d8:	dec00204 	addi	sp,sp,8
    a8dc:	f800283a 	ret

0000a8e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    a8e0:	defffe04 	addi	sp,sp,-8
    a8e4:	dfc00115 	stw	ra,4(sp)
    a8e8:	df000015 	stw	fp,0(sp)
    a8ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    a8f0:	01008074 	movhi	r4,513
    a8f4:	21242804 	addi	r4,r4,-28512
    a8f8:	000b883a 	mov	r5,zero
    a8fc:	000d883a 	mov	r6,zero
    a900:	01c0fa04 	movi	r7,1000
    a904:	000b4c00 	call	b4c0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    a908:	01000074 	movhi	r4,1
    a90c:	21381604 	addi	r4,r4,-8104
    a910:	000b883a 	mov	r5,zero
    a914:	018000c4 	movi	r6,3
    a918:	000aaec0 	call	aaec <altera_avalon_jtag_uart_init>
    a91c:	01000074 	movhi	r4,1
    a920:	21380c04 	addi	r4,r4,-8144
    a924:	000a96c0 	call	a96c <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    a928:	00c08074 	movhi	r3,513
    a92c:	18e40004 	addi	r3,r3,-28672
    a930:	00800044 	movi	r2,1
    a934:	18800035 	stwio	r2,0(r3)
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
    a938:	01000074 	movhi	r4,1
    a93c:	213c2e04 	addi	r4,r4,-3912
    a940:	000b883a 	mov	r5,zero
    a944:	01800104 	movi	r6,4
    a948:	000b6480 	call	b648 <altera_avalon_uart_init>
    a94c:	01000074 	movhi	r4,1
    a950:	213c2404 	addi	r4,r4,-3952
    a954:	000a96c0 	call	a96c <alt_dev_reg>
}
    a958:	e037883a 	mov	sp,fp
    a95c:	dfc00117 	ldw	ra,4(sp)
    a960:	df000017 	ldw	fp,0(sp)
    a964:	dec00204 	addi	sp,sp,8
    a968:	f800283a 	ret

0000a96c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    a96c:	defffd04 	addi	sp,sp,-12
    a970:	dfc00215 	stw	ra,8(sp)
    a974:	df000115 	stw	fp,4(sp)
    a978:	df000104 	addi	fp,sp,4
    a97c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    a980:	e13fff17 	ldw	r4,-4(fp)
    a984:	01400074 	movhi	r5,1
    a988:	297c5d04 	addi	r5,r5,-3724
    a98c:	000c1cc0 	call	c1cc <alt_dev_llist_insert>
}
    a990:	e037883a 	mov	sp,fp
    a994:	dfc00117 	ldw	ra,4(sp)
    a998:	df000017 	ldw	fp,0(sp)
    a99c:	dec00204 	addi	sp,sp,8
    a9a0:	f800283a 	ret

0000a9a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    a9a4:	defffa04 	addi	sp,sp,-24
    a9a8:	dfc00515 	stw	ra,20(sp)
    a9ac:	df000415 	stw	fp,16(sp)
    a9b0:	df000404 	addi	fp,sp,16
    a9b4:	e13ffd15 	stw	r4,-12(fp)
    a9b8:	e17ffe15 	stw	r5,-8(fp)
    a9bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    a9c0:	e0bffd17 	ldw	r2,-12(fp)
    a9c4:	10800017 	ldw	r2,0(r2)
    a9c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    a9cc:	e0bffc17 	ldw	r2,-16(fp)
    a9d0:	11000a04 	addi	r4,r2,40
    a9d4:	e0bffd17 	ldw	r2,-12(fp)
    a9d8:	11c00217 	ldw	r7,8(r2)
    a9dc:	e17ffe17 	ldw	r5,-8(fp)
    a9e0:	e1bfff17 	ldw	r6,-4(fp)
    a9e4:	000afec0 	call	afec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    a9e8:	e037883a 	mov	sp,fp
    a9ec:	dfc00117 	ldw	ra,4(sp)
    a9f0:	df000017 	ldw	fp,0(sp)
    a9f4:	dec00204 	addi	sp,sp,8
    a9f8:	f800283a 	ret

0000a9fc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    a9fc:	defffa04 	addi	sp,sp,-24
    aa00:	dfc00515 	stw	ra,20(sp)
    aa04:	df000415 	stw	fp,16(sp)
    aa08:	df000404 	addi	fp,sp,16
    aa0c:	e13ffd15 	stw	r4,-12(fp)
    aa10:	e17ffe15 	stw	r5,-8(fp)
    aa14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    aa18:	e0bffd17 	ldw	r2,-12(fp)
    aa1c:	10800017 	ldw	r2,0(r2)
    aa20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    aa24:	e0bffc17 	ldw	r2,-16(fp)
    aa28:	11000a04 	addi	r4,r2,40
    aa2c:	e0bffd17 	ldw	r2,-12(fp)
    aa30:	11c00217 	ldw	r7,8(r2)
    aa34:	e17ffe17 	ldw	r5,-8(fp)
    aa38:	e1bfff17 	ldw	r6,-4(fp)
    aa3c:	000b2100 	call	b210 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    aa40:	e037883a 	mov	sp,fp
    aa44:	dfc00117 	ldw	ra,4(sp)
    aa48:	df000017 	ldw	fp,0(sp)
    aa4c:	dec00204 	addi	sp,sp,8
    aa50:	f800283a 	ret

0000aa54 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    aa54:	defffc04 	addi	sp,sp,-16
    aa58:	dfc00315 	stw	ra,12(sp)
    aa5c:	df000215 	stw	fp,8(sp)
    aa60:	df000204 	addi	fp,sp,8
    aa64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    aa68:	e0bfff17 	ldw	r2,-4(fp)
    aa6c:	10800017 	ldw	r2,0(r2)
    aa70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    aa74:	e0bffe17 	ldw	r2,-8(fp)
    aa78:	11000a04 	addi	r4,r2,40
    aa7c:	e0bfff17 	ldw	r2,-4(fp)
    aa80:	11400217 	ldw	r5,8(r2)
    aa84:	000ae840 	call	ae84 <altera_avalon_jtag_uart_close>
}
    aa88:	e037883a 	mov	sp,fp
    aa8c:	dfc00117 	ldw	ra,4(sp)
    aa90:	df000017 	ldw	fp,0(sp)
    aa94:	dec00204 	addi	sp,sp,8
    aa98:	f800283a 	ret

0000aa9c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    aa9c:	defffa04 	addi	sp,sp,-24
    aaa0:	dfc00515 	stw	ra,20(sp)
    aaa4:	df000415 	stw	fp,16(sp)
    aaa8:	df000404 	addi	fp,sp,16
    aaac:	e13ffd15 	stw	r4,-12(fp)
    aab0:	e17ffe15 	stw	r5,-8(fp)
    aab4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    aab8:	e0bffd17 	ldw	r2,-12(fp)
    aabc:	10800017 	ldw	r2,0(r2)
    aac0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    aac4:	e0bffc17 	ldw	r2,-16(fp)
    aac8:	11000a04 	addi	r4,r2,40
    aacc:	e17ffe17 	ldw	r5,-8(fp)
    aad0:	e1bfff17 	ldw	r6,-4(fp)
    aad4:	000aef80 	call	aef8 <altera_avalon_jtag_uart_ioctl>
}
    aad8:	e037883a 	mov	sp,fp
    aadc:	dfc00117 	ldw	ra,4(sp)
    aae0:	df000017 	ldw	fp,0(sp)
    aae4:	dec00204 	addi	sp,sp,8
    aae8:	f800283a 	ret

0000aaec <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    aaec:	defffa04 	addi	sp,sp,-24
    aaf0:	dfc00515 	stw	ra,20(sp)
    aaf4:	df000415 	stw	fp,16(sp)
    aaf8:	df000404 	addi	fp,sp,16
    aafc:	e13ffd15 	stw	r4,-12(fp)
    ab00:	e17ffe15 	stw	r5,-8(fp)
    ab04:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ab08:	e0fffd17 	ldw	r3,-12(fp)
    ab0c:	00800044 	movi	r2,1
    ab10:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    ab14:	e0bffd17 	ldw	r2,-12(fp)
    ab18:	10800017 	ldw	r2,0(r2)
    ab1c:	11000104 	addi	r4,r2,4
    ab20:	e0bffd17 	ldw	r2,-12(fp)
    ab24:	10800817 	ldw	r2,32(r2)
    ab28:	1007883a 	mov	r3,r2
    ab2c:	2005883a 	mov	r2,r4
    ab30:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    ab34:	e13ffe17 	ldw	r4,-8(fp)
    ab38:	e17fff17 	ldw	r5,-4(fp)
    ab3c:	d8000015 	stw	zero,0(sp)
    ab40:	01800074 	movhi	r6,1
    ab44:	31aaeb04 	addi	r6,r6,-21588
    ab48:	e1fffd17 	ldw	r7,-12(fp)
    ab4c:	000c3c40 	call	c3c4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    ab50:	e0bffd17 	ldw	r2,-12(fp)
    ab54:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    ab58:	e0bffd17 	ldw	r2,-12(fp)
    ab5c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    ab60:	00800074 	movhi	r2,1
    ab64:	10833804 	addi	r2,r2,3296
    ab68:	10800017 	ldw	r2,0(r2)
    ab6c:	100b883a 	mov	r5,r2
    ab70:	01800074 	movhi	r6,1
    ab74:	31ab7504 	addi	r6,r6,-21036
    ab78:	e1fffd17 	ldw	r7,-12(fp)
    ab7c:	000bf000 	call	bf00 <alt_alarm_start>
    ab80:	1004403a 	cmpge	r2,r2,zero
    ab84:	1000041e 	bne	r2,zero,ab98 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    ab88:	e0fffd17 	ldw	r3,-12(fp)
    ab8c:	00a00034 	movhi	r2,32768
    ab90:	10bfffc4 	addi	r2,r2,-1
    ab94:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    ab98:	e037883a 	mov	sp,fp
    ab9c:	dfc00117 	ldw	ra,4(sp)
    aba0:	df000017 	ldw	fp,0(sp)
    aba4:	dec00204 	addi	sp,sp,8
    aba8:	f800283a 	ret

0000abac <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    abac:	defff804 	addi	sp,sp,-32
    abb0:	df000715 	stw	fp,28(sp)
    abb4:	df000704 	addi	fp,sp,28
    abb8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    abbc:	e0bfff17 	ldw	r2,-4(fp)
    abc0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    abc4:	e0bffe17 	ldw	r2,-8(fp)
    abc8:	10800017 	ldw	r2,0(r2)
    abcc:	e0bffd15 	stw	r2,-12(fp)
    abd0:	00000006 	br	abd4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    abd4:	e0bffd17 	ldw	r2,-12(fp)
    abd8:	10800104 	addi	r2,r2,4
    abdc:	10800037 	ldwio	r2,0(r2)
    abe0:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    abe4:	e0bffc17 	ldw	r2,-16(fp)
    abe8:	1080c00c 	andi	r2,r2,768
    abec:	1005003a 	cmpeq	r2,r2,zero
    abf0:	1000741e 	bne	r2,zero,adc4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    abf4:	e0bffc17 	ldw	r2,-16(fp)
    abf8:	1080400c 	andi	r2,r2,256
    abfc:	1005003a 	cmpeq	r2,r2,zero
    ac00:	1000351e 	bne	r2,zero,acd8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    ac04:	00800074 	movhi	r2,1
    ac08:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ac0c:	e0bffe17 	ldw	r2,-8(fp)
    ac10:	10800a17 	ldw	r2,40(r2)
    ac14:	10800044 	addi	r2,r2,1
    ac18:	1081ffcc 	andi	r2,r2,2047
    ac1c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    ac20:	e0bffe17 	ldw	r2,-8(fp)
    ac24:	10c00b17 	ldw	r3,44(r2)
    ac28:	e0bffa17 	ldw	r2,-24(fp)
    ac2c:	18801626 	beq	r3,r2,ac88 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    ac30:	e0bffd17 	ldw	r2,-12(fp)
    ac34:	10800037 	ldwio	r2,0(r2)
    ac38:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    ac3c:	e0bffb17 	ldw	r2,-20(fp)
    ac40:	10a0000c 	andi	r2,r2,32768
    ac44:	1005003a 	cmpeq	r2,r2,zero
    ac48:	10000f1e 	bne	r2,zero,ac88 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    ac4c:	e0bffe17 	ldw	r2,-8(fp)
    ac50:	10c00a17 	ldw	r3,40(r2)
    ac54:	e0bffb17 	ldw	r2,-20(fp)
    ac58:	1009883a 	mov	r4,r2
    ac5c:	e0bffe17 	ldw	r2,-8(fp)
    ac60:	1885883a 	add	r2,r3,r2
    ac64:	10800e04 	addi	r2,r2,56
    ac68:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ac6c:	e0bffe17 	ldw	r2,-8(fp)
    ac70:	10800a17 	ldw	r2,40(r2)
    ac74:	10800044 	addi	r2,r2,1
    ac78:	10c1ffcc 	andi	r3,r2,2047
    ac7c:	e0bffe17 	ldw	r2,-8(fp)
    ac80:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    ac84:	003fe106 	br	ac0c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    ac88:	e0bffb17 	ldw	r2,-20(fp)
    ac8c:	10bfffec 	andhi	r2,r2,65535
    ac90:	1005003a 	cmpeq	r2,r2,zero
    ac94:	1000101e 	bne	r2,zero,acd8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ac98:	e0bffe17 	ldw	r2,-8(fp)
    ac9c:	10c00817 	ldw	r3,32(r2)
    aca0:	00bfff84 	movi	r2,-2
    aca4:	1886703a 	and	r3,r3,r2
    aca8:	e0bffe17 	ldw	r2,-8(fp)
    acac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    acb0:	e0bffd17 	ldw	r2,-12(fp)
    acb4:	11000104 	addi	r4,r2,4
    acb8:	e0bffe17 	ldw	r2,-8(fp)
    acbc:	10800817 	ldw	r2,32(r2)
    acc0:	1007883a 	mov	r3,r2
    acc4:	2005883a 	mov	r2,r4
    acc8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    accc:	e0bffd17 	ldw	r2,-12(fp)
    acd0:	10800104 	addi	r2,r2,4
    acd4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    acd8:	e0bffc17 	ldw	r2,-16(fp)
    acdc:	1080800c 	andi	r2,r2,512
    ace0:	1005003a 	cmpeq	r2,r2,zero
    ace4:	103fbb1e 	bne	r2,zero,abd4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    ace8:	e0bffc17 	ldw	r2,-16(fp)
    acec:	10bfffec 	andhi	r2,r2,65535
    acf0:	1004d43a 	srli	r2,r2,16
    acf4:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    acf8:	00001506 	br	ad50 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    acfc:	e13ffd17 	ldw	r4,-12(fp)
    ad00:	e0bffe17 	ldw	r2,-8(fp)
    ad04:	10c00d17 	ldw	r3,52(r2)
    ad08:	e0bffe17 	ldw	r2,-8(fp)
    ad0c:	1885883a 	add	r2,r3,r2
    ad10:	10820e04 	addi	r2,r2,2104
    ad14:	10800003 	ldbu	r2,0(r2)
    ad18:	10c03fcc 	andi	r3,r2,255
    ad1c:	18c0201c 	xori	r3,r3,128
    ad20:	18ffe004 	addi	r3,r3,-128
    ad24:	2005883a 	mov	r2,r4
    ad28:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ad2c:	e0bffe17 	ldw	r2,-8(fp)
    ad30:	10800d17 	ldw	r2,52(r2)
    ad34:	10800044 	addi	r2,r2,1
    ad38:	10c1ffcc 	andi	r3,r2,2047
    ad3c:	e0bffe17 	ldw	r2,-8(fp)
    ad40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    ad44:	e0bff917 	ldw	r2,-28(fp)
    ad48:	10bfffc4 	addi	r2,r2,-1
    ad4c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    ad50:	e0bff917 	ldw	r2,-28(fp)
    ad54:	1005003a 	cmpeq	r2,r2,zero
    ad58:	1000051e 	bne	r2,zero,ad70 <altera_avalon_jtag_uart_irq+0x1c4>
    ad5c:	e0bffe17 	ldw	r2,-8(fp)
    ad60:	10c00d17 	ldw	r3,52(r2)
    ad64:	e0bffe17 	ldw	r2,-8(fp)
    ad68:	10800c17 	ldw	r2,48(r2)
    ad6c:	18bfe31e 	bne	r3,r2,acfc <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    ad70:	e0bff917 	ldw	r2,-28(fp)
    ad74:	1005003a 	cmpeq	r2,r2,zero
    ad78:	103f961e 	bne	r2,zero,abd4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ad7c:	e0bffe17 	ldw	r2,-8(fp)
    ad80:	10c00817 	ldw	r3,32(r2)
    ad84:	00bfff44 	movi	r2,-3
    ad88:	1886703a 	and	r3,r3,r2
    ad8c:	e0bffe17 	ldw	r2,-8(fp)
    ad90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ad94:	e0bffe17 	ldw	r2,-8(fp)
    ad98:	10800017 	ldw	r2,0(r2)
    ad9c:	11000104 	addi	r4,r2,4
    ada0:	e0bffe17 	ldw	r2,-8(fp)
    ada4:	10800817 	ldw	r2,32(r2)
    ada8:	1007883a 	mov	r3,r2
    adac:	2005883a 	mov	r2,r4
    adb0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    adb4:	e0bffd17 	ldw	r2,-12(fp)
    adb8:	10800104 	addi	r2,r2,4
    adbc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    adc0:	003f8406 	br	abd4 <altera_avalon_jtag_uart_irq+0x28>
}
    adc4:	e037883a 	mov	sp,fp
    adc8:	df000017 	ldw	fp,0(sp)
    adcc:	dec00104 	addi	sp,sp,4
    add0:	f800283a 	ret

0000add4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    add4:	defffc04 	addi	sp,sp,-16
    add8:	df000315 	stw	fp,12(sp)
    addc:	df000304 	addi	fp,sp,12
    ade0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    ade4:	e0bfff17 	ldw	r2,-4(fp)
    ade8:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    adec:	e0bffe17 	ldw	r2,-8(fp)
    adf0:	10800017 	ldw	r2,0(r2)
    adf4:	10800104 	addi	r2,r2,4
    adf8:	10800037 	ldwio	r2,0(r2)
    adfc:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    ae00:	e0bffd17 	ldw	r2,-12(fp)
    ae04:	1081000c 	andi	r2,r2,1024
    ae08:	1005003a 	cmpeq	r2,r2,zero
    ae0c:	10000c1e 	bne	r2,zero,ae40 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    ae10:	e0bffe17 	ldw	r2,-8(fp)
    ae14:	10800017 	ldw	r2,0(r2)
    ae18:	11000104 	addi	r4,r2,4
    ae1c:	e0bffe17 	ldw	r2,-8(fp)
    ae20:	10800817 	ldw	r2,32(r2)
    ae24:	10810014 	ori	r2,r2,1024
    ae28:	1007883a 	mov	r3,r2
    ae2c:	2005883a 	mov	r2,r4
    ae30:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    ae34:	e0bffe17 	ldw	r2,-8(fp)
    ae38:	10000915 	stw	zero,36(r2)
    ae3c:	00000a06 	br	ae68 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    ae40:	e0bffe17 	ldw	r2,-8(fp)
    ae44:	10c00917 	ldw	r3,36(r2)
    ae48:	00a00034 	movhi	r2,32768
    ae4c:	10bfff04 	addi	r2,r2,-4
    ae50:	10c00536 	bltu	r2,r3,ae68 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    ae54:	e0bffe17 	ldw	r2,-8(fp)
    ae58:	10800917 	ldw	r2,36(r2)
    ae5c:	10c00044 	addi	r3,r2,1
    ae60:	e0bffe17 	ldw	r2,-8(fp)
    ae64:	10c00915 	stw	r3,36(r2)
    ae68:	00800074 	movhi	r2,1
    ae6c:	10833804 	addi	r2,r2,3296
    ae70:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    ae74:	e037883a 	mov	sp,fp
    ae78:	df000017 	ldw	fp,0(sp)
    ae7c:	dec00104 	addi	sp,sp,4
    ae80:	f800283a 	ret

0000ae84 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    ae84:	defffc04 	addi	sp,sp,-16
    ae88:	df000315 	stw	fp,12(sp)
    ae8c:	df000304 	addi	fp,sp,12
    ae90:	e13ffd15 	stw	r4,-12(fp)
    ae94:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    ae98:	00000706 	br	aeb8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ae9c:	e0bffe17 	ldw	r2,-8(fp)
    aea0:	1090000c 	andi	r2,r2,16384
    aea4:	1005003a 	cmpeq	r2,r2,zero
    aea8:	1000031e 	bne	r2,zero,aeb8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    aeac:	00bffd44 	movi	r2,-11
    aeb0:	e0bfff15 	stw	r2,-4(fp)
    aeb4:	00000b06 	br	aee4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    aeb8:	e0bffd17 	ldw	r2,-12(fp)
    aebc:	10c00d17 	ldw	r3,52(r2)
    aec0:	e0bffd17 	ldw	r2,-12(fp)
    aec4:	10800c17 	ldw	r2,48(r2)
    aec8:	18800526 	beq	r3,r2,aee0 <altera_avalon_jtag_uart_close+0x5c>
    aecc:	e0bffd17 	ldw	r2,-12(fp)
    aed0:	10c00917 	ldw	r3,36(r2)
    aed4:	e0bffd17 	ldw	r2,-12(fp)
    aed8:	10800117 	ldw	r2,4(r2)
    aedc:	18bfef36 	bltu	r3,r2,ae9c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    aee0:	e03fff15 	stw	zero,-4(fp)
    aee4:	e0bfff17 	ldw	r2,-4(fp)
}
    aee8:	e037883a 	mov	sp,fp
    aeec:	df000017 	ldw	fp,0(sp)
    aef0:	dec00104 	addi	sp,sp,4
    aef4:	f800283a 	ret

0000aef8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    aef8:	defff804 	addi	sp,sp,-32
    aefc:	df000715 	stw	fp,28(sp)
    af00:	df000704 	addi	fp,sp,28
    af04:	e13ffb15 	stw	r4,-20(fp)
    af08:	e17ffc15 	stw	r5,-16(fp)
    af0c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    af10:	00bff9c4 	movi	r2,-25
    af14:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    af18:	e0bffc17 	ldw	r2,-16(fp)
    af1c:	e0bfff15 	stw	r2,-4(fp)
    af20:	e0ffff17 	ldw	r3,-4(fp)
    af24:	189a8060 	cmpeqi	r2,r3,27137
    af28:	1000041e 	bne	r2,zero,af3c <altera_avalon_jtag_uart_ioctl+0x44>
    af2c:	e0ffff17 	ldw	r3,-4(fp)
    af30:	189a80a0 	cmpeqi	r2,r3,27138
    af34:	10001b1e 	bne	r2,zero,afa4 <altera_avalon_jtag_uart_ioctl+0xac>
    af38:	00002706 	br	afd8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    af3c:	e0bffb17 	ldw	r2,-20(fp)
    af40:	10c00117 	ldw	r3,4(r2)
    af44:	00a00034 	movhi	r2,32768
    af48:	10bfffc4 	addi	r2,r2,-1
    af4c:	18802226 	beq	r3,r2,afd8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    af50:	e0bffd17 	ldw	r2,-12(fp)
    af54:	10800017 	ldw	r2,0(r2)
    af58:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    af5c:	e0bff917 	ldw	r2,-28(fp)
    af60:	10800090 	cmplti	r2,r2,2
    af64:	1000071e 	bne	r2,zero,af84 <altera_avalon_jtag_uart_ioctl+0x8c>
    af68:	e0fff917 	ldw	r3,-28(fp)
    af6c:	00a00034 	movhi	r2,32768
    af70:	10bfffc4 	addi	r2,r2,-1
    af74:	18800326 	beq	r3,r2,af84 <altera_avalon_jtag_uart_ioctl+0x8c>
    af78:	e0bff917 	ldw	r2,-28(fp)
    af7c:	e0bffe15 	stw	r2,-8(fp)
    af80:	00000306 	br	af90 <altera_avalon_jtag_uart_ioctl+0x98>
    af84:	00e00034 	movhi	r3,32768
    af88:	18ffff84 	addi	r3,r3,-2
    af8c:	e0fffe15 	stw	r3,-8(fp)
    af90:	e0bffb17 	ldw	r2,-20(fp)
    af94:	e0fffe17 	ldw	r3,-8(fp)
    af98:	10c00115 	stw	r3,4(r2)
      rc = 0;
    af9c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    afa0:	00000d06 	br	afd8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    afa4:	e0bffb17 	ldw	r2,-20(fp)
    afa8:	10c00117 	ldw	r3,4(r2)
    afac:	00a00034 	movhi	r2,32768
    afb0:	10bfffc4 	addi	r2,r2,-1
    afb4:	18800826 	beq	r3,r2,afd8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    afb8:	e13ffd17 	ldw	r4,-12(fp)
    afbc:	e0bffb17 	ldw	r2,-20(fp)
    afc0:	10c00917 	ldw	r3,36(r2)
    afc4:	e0bffb17 	ldw	r2,-20(fp)
    afc8:	10800117 	ldw	r2,4(r2)
    afcc:	1885803a 	cmpltu	r2,r3,r2
    afd0:	20800015 	stw	r2,0(r4)
      rc = 0;
    afd4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    afd8:	e0bffa17 	ldw	r2,-24(fp)
}
    afdc:	e037883a 	mov	sp,fp
    afe0:	df000017 	ldw	fp,0(sp)
    afe4:	dec00104 	addi	sp,sp,4
    afe8:	f800283a 	ret

0000afec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    afec:	defff204 	addi	sp,sp,-56
    aff0:	dfc00d15 	stw	ra,52(sp)
    aff4:	df000c15 	stw	fp,48(sp)
    aff8:	df000c04 	addi	fp,sp,48
    affc:	e13ffb15 	stw	r4,-20(fp)
    b000:	e17ffc15 	stw	r5,-16(fp)
    b004:	e1bffd15 	stw	r6,-12(fp)
    b008:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    b00c:	e0bffc17 	ldw	r2,-16(fp)
    b010:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b014:	00004806 	br	b138 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    b018:	e0bffb17 	ldw	r2,-20(fp)
    b01c:	10800a17 	ldw	r2,40(r2)
    b020:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    b024:	e0bffb17 	ldw	r2,-20(fp)
    b028:	10800b17 	ldw	r2,44(r2)
    b02c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    b030:	e0fff717 	ldw	r3,-36(fp)
    b034:	e0bff617 	ldw	r2,-40(fp)
    b038:	18800536 	bltu	r3,r2,b050 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    b03c:	e0bff717 	ldw	r2,-36(fp)
    b040:	e0fff617 	ldw	r3,-40(fp)
    b044:	10c5c83a 	sub	r2,r2,r3
    b048:	e0bff815 	stw	r2,-32(fp)
    b04c:	00000406 	br	b060 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    b050:	00820004 	movi	r2,2048
    b054:	e0fff617 	ldw	r3,-40(fp)
    b058:	10c5c83a 	sub	r2,r2,r3
    b05c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b060:	e0bff817 	ldw	r2,-32(fp)
    b064:	1005003a 	cmpeq	r2,r2,zero
    b068:	10001f1e 	bne	r2,zero,b0e8 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    b06c:	e0fffd17 	ldw	r3,-12(fp)
    b070:	e0bff817 	ldw	r2,-32(fp)
    b074:	1880022e 	bgeu	r3,r2,b080 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    b078:	e0bffd17 	ldw	r2,-12(fp)
    b07c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    b080:	e0bffb17 	ldw	r2,-20(fp)
    b084:	10c00e04 	addi	r3,r2,56
    b088:	e0bff617 	ldw	r2,-40(fp)
    b08c:	1887883a 	add	r3,r3,r2
    b090:	e0bffa17 	ldw	r2,-24(fp)
    b094:	1009883a 	mov	r4,r2
    b098:	180b883a 	mov	r5,r3
    b09c:	e1bff817 	ldw	r6,-32(fp)
    b0a0:	000569c0 	call	569c <memcpy>
      ptr   += n;
    b0a4:	e0fff817 	ldw	r3,-32(fp)
    b0a8:	e0bffa17 	ldw	r2,-24(fp)
    b0ac:	10c5883a 	add	r2,r2,r3
    b0b0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    b0b4:	e0fffd17 	ldw	r3,-12(fp)
    b0b8:	e0bff817 	ldw	r2,-32(fp)
    b0bc:	1885c83a 	sub	r2,r3,r2
    b0c0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b0c4:	e0fff617 	ldw	r3,-40(fp)
    b0c8:	e0bff817 	ldw	r2,-32(fp)
    b0cc:	1885883a 	add	r2,r3,r2
    b0d0:	10c1ffcc 	andi	r3,r2,2047
    b0d4:	e0bffb17 	ldw	r2,-20(fp)
    b0d8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    b0dc:	e0bffd17 	ldw	r2,-12(fp)
    b0e0:	10800048 	cmpgei	r2,r2,1
    b0e4:	103fcc1e 	bne	r2,zero,b018 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    b0e8:	e0fffa17 	ldw	r3,-24(fp)
    b0ec:	e0bffc17 	ldw	r2,-16(fp)
    b0f0:	1880141e 	bne	r3,r2,b144 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    b0f4:	e0bffe17 	ldw	r2,-8(fp)
    b0f8:	1090000c 	andi	r2,r2,16384
    b0fc:	1004c03a 	cmpne	r2,r2,zero
    b100:	1000101e 	bne	r2,zero,b144 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    b104:	e0bffb17 	ldw	r2,-20(fp)
    b108:	10c00a17 	ldw	r3,40(r2)
    b10c:	e0bff717 	ldw	r2,-36(fp)
    b110:	1880051e 	bne	r3,r2,b128 <altera_avalon_jtag_uart_read+0x13c>
    b114:	e0bffb17 	ldw	r2,-20(fp)
    b118:	10c00917 	ldw	r3,36(r2)
    b11c:	e0bffb17 	ldw	r2,-20(fp)
    b120:	10800117 	ldw	r2,4(r2)
    b124:	18bff736 	bltu	r3,r2,b104 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    b128:	e0bffb17 	ldw	r2,-20(fp)
    b12c:	10c00a17 	ldw	r3,40(r2)
    b130:	e0bff717 	ldw	r2,-36(fp)
    b134:	18800326 	beq	r3,r2,b144 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    b138:	e0bffd17 	ldw	r2,-12(fp)
    b13c:	10800048 	cmpgei	r2,r2,1
    b140:	103fb51e 	bne	r2,zero,b018 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    b144:	e0fffa17 	ldw	r3,-24(fp)
    b148:	e0bffc17 	ldw	r2,-16(fp)
    b14c:	18801926 	beq	r3,r2,b1b4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b150:	0005303a 	rdctl	r2,status
    b154:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b158:	e0fff517 	ldw	r3,-44(fp)
    b15c:	00bfff84 	movi	r2,-2
    b160:	1884703a 	and	r2,r3,r2
    b164:	1001703a 	wrctl	status,r2
  
  return context;
    b168:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    b16c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    b170:	e0bffb17 	ldw	r2,-20(fp)
    b174:	10800817 	ldw	r2,32(r2)
    b178:	10c00054 	ori	r3,r2,1
    b17c:	e0bffb17 	ldw	r2,-20(fp)
    b180:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b184:	e0bffb17 	ldw	r2,-20(fp)
    b188:	10800017 	ldw	r2,0(r2)
    b18c:	11000104 	addi	r4,r2,4
    b190:	e0bffb17 	ldw	r2,-20(fp)
    b194:	10800817 	ldw	r2,32(r2)
    b198:	1007883a 	mov	r3,r2
    b19c:	2005883a 	mov	r2,r4
    b1a0:	10c00035 	stwio	r3,0(r2)
    b1a4:	e0bff917 	ldw	r2,-28(fp)
    b1a8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b1ac:	e0bff417 	ldw	r2,-48(fp)
    b1b0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    b1b4:	e0fffa17 	ldw	r3,-24(fp)
    b1b8:	e0bffc17 	ldw	r2,-16(fp)
    b1bc:	18800526 	beq	r3,r2,b1d4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    b1c0:	e0fffa17 	ldw	r3,-24(fp)
    b1c4:	e0bffc17 	ldw	r2,-16(fp)
    b1c8:	1887c83a 	sub	r3,r3,r2
    b1cc:	e0ffff15 	stw	r3,-4(fp)
    b1d0:	00000906 	br	b1f8 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    b1d4:	e0bffe17 	ldw	r2,-8(fp)
    b1d8:	1090000c 	andi	r2,r2,16384
    b1dc:	1005003a 	cmpeq	r2,r2,zero
    b1e0:	1000031e 	bne	r2,zero,b1f0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    b1e4:	00bffd44 	movi	r2,-11
    b1e8:	e0bfff15 	stw	r2,-4(fp)
    b1ec:	00000206 	br	b1f8 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    b1f0:	00bffec4 	movi	r2,-5
    b1f4:	e0bfff15 	stw	r2,-4(fp)
    b1f8:	e0bfff17 	ldw	r2,-4(fp)
}
    b1fc:	e037883a 	mov	sp,fp
    b200:	dfc00117 	ldw	ra,4(sp)
    b204:	df000017 	ldw	fp,0(sp)
    b208:	dec00204 	addi	sp,sp,8
    b20c:	f800283a 	ret

0000b210 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    b210:	defff204 	addi	sp,sp,-56
    b214:	dfc00d15 	stw	ra,52(sp)
    b218:	df000c15 	stw	fp,48(sp)
    b21c:	df000c04 	addi	fp,sp,48
    b220:	e13ffb15 	stw	r4,-20(fp)
    b224:	e17ffc15 	stw	r5,-16(fp)
    b228:	e1bffd15 	stw	r6,-12(fp)
    b22c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    b230:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    b234:	e0bffc17 	ldw	r2,-16(fp)
    b238:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b23c:	00003a06 	br	b328 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    b240:	e0bffb17 	ldw	r2,-20(fp)
    b244:	10800c17 	ldw	r2,48(r2)
    b248:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    b24c:	e0bffb17 	ldw	r2,-20(fp)
    b250:	10800d17 	ldw	r2,52(r2)
    b254:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    b258:	e0fffa17 	ldw	r3,-24(fp)
    b25c:	e0bff917 	ldw	r2,-28(fp)
    b260:	1880062e 	bgeu	r3,r2,b27c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    b264:	e0fff917 	ldw	r3,-28(fp)
    b268:	e0bffa17 	ldw	r2,-24(fp)
    b26c:	1885c83a 	sub	r2,r3,r2
    b270:	10bfffc4 	addi	r2,r2,-1
    b274:	e0bff815 	stw	r2,-32(fp)
    b278:	00000c06 	br	b2ac <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    b27c:	e0bff917 	ldw	r2,-28(fp)
    b280:	1005003a 	cmpeq	r2,r2,zero
    b284:	1000051e 	bne	r2,zero,b29c <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    b288:	00820004 	movi	r2,2048
    b28c:	e0fffa17 	ldw	r3,-24(fp)
    b290:	10c5c83a 	sub	r2,r2,r3
    b294:	e0bff815 	stw	r2,-32(fp)
    b298:	00000406 	br	b2ac <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    b29c:	0081ffc4 	movi	r2,2047
    b2a0:	e0fffa17 	ldw	r3,-24(fp)
    b2a4:	10c5c83a 	sub	r2,r2,r3
    b2a8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    b2ac:	e0bff817 	ldw	r2,-32(fp)
    b2b0:	1005003a 	cmpeq	r2,r2,zero
    b2b4:	10001f1e 	bne	r2,zero,b334 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    b2b8:	e0fffd17 	ldw	r3,-12(fp)
    b2bc:	e0bff817 	ldw	r2,-32(fp)
    b2c0:	1880022e 	bgeu	r3,r2,b2cc <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    b2c4:	e0bffd17 	ldw	r2,-12(fp)
    b2c8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    b2cc:	e0bffb17 	ldw	r2,-20(fp)
    b2d0:	10c20e04 	addi	r3,r2,2104
    b2d4:	e0bffa17 	ldw	r2,-24(fp)
    b2d8:	1885883a 	add	r2,r3,r2
    b2dc:	e0fffc17 	ldw	r3,-16(fp)
    b2e0:	1009883a 	mov	r4,r2
    b2e4:	180b883a 	mov	r5,r3
    b2e8:	e1bff817 	ldw	r6,-32(fp)
    b2ec:	000569c0 	call	569c <memcpy>
      ptr   += n;
    b2f0:	e0fff817 	ldw	r3,-32(fp)
    b2f4:	e0bffc17 	ldw	r2,-16(fp)
    b2f8:	10c5883a 	add	r2,r2,r3
    b2fc:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    b300:	e0fffd17 	ldw	r3,-12(fp)
    b304:	e0bff817 	ldw	r2,-32(fp)
    b308:	1885c83a 	sub	r2,r3,r2
    b30c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    b310:	e0fffa17 	ldw	r3,-24(fp)
    b314:	e0bff817 	ldw	r2,-32(fp)
    b318:	1885883a 	add	r2,r3,r2
    b31c:	10c1ffcc 	andi	r3,r2,2047
    b320:	e0bffb17 	ldw	r2,-20(fp)
    b324:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    b328:	e0bffd17 	ldw	r2,-12(fp)
    b32c:	10800048 	cmpgei	r2,r2,1
    b330:	103fc31e 	bne	r2,zero,b240 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b334:	0005303a 	rdctl	r2,status
    b338:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b33c:	e0fff517 	ldw	r3,-44(fp)
    b340:	00bfff84 	movi	r2,-2
    b344:	1884703a 	and	r2,r3,r2
    b348:	1001703a 	wrctl	status,r2
  
  return context;
    b34c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    b350:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    b354:	e0bffb17 	ldw	r2,-20(fp)
    b358:	10800817 	ldw	r2,32(r2)
    b35c:	10c00094 	ori	r3,r2,2
    b360:	e0bffb17 	ldw	r2,-20(fp)
    b364:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    b368:	e0bffb17 	ldw	r2,-20(fp)
    b36c:	10800017 	ldw	r2,0(r2)
    b370:	11000104 	addi	r4,r2,4
    b374:	e0bffb17 	ldw	r2,-20(fp)
    b378:	10800817 	ldw	r2,32(r2)
    b37c:	1007883a 	mov	r3,r2
    b380:	2005883a 	mov	r2,r4
    b384:	10c00035 	stwio	r3,0(r2)
    b388:	e0bff717 	ldw	r2,-36(fp)
    b38c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b390:	e0bff417 	ldw	r2,-48(fp)
    b394:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    b398:	e0bffd17 	ldw	r2,-12(fp)
    b39c:	10800050 	cmplti	r2,r2,1
    b3a0:	1000111e 	bne	r2,zero,b3e8 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    b3a4:	e0bffe17 	ldw	r2,-8(fp)
    b3a8:	1090000c 	andi	r2,r2,16384
    b3ac:	1004c03a 	cmpne	r2,r2,zero
    b3b0:	1000101e 	bne	r2,zero,b3f4 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    b3b4:	e0bffb17 	ldw	r2,-20(fp)
    b3b8:	10c00d17 	ldw	r3,52(r2)
    b3bc:	e0bff917 	ldw	r2,-28(fp)
    b3c0:	1880051e 	bne	r3,r2,b3d8 <altera_avalon_jtag_uart_write+0x1c8>
    b3c4:	e0bffb17 	ldw	r2,-20(fp)
    b3c8:	10c00917 	ldw	r3,36(r2)
    b3cc:	e0bffb17 	ldw	r2,-20(fp)
    b3d0:	10800117 	ldw	r2,4(r2)
    b3d4:	18bff736 	bltu	r3,r2,b3b4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    b3d8:	e0bffb17 	ldw	r2,-20(fp)
    b3dc:	10c00d17 	ldw	r3,52(r2)
    b3e0:	e0bff917 	ldw	r2,-28(fp)
    b3e4:	18800326 	beq	r3,r2,b3f4 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
    b3e8:	e0bffd17 	ldw	r2,-12(fp)
    b3ec:	10800048 	cmpgei	r2,r2,1
    b3f0:	103fcd1e 	bne	r2,zero,b328 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    b3f4:	e0fffc17 	ldw	r3,-16(fp)
    b3f8:	e0bff617 	ldw	r2,-40(fp)
    b3fc:	18800526 	beq	r3,r2,b414 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    b400:	e0fffc17 	ldw	r3,-16(fp)
    b404:	e0bff617 	ldw	r2,-40(fp)
    b408:	1887c83a 	sub	r3,r3,r2
    b40c:	e0ffff15 	stw	r3,-4(fp)
    b410:	00000906 	br	b438 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    b414:	e0bffe17 	ldw	r2,-8(fp)
    b418:	1090000c 	andi	r2,r2,16384
    b41c:	1005003a 	cmpeq	r2,r2,zero
    b420:	1000031e 	bne	r2,zero,b430 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    b424:	00bffd44 	movi	r2,-11
    b428:	e0bfff15 	stw	r2,-4(fp)
    b42c:	00000206 	br	b438 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    b430:	00bffec4 	movi	r2,-5
    b434:	e0bfff15 	stw	r2,-4(fp)
    b438:	e0bfff17 	ldw	r2,-4(fp)
}
    b43c:	e037883a 	mov	sp,fp
    b440:	dfc00117 	ldw	ra,4(sp)
    b444:	df000017 	ldw	fp,0(sp)
    b448:	dec00204 	addi	sp,sp,8
    b44c:	f800283a 	ret

0000b450 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    b450:	defffa04 	addi	sp,sp,-24
    b454:	dfc00515 	stw	ra,20(sp)
    b458:	df000415 	stw	fp,16(sp)
    b45c:	df000404 	addi	fp,sp,16
    b460:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    b464:	e0bfff17 	ldw	r2,-4(fp)
    b468:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    b46c:	e0bfff17 	ldw	r2,-4(fp)
    b470:	10800104 	addi	r2,r2,4
    b474:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b478:	0005303a 	rdctl	r2,status
    b47c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b480:	e0fffd17 	ldw	r3,-12(fp)
    b484:	00bfff84 	movi	r2,-2
    b488:	1884703a 	and	r2,r3,r2
    b48c:	1001703a 	wrctl	status,r2
  
  return context;
    b490:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    b494:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    b498:	000cb5c0 	call	cb5c <alt_tick>
    b49c:	e0bffe17 	ldw	r2,-8(fp)
    b4a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    b4a4:	e0bffc17 	ldw	r2,-16(fp)
    b4a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    b4ac:	e037883a 	mov	sp,fp
    b4b0:	dfc00117 	ldw	ra,4(sp)
    b4b4:	df000017 	ldw	fp,0(sp)
    b4b8:	dec00204 	addi	sp,sp,8
    b4bc:	f800283a 	ret

0000b4c0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    b4c0:	defff804 	addi	sp,sp,-32
    b4c4:	dfc00715 	stw	ra,28(sp)
    b4c8:	df000615 	stw	fp,24(sp)
    b4cc:	df000604 	addi	fp,sp,24
    b4d0:	e13ffc15 	stw	r4,-16(fp)
    b4d4:	e17ffd15 	stw	r5,-12(fp)
    b4d8:	e1bffe15 	stw	r6,-8(fp)
    b4dc:	e1ffff15 	stw	r7,-4(fp)
    b4e0:	e0bfff17 	ldw	r2,-4(fp)
    b4e4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    b4e8:	00800074 	movhi	r2,1
    b4ec:	10833804 	addi	r2,r2,3296
    b4f0:	10800017 	ldw	r2,0(r2)
    b4f4:	1004c03a 	cmpne	r2,r2,zero
    b4f8:	1000041e 	bne	r2,zero,b50c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    b4fc:	00c00074 	movhi	r3,1
    b500:	18c33804 	addi	r3,r3,3296
    b504:	e0bffb17 	ldw	r2,-20(fp)
    b508:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    b50c:	e0bffc17 	ldw	r2,-16(fp)
    b510:	10800104 	addi	r2,r2,4
    b514:	1007883a 	mov	r3,r2
    b518:	008001c4 	movi	r2,7
    b51c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    b520:	d8000015 	stw	zero,0(sp)
    b524:	e13ffd17 	ldw	r4,-12(fp)
    b528:	e17ffe17 	ldw	r5,-8(fp)
    b52c:	01800074 	movhi	r6,1
    b530:	31ad1404 	addi	r6,r6,-19376
    b534:	e1fffc17 	ldw	r7,-16(fp)
    b538:	000c3c40 	call	c3c4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    b53c:	e037883a 	mov	sp,fp
    b540:	dfc00117 	ldw	ra,4(sp)
    b544:	df000017 	ldw	fp,0(sp)
    b548:	dec00204 	addi	sp,sp,8
    b54c:	f800283a 	ret

0000b550 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    b550:	defffa04 	addi	sp,sp,-24
    b554:	dfc00515 	stw	ra,20(sp)
    b558:	df000415 	stw	fp,16(sp)
    b55c:	df000404 	addi	fp,sp,16
    b560:	e13ffd15 	stw	r4,-12(fp)
    b564:	e17ffe15 	stw	r5,-8(fp)
    b568:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b56c:	e0bffd17 	ldw	r2,-12(fp)
    b570:	10800017 	ldw	r2,0(r2)
    b574:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    b578:	e0bffc17 	ldw	r2,-16(fp)
    b57c:	11000a04 	addi	r4,r2,40
    b580:	e0bffd17 	ldw	r2,-12(fp)
    b584:	11c00217 	ldw	r7,8(r2)
    b588:	e17ffe17 	ldw	r5,-8(fp)
    b58c:	e1bfff17 	ldw	r6,-4(fp)
    b590:	000ba480 	call	ba48 <altera_avalon_uart_read>
      fd->fd_flags);
}
    b594:	e037883a 	mov	sp,fp
    b598:	dfc00117 	ldw	ra,4(sp)
    b59c:	df000017 	ldw	fp,0(sp)
    b5a0:	dec00204 	addi	sp,sp,8
    b5a4:	f800283a 	ret

0000b5a8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    b5a8:	defffa04 	addi	sp,sp,-24
    b5ac:	dfc00515 	stw	ra,20(sp)
    b5b0:	df000415 	stw	fp,16(sp)
    b5b4:	df000404 	addi	fp,sp,16
    b5b8:	e13ffd15 	stw	r4,-12(fp)
    b5bc:	e17ffe15 	stw	r5,-8(fp)
    b5c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b5c4:	e0bffd17 	ldw	r2,-12(fp)
    b5c8:	10800017 	ldw	r2,0(r2)
    b5cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    b5d0:	e0bffc17 	ldw	r2,-16(fp)
    b5d4:	11000a04 	addi	r4,r2,40
    b5d8:	e0bffd17 	ldw	r2,-12(fp)
    b5dc:	11c00217 	ldw	r7,8(r2)
    b5e0:	e17ffe17 	ldw	r5,-8(fp)
    b5e4:	e1bfff17 	ldw	r6,-4(fp)
    b5e8:	000bcd80 	call	bcd8 <altera_avalon_uart_write>
      fd->fd_flags);
}
    b5ec:	e037883a 	mov	sp,fp
    b5f0:	dfc00117 	ldw	ra,4(sp)
    b5f4:	df000017 	ldw	fp,0(sp)
    b5f8:	dec00204 	addi	sp,sp,8
    b5fc:	f800283a 	ret

0000b600 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    b600:	defffc04 	addi	sp,sp,-16
    b604:	dfc00315 	stw	ra,12(sp)
    b608:	df000215 	stw	fp,8(sp)
    b60c:	df000204 	addi	fp,sp,8
    b610:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    b614:	e0bfff17 	ldw	r2,-4(fp)
    b618:	10800017 	ldw	r2,0(r2)
    b61c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    b620:	e0bffe17 	ldw	r2,-8(fp)
    b624:	11000a04 	addi	r4,r2,40
    b628:	e0bfff17 	ldw	r2,-4(fp)
    b62c:	11400217 	ldw	r5,8(r2)
    b630:	000b9e80 	call	b9e8 <altera_avalon_uart_close>
}
    b634:	e037883a 	mov	sp,fp
    b638:	dfc00117 	ldw	ra,4(sp)
    b63c:	df000017 	ldw	fp,0(sp)
    b640:	dec00204 	addi	sp,sp,8
    b644:	f800283a 	ret

0000b648 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    b648:	defff704 	addi	sp,sp,-36
    b64c:	dfc00815 	stw	ra,32(sp)
    b650:	df000715 	stw	fp,28(sp)
    b654:	df000704 	addi	fp,sp,28
    b658:	e13ffc15 	stw	r4,-16(fp)
    b65c:	e17ffd15 	stw	r5,-12(fp)
    b660:	e1bffe15 	stw	r6,-8(fp)
  void* base = sp->base;
    b664:	e0bffc17 	ldw	r2,-16(fp)
    b668:	10800017 	ldw	r2,0(r2)
    b66c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    b670:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    b674:	1004c03a 	cmpne	r2,r2,zero
    b678:	1000061e 	bne	r2,zero,b694 <altera_avalon_uart_init+0x4c>
    b67c:	0005883a 	mov	r2,zero
    b680:	1004c03a 	cmpne	r2,r2,zero
    b684:	1000031e 	bne	r2,zero,b694 <altera_avalon_uart_init+0x4c>
    b688:	0005883a 	mov	r2,zero
    b68c:	1005003a 	cmpeq	r2,r2,zero
    b690:	1000031e 	bne	r2,zero,b6a0 <altera_avalon_uart_init+0x58>
    b694:	00800044 	movi	r2,1
    b698:	e0bfff15 	stw	r2,-4(fp)
    b69c:	00000106 	br	b6a4 <altera_avalon_uart_init+0x5c>
    b6a0:	e03fff15 	stw	zero,-4(fp)
    b6a4:	e0bfff17 	ldw	r2,-4(fp)
    b6a8:	e0bffa15 	stw	r2,-24(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    b6ac:	e0bffa17 	ldw	r2,-24(fp)
    b6b0:	1004c03a 	cmpne	r2,r2,zero
    b6b4:	1000111e 	bne	r2,zero,b6fc <altera_avalon_uart_init+0xb4>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    b6b8:	e0fffc17 	ldw	r3,-16(fp)
    b6bc:	00832004 	movi	r2,3200
    b6c0:	18800115 	stw	r2,4(r3)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    b6c4:	e0bffb17 	ldw	r2,-20(fp)
    b6c8:	11000304 	addi	r4,r2,12
    b6cc:	e0bffc17 	ldw	r2,-16(fp)
    b6d0:	10800117 	ldw	r2,4(r2)
    b6d4:	1007883a 	mov	r3,r2
    b6d8:	2005883a 	mov	r2,r4
    b6dc:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    b6e0:	d8000015 	stw	zero,0(sp)
    b6e4:	e13ffd17 	ldw	r4,-12(fp)
    b6e8:	e17ffe17 	ldw	r5,-8(fp)
    b6ec:	01800074 	movhi	r6,1
    b6f0:	31adc404 	addi	r6,r6,-18672
    b6f4:	e1fffc17 	ldw	r7,-16(fp)
    b6f8:	000c3c40 	call	c3c4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    b6fc:	e037883a 	mov	sp,fp
    b700:	dfc00117 	ldw	ra,4(sp)
    b704:	df000017 	ldw	fp,0(sp)
    b708:	dec00204 	addi	sp,sp,8
    b70c:	f800283a 	ret

0000b710 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    b710:	defffa04 	addi	sp,sp,-24
    b714:	dfc00515 	stw	ra,20(sp)
    b718:	df000415 	stw	fp,16(sp)
    b71c:	df000404 	addi	fp,sp,16
    b720:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    b724:	e0bfff17 	ldw	r2,-4(fp)
    b728:	e0bffd15 	stw	r2,-12(fp)
  void* base               = sp->base;
    b72c:	e0bffd17 	ldw	r2,-12(fp)
    b730:	10800017 	ldw	r2,0(r2)
    b734:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    b738:	e0bffc17 	ldw	r2,-16(fp)
    b73c:	10800204 	addi	r2,r2,8
    b740:	10800037 	ldwio	r2,0(r2)
    b744:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    b748:	e0bffc17 	ldw	r2,-16(fp)
    b74c:	10800204 	addi	r2,r2,8
    b750:	10000035 	stwio	zero,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    b754:	e0bffc17 	ldw	r2,-16(fp)
    b758:	10800204 	addi	r2,r2,8
    b75c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    b760:	e0bffe17 	ldw	r2,-8(fp)
    b764:	1080200c 	andi	r2,r2,128
    b768:	1005003a 	cmpeq	r2,r2,zero
    b76c:	1000031e 	bne	r2,zero,b77c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    b770:	e13ffd17 	ldw	r4,-12(fp)
    b774:	e17ffe17 	ldw	r5,-8(fp)
    b778:	000b7ac0 	call	b7ac <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    b77c:	e0bffe17 	ldw	r2,-8(fp)
    b780:	1081100c 	andi	r2,r2,1088
    b784:	1005003a 	cmpeq	r2,r2,zero
    b788:	1000031e 	bne	r2,zero,b798 <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    b78c:	e13ffd17 	ldw	r4,-12(fp)
    b790:	e17ffe17 	ldw	r5,-8(fp)
    b794:	000b88c0 	call	b88c <altera_avalon_uart_txirq>
  }
  

}
    b798:	e037883a 	mov	sp,fp
    b79c:	dfc00117 	ldw	ra,4(sp)
    b7a0:	df000017 	ldw	fp,0(sp)
    b7a4:	dec00204 	addi	sp,sp,8
    b7a8:	f800283a 	ret

0000b7ac <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    b7ac:	defffc04 	addi	sp,sp,-16
    b7b0:	df000315 	stw	fp,12(sp)
    b7b4:	df000304 	addi	fp,sp,12
    b7b8:	e13ffe15 	stw	r4,-8(fp)
    b7bc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    b7c0:	e0bfff17 	ldw	r2,-4(fp)
    b7c4:	108000cc 	andi	r2,r2,3
    b7c8:	1004c03a 	cmpne	r2,r2,zero
    b7cc:	10002b1e 	bne	r2,zero,b87c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    b7d0:	e0bffe17 	ldw	r2,-8(fp)
    b7d4:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b7d8:	e0bffe17 	ldw	r2,-8(fp)
    b7dc:	10800317 	ldw	r2,12(r2)
    b7e0:	10800044 	addi	r2,r2,1
    b7e4:	10800fcc 	andi	r2,r2,63
    b7e8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    b7ec:	e0bffe17 	ldw	r2,-8(fp)
    b7f0:	11000317 	ldw	r4,12(r2)
    b7f4:	e0bffe17 	ldw	r2,-8(fp)
    b7f8:	10800017 	ldw	r2,0(r2)
    b7fc:	10800037 	ldwio	r2,0(r2)
    b800:	1007883a 	mov	r3,r2
    b804:	e0bffe17 	ldw	r2,-8(fp)
    b808:	2085883a 	add	r2,r4,r2
    b80c:	10800704 	addi	r2,r2,28
    b810:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    b814:	e0fffe17 	ldw	r3,-8(fp)
    b818:	e0bffd17 	ldw	r2,-12(fp)
    b81c:	18800315 	stw	r2,12(r3)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    b820:	e0bffe17 	ldw	r2,-8(fp)
    b824:	10800317 	ldw	r2,12(r2)
    b828:	10800044 	addi	r2,r2,1
    b82c:	10800fcc 	andi	r2,r2,63
    b830:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    b834:	e0bffe17 	ldw	r2,-8(fp)
    b838:	10c00217 	ldw	r3,8(r2)
    b83c:	e0bffd17 	ldw	r2,-12(fp)
    b840:	18800e1e 	bne	r3,r2,b87c <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    b844:	e0bffe17 	ldw	r2,-8(fp)
    b848:	10c00117 	ldw	r3,4(r2)
    b84c:	00bfdfc4 	movi	r2,-129
    b850:	1886703a 	and	r3,r3,r2
    b854:	e0bffe17 	ldw	r2,-8(fp)
    b858:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    b85c:	e0bffe17 	ldw	r2,-8(fp)
    b860:	10800017 	ldw	r2,0(r2)
    b864:	11000304 	addi	r4,r2,12
    b868:	e0bffe17 	ldw	r2,-8(fp)
    b86c:	10800117 	ldw	r2,4(r2)
    b870:	1007883a 	mov	r3,r2
    b874:	2005883a 	mov	r2,r4
    b878:	10c00035 	stwio	r3,0(r2)
  }   
}
    b87c:	e037883a 	mov	sp,fp
    b880:	df000017 	ldw	fp,0(sp)
    b884:	dec00104 	addi	sp,sp,4
    b888:	f800283a 	ret

0000b88c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    b88c:	defffd04 	addi	sp,sp,-12
    b890:	df000215 	stw	fp,8(sp)
    b894:	df000204 	addi	fp,sp,8
    b898:	e13ffe15 	stw	r4,-8(fp)
    b89c:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    b8a0:	e0bffe17 	ldw	r2,-8(fp)
    b8a4:	10c00417 	ldw	r3,16(r2)
    b8a8:	e0bffe17 	ldw	r2,-8(fp)
    b8ac:	10800517 	ldw	r2,20(r2)
    b8b0:	18803626 	beq	r3,r2,b98c <altera_avalon_uart_txirq+0x100>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    b8b4:	e0bffe17 	ldw	r2,-8(fp)
    b8b8:	10800617 	ldw	r2,24(r2)
    b8bc:	1080008c 	andi	r2,r2,2
    b8c0:	1005003a 	cmpeq	r2,r2,zero
    b8c4:	1000041e 	bne	r2,zero,b8d8 <altera_avalon_uart_txirq+0x4c>
    b8c8:	e0bfff17 	ldw	r2,-4(fp)
    b8cc:	1082000c 	andi	r2,r2,2048
    b8d0:	1005003a 	cmpeq	r2,r2,zero
    b8d4:	10001e1e 	bne	r2,zero,b950 <altera_avalon_uart_txirq+0xc4>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    b8d8:	e0bffe17 	ldw	r2,-8(fp)
    b8dc:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    b8e0:	e0bffe17 	ldw	r2,-8(fp)
    b8e4:	10800017 	ldw	r2,0(r2)
    b8e8:	11000104 	addi	r4,r2,4
    b8ec:	e0bffe17 	ldw	r2,-8(fp)
    b8f0:	10c00417 	ldw	r3,16(r2)
    b8f4:	e0bffe17 	ldw	r2,-8(fp)
    b8f8:	1885883a 	add	r2,r3,r2
    b8fc:	10801704 	addi	r2,r2,92
    b900:	10800003 	ldbu	r2,0(r2)
    b904:	10c03fcc 	andi	r3,r2,255
    b908:	2005883a 	mov	r2,r4
    b90c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    b910:	e0bffe17 	ldw	r2,-8(fp)
    b914:	10800417 	ldw	r2,16(r2)
    b918:	10c00044 	addi	r3,r2,1
    b91c:	e0bffe17 	ldw	r2,-8(fp)
    b920:	10c00415 	stw	r3,16(r2)
    b924:	e0bffe17 	ldw	r2,-8(fp)
    b928:	10800417 	ldw	r2,16(r2)
    b92c:	10c00fcc 	andi	r3,r2,63
    b930:	e0bffe17 	ldw	r2,-8(fp)
    b934:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    b938:	e0bffe17 	ldw	r2,-8(fp)
    b93c:	10800117 	ldw	r2,4(r2)
    b940:	10c01014 	ori	r3,r2,64
    b944:	e0bffe17 	ldw	r2,-8(fp)
    b948:	10c00115 	stw	r3,4(r2)
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    b94c:	00000f06 	br	b98c <altera_avalon_uart_txirq+0x100>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    b950:	e0bffe17 	ldw	r2,-8(fp)
    b954:	10800017 	ldw	r2,0(r2)
    b958:	10800204 	addi	r2,r2,8
    b95c:	10800037 	ldwio	r2,0(r2)
    b960:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    b964:	e0bfff17 	ldw	r2,-4(fp)
    b968:	1082000c 	andi	r2,r2,2048
    b96c:	1004c03a 	cmpne	r2,r2,zero
    b970:	1000061e 	bne	r2,zero,b98c <altera_avalon_uart_txirq+0x100>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    b974:	e0bffe17 	ldw	r2,-8(fp)
    b978:	10c00117 	ldw	r3,4(r2)
    b97c:	00bfefc4 	movi	r2,-65
    b980:	1886703a 	and	r3,r3,r2
    b984:	e0bffe17 	ldw	r2,-8(fp)
    b988:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    b98c:	e0bffe17 	ldw	r2,-8(fp)
    b990:	10c00417 	ldw	r3,16(r2)
    b994:	e0bffe17 	ldw	r2,-8(fp)
    b998:	10800517 	ldw	r2,20(r2)
    b99c:	1880061e 	bne	r3,r2,b9b8 <altera_avalon_uart_txirq+0x12c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    b9a0:	e0bffe17 	ldw	r2,-8(fp)
    b9a4:	10c00117 	ldw	r3,4(r2)
    b9a8:	00beefc4 	movi	r2,-1089
    b9ac:	1886703a 	and	r3,r3,r2
    b9b0:	e0bffe17 	ldw	r2,-8(fp)
    b9b4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    b9b8:	e0bffe17 	ldw	r2,-8(fp)
    b9bc:	10800017 	ldw	r2,0(r2)
    b9c0:	11000304 	addi	r4,r2,12
    b9c4:	e0bffe17 	ldw	r2,-8(fp)
    b9c8:	10800117 	ldw	r2,4(r2)
    b9cc:	1007883a 	mov	r3,r2
    b9d0:	2005883a 	mov	r2,r4
    b9d4:	10c00035 	stwio	r3,0(r2)
}
    b9d8:	e037883a 	mov	sp,fp
    b9dc:	df000017 	ldw	fp,0(sp)
    b9e0:	dec00104 	addi	sp,sp,4
    b9e4:	f800283a 	ret

0000b9e8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    b9e8:	defffc04 	addi	sp,sp,-16
    b9ec:	df000315 	stw	fp,12(sp)
    b9f0:	df000304 	addi	fp,sp,12
    b9f4:	e13ffd15 	stw	r4,-12(fp)
    b9f8:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    b9fc:	00000706 	br	ba1c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    ba00:	e0bffe17 	ldw	r2,-8(fp)
    ba04:	1090000c 	andi	r2,r2,16384
    ba08:	1005003a 	cmpeq	r2,r2,zero
    ba0c:	1000031e 	bne	r2,zero,ba1c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
    ba10:	00bffd44 	movi	r2,-11
    ba14:	e0bfff15 	stw	r2,-4(fp)
    ba18:	00000606 	br	ba34 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    ba1c:	e0bffd17 	ldw	r2,-12(fp)
    ba20:	10c00417 	ldw	r3,16(r2)
    ba24:	e0bffd17 	ldw	r2,-12(fp)
    ba28:	10800517 	ldw	r2,20(r2)
    ba2c:	18bff41e 	bne	r3,r2,ba00 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    ba30:	e03fff15 	stw	zero,-4(fp)
    ba34:	e0bfff17 	ldw	r2,-4(fp)
}
    ba38:	e037883a 	mov	sp,fp
    ba3c:	df000017 	ldw	fp,0(sp)
    ba40:	dec00104 	addi	sp,sp,4
    ba44:	f800283a 	ret

0000ba48 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    ba48:	defff004 	addi	sp,sp,-64
    ba4c:	dfc00f15 	stw	ra,60(sp)
    ba50:	df000e15 	stw	fp,56(sp)
    ba54:	df000e04 	addi	fp,sp,56
    ba58:	e13ffb15 	stw	r4,-20(fp)
    ba5c:	e17ffc15 	stw	r5,-16(fp)
    ba60:	e1bffd15 	stw	r6,-12(fp)
    ba64:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
    ba68:	e03ff705 	stb	zero,-36(fp)
  int             count = 0;
    ba6c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    ba70:	e0bffe17 	ldw	r2,-8(fp)
    ba74:	1090000c 	andi	r2,r2,16384
    ba78:	1005003a 	cmpeq	r2,r2,zero
    ba7c:	e0bff915 	stw	r2,-28(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
    ba80:	e0bffb17 	ldw	r2,-20(fp)
    ba84:	10800217 	ldw	r2,8(r2)
    ba88:	10800044 	addi	r2,r2,1
    ba8c:	10800fcc 	andi	r2,r2,63
    ba90:	e0bff815 	stw	r2,-32(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    ba94:	00001906 	br	bafc <altera_avalon_uart_read+0xb4>
    {
      count++;
    ba98:	e0bff617 	ldw	r2,-40(fp)
    ba9c:	10800044 	addi	r2,r2,1
    baa0:	e0bff615 	stw	r2,-40(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    baa4:	e0bffb17 	ldw	r2,-20(fp)
    baa8:	10c00217 	ldw	r3,8(r2)
    baac:	e0bffb17 	ldw	r2,-20(fp)
    bab0:	1885883a 	add	r2,r3,r2
    bab4:	10800704 	addi	r2,r2,28
    bab8:	10800003 	ldbu	r2,0(r2)
    babc:	1007883a 	mov	r3,r2
    bac0:	e0bffc17 	ldw	r2,-16(fp)
    bac4:	10c00005 	stb	r3,0(r2)
    bac8:	e0bffc17 	ldw	r2,-16(fp)
    bacc:	10800044 	addi	r2,r2,1
    bad0:	e0bffc15 	stw	r2,-16(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
    bad4:	e0bffb17 	ldw	r2,-20(fp)
    bad8:	10800217 	ldw	r2,8(r2)
    badc:	10c00044 	addi	r3,r2,1
    bae0:	e0bffb17 	ldw	r2,-20(fp)
    bae4:	10c00215 	stw	r3,8(r2)
    bae8:	e0bffb17 	ldw	r2,-20(fp)
    baec:	10800217 	ldw	r2,8(r2)
    baf0:	10c00fcc 	andi	r3,r2,63
    baf4:	e0bffb17 	ldw	r2,-20(fp)
    baf8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    bafc:	e0fff617 	ldw	r3,-40(fp)
    bb00:	e0bffd17 	ldw	r2,-12(fp)
    bb04:	1880050e 	bge	r3,r2,bb1c <altera_avalon_uart_read+0xd4>
    bb08:	e0bffb17 	ldw	r2,-20(fp)
    bb0c:	10c00217 	ldw	r3,8(r2)
    bb10:	e0bffb17 	ldw	r2,-20(fp)
    bb14:	10800317 	ldw	r2,12(r2)
    bb18:	18bfdf1e 	bne	r3,r2,ba98 <altera_avalon_uart_read+0x50>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    bb1c:	e0bff617 	ldw	r2,-40(fp)
    bb20:	1004c03a 	cmpne	r2,r2,zero
    bb24:	1000271e 	bne	r2,zero,bbc4 <altera_avalon_uart_read+0x17c>
    bb28:	e0bffb17 	ldw	r2,-20(fp)
    bb2c:	10c00217 	ldw	r3,8(r2)
    bb30:	e0bffb17 	ldw	r2,-20(fp)
    bb34:	10800317 	ldw	r2,12(r2)
    bb38:	1880221e 	bne	r3,r2,bbc4 <altera_avalon_uart_read+0x17c>
    {
      if (!block)
    bb3c:	e0bff917 	ldw	r2,-28(fp)
    bb40:	1004c03a 	cmpne	r2,r2,zero
    bb44:	1000061e 	bne	r2,zero,bb60 <altera_avalon_uart_read+0x118>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    bb48:	000bc780 	call	bc78 <alt_get_errno>
    bb4c:	00c002c4 	movi	r3,11
    bb50:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    bb54:	00800044 	movi	r2,1
    bb58:	e0bff705 	stb	r2,-36(fp)
        break;
    bb5c:	00001f06 	br	bbdc <altera_avalon_uart_read+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bb60:	0005303a 	rdctl	r2,status
    bb64:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bb68:	e0fff517 	ldw	r3,-44(fp)
    bb6c:	00bfff84 	movi	r2,-2
    bb70:	1884703a 	and	r2,r3,r2
    bb74:	1001703a 	wrctl	status,r2
  
  return context;
    bb78:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    bb7c:	e0bffa15 	stw	r2,-24(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    bb80:	e0bffb17 	ldw	r2,-20(fp)
    bb84:	10800117 	ldw	r2,4(r2)
    bb88:	10c02014 	ori	r3,r2,128
    bb8c:	e0bffb17 	ldw	r2,-20(fp)
    bb90:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    bb94:	e0bffb17 	ldw	r2,-20(fp)
    bb98:	10800017 	ldw	r2,0(r2)
    bb9c:	11000304 	addi	r4,r2,12
    bba0:	e0bffb17 	ldw	r2,-20(fp)
    bba4:	10800117 	ldw	r2,4(r2)
    bba8:	1007883a 	mov	r3,r2
    bbac:	2005883a 	mov	r2,r4
    bbb0:	10c00035 	stwio	r3,0(r2)
    bbb4:	e0bffa17 	ldw	r2,-24(fp)
    bbb8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bbbc:	e0bff417 	ldw	r2,-48(fp)
    bbc0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    bbc4:	e0bff617 	ldw	r2,-40(fp)
    bbc8:	1004c03a 	cmpne	r2,r2,zero
    bbcc:	1000031e 	bne	r2,zero,bbdc <altera_avalon_uart_read+0x194>
    bbd0:	e0bffd17 	ldw	r2,-12(fp)
    bbd4:	1004c03a 	cmpne	r2,r2,zero
    bbd8:	103fc81e 	bne	r2,zero,bafc <altera_avalon_uart_read+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bbdc:	0005303a 	rdctl	r2,status
    bbe0:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bbe4:	e0fff317 	ldw	r3,-52(fp)
    bbe8:	00bfff84 	movi	r2,-2
    bbec:	1884703a 	and	r2,r3,r2
    bbf0:	1001703a 	wrctl	status,r2
  
  return context;
    bbf4:	e0bff317 	ldw	r2,-52(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    bbf8:	e0bffa15 	stw	r2,-24(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    bbfc:	e0bffb17 	ldw	r2,-20(fp)
    bc00:	10800117 	ldw	r2,4(r2)
    bc04:	10c02014 	ori	r3,r2,128
    bc08:	e0bffb17 	ldw	r2,-20(fp)
    bc0c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    bc10:	e0bffb17 	ldw	r2,-20(fp)
    bc14:	10800017 	ldw	r2,0(r2)
    bc18:	11000304 	addi	r4,r2,12
    bc1c:	e0bffb17 	ldw	r2,-20(fp)
    bc20:	10800117 	ldw	r2,4(r2)
    bc24:	1007883a 	mov	r3,r2
    bc28:	2005883a 	mov	r2,r4
    bc2c:	10c00035 	stwio	r3,0(r2)
    bc30:	e0bffa17 	ldw	r2,-24(fp)
    bc34:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bc38:	e0bff217 	ldw	r2,-56(fp)
    bc3c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    bc40:	e0bff703 	ldbu	r2,-36(fp)
    bc44:	1005003a 	cmpeq	r2,r2,zero
    bc48:	1000031e 	bne	r2,zero,bc58 <altera_avalon_uart_read+0x210>
    return ~EWOULDBLOCK;
    bc4c:	00bffd04 	movi	r2,-12
    bc50:	e0bfff15 	stw	r2,-4(fp)
    bc54:	00000206 	br	bc60 <altera_avalon_uart_read+0x218>
  }
  else {
    return count;
    bc58:	e0bff617 	ldw	r2,-40(fp)
    bc5c:	e0bfff15 	stw	r2,-4(fp)
    bc60:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    bc64:	e037883a 	mov	sp,fp
    bc68:	dfc00117 	ldw	ra,4(sp)
    bc6c:	df000017 	ldw	fp,0(sp)
    bc70:	dec00204 	addi	sp,sp,8
    bc74:	f800283a 	ret

0000bc78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bc78:	defffd04 	addi	sp,sp,-12
    bc7c:	dfc00215 	stw	ra,8(sp)
    bc80:	df000115 	stw	fp,4(sp)
    bc84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bc88:	00800074 	movhi	r2,1
    bc8c:	10bc6004 	addi	r2,r2,-3712
    bc90:	10800017 	ldw	r2,0(r2)
    bc94:	1005003a 	cmpeq	r2,r2,zero
    bc98:	1000061e 	bne	r2,zero,bcb4 <alt_get_errno+0x3c>
    bc9c:	00800074 	movhi	r2,1
    bca0:	10bc6004 	addi	r2,r2,-3712
    bca4:	10800017 	ldw	r2,0(r2)
    bca8:	103ee83a 	callr	r2
    bcac:	e0bfff15 	stw	r2,-4(fp)
    bcb0:	00000306 	br	bcc0 <alt_get_errno+0x48>
    bcb4:	00800074 	movhi	r2,1
    bcb8:	10833304 	addi	r2,r2,3276
    bcbc:	e0bfff15 	stw	r2,-4(fp)
    bcc0:	e0bfff17 	ldw	r2,-4(fp)
}
    bcc4:	e037883a 	mov	sp,fp
    bcc8:	dfc00117 	ldw	ra,4(sp)
    bccc:	df000017 	ldw	fp,0(sp)
    bcd0:	dec00204 	addi	sp,sp,8
    bcd4:	f800283a 	ret

0000bcd8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    bcd8:	defff204 	addi	sp,sp,-56
    bcdc:	dfc00d15 	stw	ra,52(sp)
    bce0:	df000c15 	stw	fp,48(sp)
    bce4:	df000c04 	addi	fp,sp,48
    bce8:	e13ffc15 	stw	r4,-16(fp)
    bcec:	e17ffd15 	stw	r5,-12(fp)
    bcf0:	e1bffe15 	stw	r6,-8(fp)
    bcf4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    bcf8:	e0bffe17 	ldw	r2,-8(fp)
    bcfc:	e0bff815 	stw	r2,-32(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    bd00:	e0bfff17 	ldw	r2,-4(fp)
    bd04:	1090000c 	andi	r2,r2,16384
    bd08:	e0bffa15 	stw	r2,-24(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    bd0c:	00004006 	br	be10 <altera_avalon_uart_write+0x138>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    bd10:	e0bffc17 	ldw	r2,-16(fp)
    bd14:	10800517 	ldw	r2,20(r2)
    bd18:	10800044 	addi	r2,r2,1
    bd1c:	10800fcc 	andi	r2,r2,63
    bd20:	e0bff915 	stw	r2,-28(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    bd24:	e0bffc17 	ldw	r2,-16(fp)
    bd28:	10c00417 	ldw	r3,16(r2)
    bd2c:	e0bff917 	ldw	r2,-28(fp)
    bd30:	1880251e 	bne	r3,r2,bdc8 <altera_avalon_uart_write+0xf0>
    {
      if (no_block)
    bd34:	e0bffa17 	ldw	r2,-24(fp)
    bd38:	1005003a 	cmpeq	r2,r2,zero
    bd3c:	1000051e 	bne	r2,zero,bd54 <altera_avalon_uart_write+0x7c>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    bd40:	000bea00 	call	bea0 <alt_get_errno>
    bd44:	1007883a 	mov	r3,r2
    bd48:	008002c4 	movi	r2,11
    bd4c:	18800015 	stw	r2,0(r3)
        break;
    bd50:	00003206 	br	be1c <altera_avalon_uart_write+0x144>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bd54:	0005303a 	rdctl	r2,status
    bd58:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bd5c:	e0fff717 	ldw	r3,-36(fp)
    bd60:	00bfff84 	movi	r2,-2
    bd64:	1884703a 	and	r2,r3,r2
    bd68:	1001703a 	wrctl	status,r2
  
  return context;
    bd6c:	e0bff717 	ldw	r2,-36(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    bd70:	e0bffb15 	stw	r2,-20(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    bd74:	e0bffc17 	ldw	r2,-16(fp)
    bd78:	10800117 	ldw	r2,4(r2)
    bd7c:	10c11014 	ori	r3,r2,1088
    bd80:	e0bffc17 	ldw	r2,-16(fp)
    bd84:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    bd88:	e0bffc17 	ldw	r2,-16(fp)
    bd8c:	10800017 	ldw	r2,0(r2)
    bd90:	11000304 	addi	r4,r2,12
    bd94:	e0bffc17 	ldw	r2,-16(fp)
    bd98:	10800117 	ldw	r2,4(r2)
    bd9c:	1007883a 	mov	r3,r2
    bda0:	2005883a 	mov	r2,r4
    bda4:	10c00035 	stwio	r3,0(r2)
    bda8:	e0bffb17 	ldw	r2,-20(fp)
    bdac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bdb0:	e0bff617 	ldw	r2,-40(fp)
    bdb4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    bdb8:	e0bffc17 	ldw	r2,-16(fp)
    bdbc:	10c00417 	ldw	r3,16(r2)
    bdc0:	e0bff917 	ldw	r2,-28(fp)
    bdc4:	18bffc26 	beq	r3,r2,bdb8 <altera_avalon_uart_write+0xe0>
      }
    }

    count--;
    bdc8:	e0bff817 	ldw	r2,-32(fp)
    bdcc:	10bfffc4 	addi	r2,r2,-1
    bdd0:	e0bff815 	stw	r2,-32(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    bdd4:	e0bffc17 	ldw	r2,-16(fp)
    bdd8:	10c00517 	ldw	r3,20(r2)
    bddc:	e0bffd17 	ldw	r2,-12(fp)
    bde0:	10800003 	ldbu	r2,0(r2)
    bde4:	1009883a 	mov	r4,r2
    bde8:	e0bffc17 	ldw	r2,-16(fp)
    bdec:	1885883a 	add	r2,r3,r2
    bdf0:	10801704 	addi	r2,r2,92
    bdf4:	11000005 	stb	r4,0(r2)
    bdf8:	e0bffd17 	ldw	r2,-12(fp)
    bdfc:	10800044 	addi	r2,r2,1
    be00:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    be04:	e0fffc17 	ldw	r3,-16(fp)
    be08:	e0bff917 	ldw	r2,-28(fp)
    be0c:	18800515 	stw	r2,20(r3)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    be10:	e0bff817 	ldw	r2,-32(fp)
    be14:	1004c03a 	cmpne	r2,r2,zero
    be18:	103fbd1e 	bne	r2,zero,bd10 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    be1c:	0005303a 	rdctl	r2,status
    be20:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    be24:	e0fff517 	ldw	r3,-44(fp)
    be28:	00bfff84 	movi	r2,-2
    be2c:	1884703a 	and	r2,r3,r2
    be30:	1001703a 	wrctl	status,r2
  
  return context;
    be34:	e0bff517 	ldw	r2,-44(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    be38:	e0bffb15 	stw	r2,-20(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    be3c:	e0bffc17 	ldw	r2,-16(fp)
    be40:	10800117 	ldw	r2,4(r2)
    be44:	10c11014 	ori	r3,r2,1088
    be48:	e0bffc17 	ldw	r2,-16(fp)
    be4c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    be50:	e0bffc17 	ldw	r2,-16(fp)
    be54:	10800017 	ldw	r2,0(r2)
    be58:	11000304 	addi	r4,r2,12
    be5c:	e0bffc17 	ldw	r2,-16(fp)
    be60:	10800117 	ldw	r2,4(r2)
    be64:	1007883a 	mov	r3,r2
    be68:	2005883a 	mov	r2,r4
    be6c:	10c00035 	stwio	r3,0(r2)
    be70:	e0bffb17 	ldw	r2,-20(fp)
    be74:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    be78:	e0bff417 	ldw	r2,-48(fp)
    be7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    be80:	e0fffe17 	ldw	r3,-8(fp)
    be84:	e0bff817 	ldw	r2,-32(fp)
    be88:	1885c83a 	sub	r2,r3,r2
}
    be8c:	e037883a 	mov	sp,fp
    be90:	dfc00117 	ldw	ra,4(sp)
    be94:	df000017 	ldw	fp,0(sp)
    be98:	dec00204 	addi	sp,sp,8
    be9c:	f800283a 	ret

0000bea0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bea0:	defffd04 	addi	sp,sp,-12
    bea4:	dfc00215 	stw	ra,8(sp)
    bea8:	df000115 	stw	fp,4(sp)
    beac:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    beb0:	00800074 	movhi	r2,1
    beb4:	10bc6004 	addi	r2,r2,-3712
    beb8:	10800017 	ldw	r2,0(r2)
    bebc:	1005003a 	cmpeq	r2,r2,zero
    bec0:	1000061e 	bne	r2,zero,bedc <alt_get_errno+0x3c>
    bec4:	00800074 	movhi	r2,1
    bec8:	10bc6004 	addi	r2,r2,-3712
    becc:	10800017 	ldw	r2,0(r2)
    bed0:	103ee83a 	callr	r2
    bed4:	e0bfff15 	stw	r2,-4(fp)
    bed8:	00000306 	br	bee8 <alt_get_errno+0x48>
    bedc:	00800074 	movhi	r2,1
    bee0:	10833304 	addi	r2,r2,3276
    bee4:	e0bfff15 	stw	r2,-4(fp)
    bee8:	e0bfff17 	ldw	r2,-4(fp)
}
    beec:	e037883a 	mov	sp,fp
    bef0:	dfc00117 	ldw	ra,4(sp)
    bef4:	df000017 	ldw	fp,0(sp)
    bef8:	dec00204 	addi	sp,sp,8
    befc:	f800283a 	ret

0000bf00 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    bf00:	defff404 	addi	sp,sp,-48
    bf04:	df000b15 	stw	fp,44(sp)
    bf08:	df000b04 	addi	fp,sp,44
    bf0c:	e13ffb15 	stw	r4,-20(fp)
    bf10:	e17ffc15 	stw	r5,-16(fp)
    bf14:	e1bffd15 	stw	r6,-12(fp)
    bf18:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    bf1c:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    bf20:	00800074 	movhi	r2,1
    bf24:	10833804 	addi	r2,r2,3296
    bf28:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    bf2c:	1005003a 	cmpeq	r2,r2,zero
    bf30:	1000411e 	bne	r2,zero,c038 <alt_alarm_start+0x138>
  {
    if (alarm)
    bf34:	e0bffb17 	ldw	r2,-20(fp)
    bf38:	1005003a 	cmpeq	r2,r2,zero
    bf3c:	10003b1e 	bne	r2,zero,c02c <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    bf40:	e0fffb17 	ldw	r3,-20(fp)
    bf44:	e0bffd17 	ldw	r2,-12(fp)
    bf48:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    bf4c:	e0fffb17 	ldw	r3,-20(fp)
    bf50:	e0bffe17 	ldw	r2,-8(fp)
    bf54:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    bf58:	0005303a 	rdctl	r2,status
    bf5c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    bf60:	e0fff817 	ldw	r3,-32(fp)
    bf64:	00bfff84 	movi	r2,-2
    bf68:	1884703a 	and	r2,r3,r2
    bf6c:	1001703a 	wrctl	status,r2
  
  return context;
    bf70:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    bf74:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    bf78:	00800074 	movhi	r2,1
    bf7c:	10833904 	addi	r2,r2,3300
    bf80:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    bf84:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    bf88:	e0fffc17 	ldw	r3,-16(fp)
    bf8c:	e0bff917 	ldw	r2,-28(fp)
    bf90:	1885883a 	add	r2,r3,r2
    bf94:	10c00044 	addi	r3,r2,1
    bf98:	e0bffb17 	ldw	r2,-20(fp)
    bf9c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    bfa0:	e0bffb17 	ldw	r2,-20(fp)
    bfa4:	10c00217 	ldw	r3,8(r2)
    bfa8:	e0bff917 	ldw	r2,-28(fp)
    bfac:	1880042e 	bgeu	r3,r2,bfc0 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    bfb0:	e0fffb17 	ldw	r3,-20(fp)
    bfb4:	00800044 	movi	r2,1
    bfb8:	18800405 	stb	r2,16(r3)
    bfbc:	00000206 	br	bfc8 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    bfc0:	e0bffb17 	ldw	r2,-20(fp)
    bfc4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    bfc8:	e0fffb17 	ldw	r3,-20(fp)
    bfcc:	00800074 	movhi	r2,1
    bfd0:	10bc6304 	addi	r2,r2,-3700
    bfd4:	e0bff615 	stw	r2,-40(fp)
    bfd8:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    bfdc:	e0fff717 	ldw	r3,-36(fp)
    bfe0:	e0bff617 	ldw	r2,-40(fp)
    bfe4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    bfe8:	e0bff617 	ldw	r2,-40(fp)
    bfec:	10c00017 	ldw	r3,0(r2)
    bff0:	e0bff717 	ldw	r2,-36(fp)
    bff4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    bff8:	e0bff617 	ldw	r2,-40(fp)
    bffc:	10c00017 	ldw	r3,0(r2)
    c000:	e0bff717 	ldw	r2,-36(fp)
    c004:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c008:	e0fff617 	ldw	r3,-40(fp)
    c00c:	e0bff717 	ldw	r2,-36(fp)
    c010:	18800015 	stw	r2,0(r3)
    c014:	e0bffa17 	ldw	r2,-24(fp)
    c018:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c01c:	e0bff517 	ldw	r2,-44(fp)
    c020:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    c024:	e03fff15 	stw	zero,-4(fp)
    c028:	00000506 	br	c040 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    c02c:	00bffa84 	movi	r2,-22
    c030:	e0bfff15 	stw	r2,-4(fp)
    c034:	00000206 	br	c040 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    c038:	00bfde84 	movi	r2,-134
    c03c:	e0bfff15 	stw	r2,-4(fp)
    c040:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    c044:	e037883a 	mov	sp,fp
    c048:	df000017 	ldw	fp,0(sp)
    c04c:	dec00104 	addi	sp,sp,4
    c050:	f800283a 	ret

0000c054 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    c054:	defffa04 	addi	sp,sp,-24
    c058:	dfc00515 	stw	ra,20(sp)
    c05c:	df000415 	stw	fp,16(sp)
    c060:	df000404 	addi	fp,sp,16
    c064:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
    c068:	00800244 	movi	r2,9
    c06c:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    c070:	e13ffc17 	ldw	r4,-16(fp)
    c074:	014003f4 	movhi	r5,15
    c078:	29509004 	addi	r5,r5,16960
    c07c:	000967c0 	call	967c <__mulsi3>
    c080:	100b883a 	mov	r5,r2
    c084:	0100bef4 	movhi	r4,763
    c088:	213c2004 	addi	r4,r4,-3968
    c08c:	000966c0 	call	966c <__udivsi3>
    c090:	100b883a 	mov	r5,r2
    c094:	01200034 	movhi	r4,32768
    c098:	213fffc4 	addi	r4,r4,-1
    c09c:	000966c0 	call	966c <__udivsi3>
    c0a0:	100b883a 	mov	r5,r2
    c0a4:	e13fff17 	ldw	r4,-4(fp)
    c0a8:	000966c0 	call	966c <__udivsi3>
    c0ac:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    c0b0:	e0bffd17 	ldw	r2,-12(fp)
    c0b4:	1005003a 	cmpeq	r2,r2,zero
    c0b8:	10002a1e 	bne	r2,zero,c164 <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
    c0bc:	e03ffe15 	stw	zero,-8(fp)
    c0c0:	00001706 	br	c120 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    c0c4:	00a00034 	movhi	r2,32768
    c0c8:	10bfffc4 	addi	r2,r2,-1
    c0cc:	10bfffc4 	addi	r2,r2,-1
    c0d0:	103ffe1e 	bne	r2,zero,c0cc <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    c0d4:	e13ffc17 	ldw	r4,-16(fp)
    c0d8:	014003f4 	movhi	r5,15
    c0dc:	29509004 	addi	r5,r5,16960
    c0e0:	000967c0 	call	967c <__mulsi3>
    c0e4:	100b883a 	mov	r5,r2
    c0e8:	0100bef4 	movhi	r4,763
    c0ec:	213c2004 	addi	r4,r4,-3968
    c0f0:	000966c0 	call	966c <__udivsi3>
    c0f4:	100b883a 	mov	r5,r2
    c0f8:	01200034 	movhi	r4,32768
    c0fc:	213fffc4 	addi	r4,r4,-1
    c100:	000966c0 	call	966c <__udivsi3>
    c104:	1007883a 	mov	r3,r2
    c108:	e0bfff17 	ldw	r2,-4(fp)
    c10c:	10c5c83a 	sub	r2,r2,r3
    c110:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    c114:	e0bffe17 	ldw	r2,-8(fp)
    c118:	10800044 	addi	r2,r2,1
    c11c:	e0bffe15 	stw	r2,-8(fp)
    c120:	e0fffe17 	ldw	r3,-8(fp)
    c124:	e0bffd17 	ldw	r2,-12(fp)
    c128:	18bfe616 	blt	r3,r2,c0c4 <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    c12c:	e13ffc17 	ldw	r4,-16(fp)
    c130:	014003f4 	movhi	r5,15
    c134:	29509004 	addi	r5,r5,16960
    c138:	000967c0 	call	967c <__mulsi3>
    c13c:	100b883a 	mov	r5,r2
    c140:	0100bef4 	movhi	r4,763
    c144:	213c2004 	addi	r4,r4,-3968
    c148:	000966c0 	call	966c <__udivsi3>
    c14c:	1009883a 	mov	r4,r2
    c150:	e17fff17 	ldw	r5,-4(fp)
    c154:	000967c0 	call	967c <__mulsi3>
    c158:	10bfffc4 	addi	r2,r2,-1
    c15c:	103ffe1e 	bne	r2,zero,c158 <alt_busy_sleep+0x104>
    c160:	00000d06 	br	c198 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    c164:	e13ffc17 	ldw	r4,-16(fp)
    c168:	014003f4 	movhi	r5,15
    c16c:	29509004 	addi	r5,r5,16960
    c170:	000967c0 	call	967c <__mulsi3>
    c174:	100b883a 	mov	r5,r2
    c178:	0100bef4 	movhi	r4,763
    c17c:	213c2004 	addi	r4,r4,-3968
    c180:	000966c0 	call	966c <__udivsi3>
    c184:	1009883a 	mov	r4,r2
    c188:	e17fff17 	ldw	r5,-4(fp)
    c18c:	000967c0 	call	967c <__mulsi3>
    c190:	10bfffc4 	addi	r2,r2,-1
    c194:	00bffe16 	blt	zero,r2,c190 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    c198:	0005883a 	mov	r2,zero
}
    c19c:	e037883a 	mov	sp,fp
    c1a0:	dfc00117 	ldw	ra,4(sp)
    c1a4:	df000017 	ldw	fp,0(sp)
    c1a8:	dec00204 	addi	sp,sp,8
    c1ac:	f800283a 	ret

0000c1b0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    c1b0:	deffff04 	addi	sp,sp,-4
    c1b4:	df000015 	stw	fp,0(sp)
    c1b8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    c1bc:	e037883a 	mov	sp,fp
    c1c0:	df000017 	ldw	fp,0(sp)
    c1c4:	dec00104 	addi	sp,sp,4
    c1c8:	f800283a 	ret

0000c1cc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    c1cc:	defff904 	addi	sp,sp,-28
    c1d0:	dfc00615 	stw	ra,24(sp)
    c1d4:	df000515 	stw	fp,20(sp)
    c1d8:	df000504 	addi	fp,sp,20
    c1dc:	e13ffd15 	stw	r4,-12(fp)
    c1e0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    c1e4:	e0bffd17 	ldw	r2,-12(fp)
    c1e8:	1005003a 	cmpeq	r2,r2,zero
    c1ec:	1000041e 	bne	r2,zero,c200 <alt_dev_llist_insert+0x34>
    c1f0:	e0bffd17 	ldw	r2,-12(fp)
    c1f4:	10800217 	ldw	r2,8(r2)
    c1f8:	1004c03a 	cmpne	r2,r2,zero
    c1fc:	1000071e 	bne	r2,zero,c21c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    c200:	000c2800 	call	c280 <alt_get_errno>
    c204:	1007883a 	mov	r3,r2
    c208:	00800584 	movi	r2,22
    c20c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    c210:	00bffa84 	movi	r2,-22
    c214:	e0bfff15 	stw	r2,-4(fp)
    c218:	00001306 	br	c268 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    c21c:	e0fffd17 	ldw	r3,-12(fp)
    c220:	e0bffe17 	ldw	r2,-8(fp)
    c224:	e0bffb15 	stw	r2,-20(fp)
    c228:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    c22c:	e0fffc17 	ldw	r3,-16(fp)
    c230:	e0bffb17 	ldw	r2,-20(fp)
    c234:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    c238:	e0bffb17 	ldw	r2,-20(fp)
    c23c:	10c00017 	ldw	r3,0(r2)
    c240:	e0bffc17 	ldw	r2,-16(fp)
    c244:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    c248:	e0bffb17 	ldw	r2,-20(fp)
    c24c:	10c00017 	ldw	r3,0(r2)
    c250:	e0bffc17 	ldw	r2,-16(fp)
    c254:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    c258:	e0fffb17 	ldw	r3,-20(fp)
    c25c:	e0bffc17 	ldw	r2,-16(fp)
    c260:	18800015 	stw	r2,0(r3)

  return 0;  
    c264:	e03fff15 	stw	zero,-4(fp)
    c268:	e0bfff17 	ldw	r2,-4(fp)
}
    c26c:	e037883a 	mov	sp,fp
    c270:	dfc00117 	ldw	ra,4(sp)
    c274:	df000017 	ldw	fp,0(sp)
    c278:	dec00204 	addi	sp,sp,8
    c27c:	f800283a 	ret

0000c280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    c280:	defffd04 	addi	sp,sp,-12
    c284:	dfc00215 	stw	ra,8(sp)
    c288:	df000115 	stw	fp,4(sp)
    c28c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    c290:	00800074 	movhi	r2,1
    c294:	10bc6004 	addi	r2,r2,-3712
    c298:	10800017 	ldw	r2,0(r2)
    c29c:	1005003a 	cmpeq	r2,r2,zero
    c2a0:	1000061e 	bne	r2,zero,c2bc <alt_get_errno+0x3c>
    c2a4:	00800074 	movhi	r2,1
    c2a8:	10bc6004 	addi	r2,r2,-3712
    c2ac:	10800017 	ldw	r2,0(r2)
    c2b0:	103ee83a 	callr	r2
    c2b4:	e0bfff15 	stw	r2,-4(fp)
    c2b8:	00000306 	br	c2c8 <alt_get_errno+0x48>
    c2bc:	00800074 	movhi	r2,1
    c2c0:	10833304 	addi	r2,r2,3276
    c2c4:	e0bfff15 	stw	r2,-4(fp)
    c2c8:	e0bfff17 	ldw	r2,-4(fp)
}
    c2cc:	e037883a 	mov	sp,fp
    c2d0:	dfc00117 	ldw	ra,4(sp)
    c2d4:	df000017 	ldw	fp,0(sp)
    c2d8:	dec00204 	addi	sp,sp,8
    c2dc:	f800283a 	ret

0000c2e0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    c2e0:	defffd04 	addi	sp,sp,-12
    c2e4:	dfc00215 	stw	ra,8(sp)
    c2e8:	df000115 	stw	fp,4(sp)
    c2ec:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c2f0:	00bfff04 	movi	r2,-4
    c2f4:	00c00074 	movhi	r3,1
    c2f8:	18f4c604 	addi	r3,r3,-11496
    c2fc:	1885883a 	add	r2,r3,r2
    c300:	e0bfff15 	stw	r2,-4(fp)
    c304:	00000606 	br	c320 <_do_ctors+0x40>
        (*ctor) (); 
    c308:	e0bfff17 	ldw	r2,-4(fp)
    c30c:	10800017 	ldw	r2,0(r2)
    c310:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    c314:	e0bfff17 	ldw	r2,-4(fp)
    c318:	10bfff04 	addi	r2,r2,-4
    c31c:	e0bfff15 	stw	r2,-4(fp)
    c320:	e0ffff17 	ldw	r3,-4(fp)
    c324:	00800074 	movhi	r2,1
    c328:	10b4c504 	addi	r2,r2,-11500
    c32c:	18bff62e 	bgeu	r3,r2,c308 <_do_ctors+0x28>
        (*ctor) (); 
}
    c330:	e037883a 	mov	sp,fp
    c334:	dfc00117 	ldw	ra,4(sp)
    c338:	df000017 	ldw	fp,0(sp)
    c33c:	dec00204 	addi	sp,sp,8
    c340:	f800283a 	ret

0000c344 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    c344:	defffd04 	addi	sp,sp,-12
    c348:	dfc00215 	stw	ra,8(sp)
    c34c:	df000115 	stw	fp,4(sp)
    c350:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c354:	00bfff04 	movi	r2,-4
    c358:	00c00074 	movhi	r3,1
    c35c:	18f4c604 	addi	r3,r3,-11496
    c360:	1885883a 	add	r2,r3,r2
    c364:	e0bfff15 	stw	r2,-4(fp)
    c368:	00000606 	br	c384 <_do_dtors+0x40>
        (*dtor) (); 
    c36c:	e0bfff17 	ldw	r2,-4(fp)
    c370:	10800017 	ldw	r2,0(r2)
    c374:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    c378:	e0bfff17 	ldw	r2,-4(fp)
    c37c:	10bfff04 	addi	r2,r2,-4
    c380:	e0bfff15 	stw	r2,-4(fp)
    c384:	e0ffff17 	ldw	r3,-4(fp)
    c388:	00800074 	movhi	r2,1
    c38c:	10b4c604 	addi	r2,r2,-11496
    c390:	18bff62e 	bgeu	r3,r2,c36c <_do_dtors+0x28>
        (*dtor) (); 
}
    c394:	e037883a 	mov	sp,fp
    c398:	dfc00117 	ldw	ra,4(sp)
    c39c:	df000017 	ldw	fp,0(sp)
    c3a0:	dec00204 	addi	sp,sp,8
    c3a4:	f800283a 	ret

0000c3a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    c3a8:	deffff04 	addi	sp,sp,-4
    c3ac:	df000015 	stw	fp,0(sp)
    c3b0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    c3b4:	e037883a 	mov	sp,fp
    c3b8:	df000017 	ldw	fp,0(sp)
    c3bc:	dec00104 	addi	sp,sp,4
    c3c0:	f800283a 	ret

0000c3c4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c3c4:	defff904 	addi	sp,sp,-28
    c3c8:	dfc00615 	stw	ra,24(sp)
    c3cc:	df000515 	stw	fp,20(sp)
    c3d0:	df000504 	addi	fp,sp,20
    c3d4:	e13ffc15 	stw	r4,-16(fp)
    c3d8:	e17ffd15 	stw	r5,-12(fp)
    c3dc:	e1bffe15 	stw	r6,-8(fp)
    c3e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    c3e4:	e0800217 	ldw	r2,8(fp)
    c3e8:	d8800015 	stw	r2,0(sp)
    c3ec:	e13ffc17 	ldw	r4,-16(fp)
    c3f0:	e17ffd17 	ldw	r5,-12(fp)
    c3f4:	e1bffe17 	ldw	r6,-8(fp)
    c3f8:	e1ffff17 	ldw	r7,-4(fp)
    c3fc:	000c5980 	call	c598 <alt_iic_isr_register>
}  
    c400:	e037883a 	mov	sp,fp
    c404:	dfc00117 	ldw	ra,4(sp)
    c408:	df000017 	ldw	fp,0(sp)
    c40c:	dec00204 	addi	sp,sp,8
    c410:	f800283a 	ret

0000c414 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    c414:	defff904 	addi	sp,sp,-28
    c418:	df000615 	stw	fp,24(sp)
    c41c:	df000604 	addi	fp,sp,24
    c420:	e13ffe15 	stw	r4,-8(fp)
    c424:	e17fff15 	stw	r5,-4(fp)
    c428:	e0bfff17 	ldw	r2,-4(fp)
    c42c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c430:	0005303a 	rdctl	r2,status
    c434:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c438:	e0fffb17 	ldw	r3,-20(fp)
    c43c:	00bfff84 	movi	r2,-2
    c440:	1884703a 	and	r2,r3,r2
    c444:	1001703a 	wrctl	status,r2
  
  return context;
    c448:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c44c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    c450:	e0fffc17 	ldw	r3,-16(fp)
    c454:	00800044 	movi	r2,1
    c458:	10c4983a 	sll	r2,r2,r3
    c45c:	1007883a 	mov	r3,r2
    c460:	00800074 	movhi	r2,1
    c464:	10833704 	addi	r2,r2,3292
    c468:	10800017 	ldw	r2,0(r2)
    c46c:	1886b03a 	or	r3,r3,r2
    c470:	00800074 	movhi	r2,1
    c474:	10833704 	addi	r2,r2,3292
    c478:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c47c:	00800074 	movhi	r2,1
    c480:	10833704 	addi	r2,r2,3292
    c484:	10800017 	ldw	r2,0(r2)
    c488:	100170fa 	wrctl	ienable,r2
    c48c:	e0bffd17 	ldw	r2,-12(fp)
    c490:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c494:	e0bffa17 	ldw	r2,-24(fp)
    c498:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c49c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    c4a0:	e037883a 	mov	sp,fp
    c4a4:	df000017 	ldw	fp,0(sp)
    c4a8:	dec00104 	addi	sp,sp,4
    c4ac:	f800283a 	ret

0000c4b0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    c4b0:	defff904 	addi	sp,sp,-28
    c4b4:	df000615 	stw	fp,24(sp)
    c4b8:	df000604 	addi	fp,sp,24
    c4bc:	e13ffe15 	stw	r4,-8(fp)
    c4c0:	e17fff15 	stw	r5,-4(fp)
    c4c4:	e0bfff17 	ldw	r2,-4(fp)
    c4c8:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c4cc:	0005303a 	rdctl	r2,status
    c4d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c4d4:	e0fffb17 	ldw	r3,-20(fp)
    c4d8:	00bfff84 	movi	r2,-2
    c4dc:	1884703a 	and	r2,r3,r2
    c4e0:	1001703a 	wrctl	status,r2
  
  return context;
    c4e4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    c4e8:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    c4ec:	e0fffc17 	ldw	r3,-16(fp)
    c4f0:	00800044 	movi	r2,1
    c4f4:	10c4983a 	sll	r2,r2,r3
    c4f8:	0084303a 	nor	r2,zero,r2
    c4fc:	1007883a 	mov	r3,r2
    c500:	00800074 	movhi	r2,1
    c504:	10833704 	addi	r2,r2,3292
    c508:	10800017 	ldw	r2,0(r2)
    c50c:	1886703a 	and	r3,r3,r2
    c510:	00800074 	movhi	r2,1
    c514:	10833704 	addi	r2,r2,3292
    c518:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    c51c:	00800074 	movhi	r2,1
    c520:	10833704 	addi	r2,r2,3292
    c524:	10800017 	ldw	r2,0(r2)
    c528:	100170fa 	wrctl	ienable,r2
    c52c:	e0bffd17 	ldw	r2,-12(fp)
    c530:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c534:	e0bffa17 	ldw	r2,-24(fp)
    c538:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    c53c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    c540:	e037883a 	mov	sp,fp
    c544:	df000017 	ldw	fp,0(sp)
    c548:	dec00104 	addi	sp,sp,4
    c54c:	f800283a 	ret

0000c550 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    c550:	defffc04 	addi	sp,sp,-16
    c554:	df000315 	stw	fp,12(sp)
    c558:	df000304 	addi	fp,sp,12
    c55c:	e13ffe15 	stw	r4,-8(fp)
    c560:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    c564:	000530fa 	rdctl	r2,ienable
    c568:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    c56c:	e0ffff17 	ldw	r3,-4(fp)
    c570:	00800044 	movi	r2,1
    c574:	10c4983a 	sll	r2,r2,r3
    c578:	1007883a 	mov	r3,r2
    c57c:	e0bffd17 	ldw	r2,-12(fp)
    c580:	1884703a 	and	r2,r3,r2
    c584:	1004c03a 	cmpne	r2,r2,zero
}
    c588:	e037883a 	mov	sp,fp
    c58c:	df000017 	ldw	fp,0(sp)
    c590:	dec00104 	addi	sp,sp,4
    c594:	f800283a 	ret

0000c598 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    c598:	defff404 	addi	sp,sp,-48
    c59c:	dfc00b15 	stw	ra,44(sp)
    c5a0:	df000a15 	stw	fp,40(sp)
    c5a4:	df000a04 	addi	fp,sp,40
    c5a8:	e13ffb15 	stw	r4,-20(fp)
    c5ac:	e17ffc15 	stw	r5,-16(fp)
    c5b0:	e1bffd15 	stw	r6,-12(fp)
    c5b4:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    c5b8:	00bffa84 	movi	r2,-22
    c5bc:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    c5c0:	e0bffc17 	ldw	r2,-16(fp)
    c5c4:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    c5c8:	e0bff917 	ldw	r2,-28(fp)
    c5cc:	10800808 	cmpgei	r2,r2,32
    c5d0:	1000291e 	bne	r2,zero,c678 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c5d4:	0005303a 	rdctl	r2,status
    c5d8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c5dc:	e0fff717 	ldw	r3,-36(fp)
    c5e0:	00bfff84 	movi	r2,-2
    c5e4:	1884703a 	and	r2,r3,r2
    c5e8:	1001703a 	wrctl	status,r2
  
  return context;
    c5ec:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    c5f0:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    c5f4:	e0bff917 	ldw	r2,-28(fp)
    c5f8:	00c00074 	movhi	r3,1
    c5fc:	18c34404 	addi	r3,r3,3344
    c600:	100490fa 	slli	r2,r2,3
    c604:	10c7883a 	add	r3,r2,r3
    c608:	e0bffd17 	ldw	r2,-12(fp)
    c60c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    c610:	e0bff917 	ldw	r2,-28(fp)
    c614:	00c00074 	movhi	r3,1
    c618:	18c34404 	addi	r3,r3,3344
    c61c:	100490fa 	slli	r2,r2,3
    c620:	10c5883a 	add	r2,r2,r3
    c624:	10c00104 	addi	r3,r2,4
    c628:	e0bffe17 	ldw	r2,-8(fp)
    c62c:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    c630:	e0bffd17 	ldw	r2,-12(fp)
    c634:	1005003a 	cmpeq	r2,r2,zero
    c638:	1000051e 	bne	r2,zero,c650 <alt_iic_isr_register+0xb8>
    c63c:	e17ff917 	ldw	r5,-28(fp)
    c640:	e13ffb17 	ldw	r4,-20(fp)
    c644:	000c4140 	call	c414 <alt_ic_irq_enable>
    c648:	e0bfff15 	stw	r2,-4(fp)
    c64c:	00000406 	br	c660 <alt_iic_isr_register+0xc8>
    c650:	e17ff917 	ldw	r5,-28(fp)
    c654:	e13ffb17 	ldw	r4,-20(fp)
    c658:	000c4b00 	call	c4b0 <alt_ic_irq_disable>
    c65c:	e0bfff15 	stw	r2,-4(fp)
    c660:	e0bfff17 	ldw	r2,-4(fp)
    c664:	e0bffa15 	stw	r2,-24(fp)
    c668:	e0bff817 	ldw	r2,-32(fp)
    c66c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c670:	e0bff617 	ldw	r2,-40(fp)
    c674:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    c678:	e0bffa17 	ldw	r2,-24(fp)
}
    c67c:	e037883a 	mov	sp,fp
    c680:	dfc00117 	ldw	ra,4(sp)
    c684:	df000017 	ldw	fp,0(sp)
    c688:	dec00204 	addi	sp,sp,8
    c68c:	f800283a 	ret

0000c690 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    c690:	defff804 	addi	sp,sp,-32
    c694:	dfc00715 	stw	ra,28(sp)
    c698:	df000615 	stw	fp,24(sp)
    c69c:	dc000515 	stw	r16,20(sp)
    c6a0:	df000504 	addi	fp,sp,20
    c6a4:	e13ffc15 	stw	r4,-16(fp)
    c6a8:	e17ffd15 	stw	r5,-12(fp)
    c6ac:	e1bffe15 	stw	r6,-8(fp)
    c6b0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    c6b4:	e13ffd17 	ldw	r4,-12(fp)
    c6b8:	e17ffe17 	ldw	r5,-8(fp)
    c6bc:	e1bfff17 	ldw	r6,-4(fp)
    c6c0:	000c8d80 	call	c8d8 <open>
    c6c4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    c6c8:	e0bffb17 	ldw	r2,-20(fp)
    c6cc:	1004803a 	cmplt	r2,r2,zero
    c6d0:	10001f1e 	bne	r2,zero,c750 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
    c6d4:	e13ffb17 	ldw	r4,-20(fp)
    c6d8:	04000074 	movhi	r16,1
    c6dc:	8437ac04 	addi	r16,r16,-8528
    c6e0:	01400304 	movi	r5,12
    c6e4:	000967c0 	call	967c <__mulsi3>
    c6e8:	1405883a 	add	r2,r2,r16
    c6ec:	10c00017 	ldw	r3,0(r2)
    c6f0:	e0bffc17 	ldw	r2,-16(fp)
    c6f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    c6f8:	e13ffb17 	ldw	r4,-20(fp)
    c6fc:	04000074 	movhi	r16,1
    c700:	8437ac04 	addi	r16,r16,-8528
    c704:	01400304 	movi	r5,12
    c708:	000967c0 	call	967c <__mulsi3>
    c70c:	1405883a 	add	r2,r2,r16
    c710:	10800104 	addi	r2,r2,4
    c714:	10c00017 	ldw	r3,0(r2)
    c718:	e0bffc17 	ldw	r2,-16(fp)
    c71c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    c720:	e13ffb17 	ldw	r4,-20(fp)
    c724:	04000074 	movhi	r16,1
    c728:	8437ac04 	addi	r16,r16,-8528
    c72c:	01400304 	movi	r5,12
    c730:	000967c0 	call	967c <__mulsi3>
    c734:	1405883a 	add	r2,r2,r16
    c738:	10800204 	addi	r2,r2,8
    c73c:	10c00017 	ldw	r3,0(r2)
    c740:	e0bffc17 	ldw	r2,-16(fp)
    c744:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    c748:	e13ffb17 	ldw	r4,-20(fp)
    c74c:	000a5c40 	call	a5c4 <alt_release_fd>
  }
} 
    c750:	e037883a 	mov	sp,fp
    c754:	dfc00217 	ldw	ra,8(sp)
    c758:	df000117 	ldw	fp,4(sp)
    c75c:	dc000017 	ldw	r16,0(sp)
    c760:	dec00304 	addi	sp,sp,12
    c764:	f800283a 	ret

0000c768 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    c768:	defffb04 	addi	sp,sp,-20
    c76c:	dfc00415 	stw	ra,16(sp)
    c770:	df000315 	stw	fp,12(sp)
    c774:	df000304 	addi	fp,sp,12
    c778:	e13ffd15 	stw	r4,-12(fp)
    c77c:	e17ffe15 	stw	r5,-8(fp)
    c780:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    c784:	01000074 	movhi	r4,1
    c788:	2137af04 	addi	r4,r4,-8516
    c78c:	e17ffd17 	ldw	r5,-12(fp)
    c790:	01800044 	movi	r6,1
    c794:	01c07fc4 	movi	r7,511
    c798:	000c6900 	call	c690 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    c79c:	01000074 	movhi	r4,1
    c7a0:	2137ac04 	addi	r4,r4,-8528
    c7a4:	e17ffe17 	ldw	r5,-8(fp)
    c7a8:	000d883a 	mov	r6,zero
    c7ac:	01c07fc4 	movi	r7,511
    c7b0:	000c6900 	call	c690 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    c7b4:	01000074 	movhi	r4,1
    c7b8:	2137b204 	addi	r4,r4,-8504
    c7bc:	e17fff17 	ldw	r5,-4(fp)
    c7c0:	01800044 	movi	r6,1
    c7c4:	01c07fc4 	movi	r7,511
    c7c8:	000c6900 	call	c690 <alt_open_fd>
}  
    c7cc:	e037883a 	mov	sp,fp
    c7d0:	dfc00117 	ldw	ra,4(sp)
    c7d4:	df000017 	ldw	fp,0(sp)
    c7d8:	dec00204 	addi	sp,sp,8
    c7dc:	f800283a 	ret

0000c7e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    c7e0:	defffa04 	addi	sp,sp,-24
    c7e4:	dfc00515 	stw	ra,20(sp)
    c7e8:	df000415 	stw	fp,16(sp)
    c7ec:	dc000315 	stw	r16,12(sp)
    c7f0:	df000304 	addi	fp,sp,12
    c7f4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    c7f8:	e0bffe17 	ldw	r2,-8(fp)
    c7fc:	10800217 	ldw	r2,8(r2)
    c800:	10d00034 	orhi	r3,r2,16384
    c804:	e0bffe17 	ldw	r2,-8(fp)
    c808:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c80c:	e03ffd15 	stw	zero,-12(fp)
    c810:	00002306 	br	c8a0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    c814:	e13ffd17 	ldw	r4,-12(fp)
    c818:	04000074 	movhi	r16,1
    c81c:	8437ac04 	addi	r16,r16,-8528
    c820:	01400304 	movi	r5,12
    c824:	000967c0 	call	967c <__mulsi3>
    c828:	1405883a 	add	r2,r2,r16
    c82c:	10c00017 	ldw	r3,0(r2)
    c830:	e0bffe17 	ldw	r2,-8(fp)
    c834:	10800017 	ldw	r2,0(r2)
    c838:	1880161e 	bne	r3,r2,c894 <alt_file_locked+0xb4>
    c83c:	e13ffd17 	ldw	r4,-12(fp)
    c840:	04000074 	movhi	r16,1
    c844:	8437ac04 	addi	r16,r16,-8528
    c848:	01400304 	movi	r5,12
    c84c:	000967c0 	call	967c <__mulsi3>
    c850:	1405883a 	add	r2,r2,r16
    c854:	10800204 	addi	r2,r2,8
    c858:	10800017 	ldw	r2,0(r2)
    c85c:	1004403a 	cmpge	r2,r2,zero
    c860:	10000c1e 	bne	r2,zero,c894 <alt_file_locked+0xb4>
    c864:	e13ffd17 	ldw	r4,-12(fp)
    c868:	01400304 	movi	r5,12
    c86c:	000967c0 	call	967c <__mulsi3>
    c870:	1007883a 	mov	r3,r2
    c874:	00800074 	movhi	r2,1
    c878:	10b7ac04 	addi	r2,r2,-8528
    c87c:	1887883a 	add	r3,r3,r2
    c880:	e0bffe17 	ldw	r2,-8(fp)
    c884:	18800326 	beq	r3,r2,c894 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    c888:	00bffcc4 	movi	r2,-13
    c88c:	e0bfff15 	stw	r2,-4(fp)
    c890:	00000a06 	br	c8bc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    c894:	e0bffd17 	ldw	r2,-12(fp)
    c898:	10800044 	addi	r2,r2,1
    c89c:	e0bffd15 	stw	r2,-12(fp)
    c8a0:	00800074 	movhi	r2,1
    c8a4:	10bc5f04 	addi	r2,r2,-3716
    c8a8:	10800017 	ldw	r2,0(r2)
    c8ac:	1007883a 	mov	r3,r2
    c8b0:	e0bffd17 	ldw	r2,-12(fp)
    c8b4:	18bfd72e 	bgeu	r3,r2,c814 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    c8b8:	e03fff15 	stw	zero,-4(fp)
    c8bc:	e0bfff17 	ldw	r2,-4(fp)
}
    c8c0:	e037883a 	mov	sp,fp
    c8c4:	dfc00217 	ldw	ra,8(sp)
    c8c8:	df000117 	ldw	fp,4(sp)
    c8cc:	dc000017 	ldw	r16,0(sp)
    c8d0:	dec00304 	addi	sp,sp,12
    c8d4:	f800283a 	ret

0000c8d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    c8d8:	defff404 	addi	sp,sp,-48
    c8dc:	dfc00b15 	stw	ra,44(sp)
    c8e0:	df000a15 	stw	fp,40(sp)
    c8e4:	df000a04 	addi	fp,sp,40
    c8e8:	e13ffb15 	stw	r4,-20(fp)
    c8ec:	e17ffc15 	stw	r5,-16(fp)
    c8f0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    c8f4:	00bfffc4 	movi	r2,-1
    c8f8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    c8fc:	00bffb44 	movi	r2,-19
    c900:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    c904:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    c908:	e13ffb17 	ldw	r4,-20(fp)
    c90c:	01400074 	movhi	r5,1
    c910:	297c5d04 	addi	r5,r5,-3724
    c914:	000cc880 	call	cc88 <alt_find_dev>
    c918:	e0bffa15 	stw	r2,-24(fp)
    c91c:	e0bffa17 	ldw	r2,-24(fp)
    c920:	1004c03a 	cmpne	r2,r2,zero
    c924:	1000051e 	bne	r2,zero,c93c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    c928:	e13ffb17 	ldw	r4,-20(fp)
    c92c:	000cd1c0 	call	cd1c <alt_find_file>
    c930:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    c934:	00800044 	movi	r2,1
    c938:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    c93c:	e0bffa17 	ldw	r2,-24(fp)
    c940:	1005003a 	cmpeq	r2,r2,zero
    c944:	1000311e 	bne	r2,zero,ca0c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
    c948:	e13ffa17 	ldw	r4,-24(fp)
    c94c:	000ce3c0 	call	ce3c <alt_get_fd>
    c950:	e0bff815 	stw	r2,-32(fp)
    c954:	e0bff817 	ldw	r2,-32(fp)
    c958:	1004403a 	cmpge	r2,r2,zero
    c95c:	1000031e 	bne	r2,zero,c96c <open+0x94>
    {
      status = index;
    c960:	e0bff817 	ldw	r2,-32(fp)
    c964:	e0bff715 	stw	r2,-36(fp)
    c968:	00002a06 	br	ca14 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
    c96c:	e13ff817 	ldw	r4,-32(fp)
    c970:	01400304 	movi	r5,12
    c974:	000967c0 	call	967c <__mulsi3>
    c978:	1007883a 	mov	r3,r2
    c97c:	00800074 	movhi	r2,1
    c980:	10b7ac04 	addi	r2,r2,-8528
    c984:	1885883a 	add	r2,r3,r2
    c988:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    c98c:	e0fffc17 	ldw	r3,-16(fp)
    c990:	00900034 	movhi	r2,16384
    c994:	10bfffc4 	addi	r2,r2,-1
    c998:	1886703a 	and	r3,r3,r2
    c99c:	e0bff917 	ldw	r2,-28(fp)
    c9a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    c9a4:	e0bff617 	ldw	r2,-40(fp)
    c9a8:	1004c03a 	cmpne	r2,r2,zero
    c9ac:	1000061e 	bne	r2,zero,c9c8 <open+0xf0>
    c9b0:	e13ff917 	ldw	r4,-28(fp)
    c9b4:	000c7e00 	call	c7e0 <alt_file_locked>
    c9b8:	e0bff715 	stw	r2,-36(fp)
    c9bc:	e0bff717 	ldw	r2,-36(fp)
    c9c0:	1004803a 	cmplt	r2,r2,zero
    c9c4:	1000131e 	bne	r2,zero,ca14 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    c9c8:	e0bffa17 	ldw	r2,-24(fp)
    c9cc:	10800317 	ldw	r2,12(r2)
    c9d0:	1005003a 	cmpeq	r2,r2,zero
    c9d4:	1000091e 	bne	r2,zero,c9fc <open+0x124>
    c9d8:	e0bffa17 	ldw	r2,-24(fp)
    c9dc:	10800317 	ldw	r2,12(r2)
    c9e0:	e13ff917 	ldw	r4,-28(fp)
    c9e4:	e17ffb17 	ldw	r5,-20(fp)
    c9e8:	e1bffc17 	ldw	r6,-16(fp)
    c9ec:	e1fffd17 	ldw	r7,-12(fp)
    c9f0:	103ee83a 	callr	r2
    c9f4:	e0bfff15 	stw	r2,-4(fp)
    c9f8:	00000106 	br	ca00 <open+0x128>
    c9fc:	e03fff15 	stw	zero,-4(fp)
    ca00:	e0bfff17 	ldw	r2,-4(fp)
    ca04:	e0bff715 	stw	r2,-36(fp)
    ca08:	00000206 	br	ca14 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    ca0c:	00bffb44 	movi	r2,-19
    ca10:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    ca14:	e0bff717 	ldw	r2,-36(fp)
    ca18:	1004403a 	cmpge	r2,r2,zero
    ca1c:	1000091e 	bne	r2,zero,ca44 <open+0x16c>
  {
    alt_release_fd (index);  
    ca20:	e13ff817 	ldw	r4,-32(fp)
    ca24:	000a5c40 	call	a5c4 <alt_release_fd>
    ALT_ERRNO = -status;
    ca28:	000ca640 	call	ca64 <alt_get_errno>
    ca2c:	e0fff717 	ldw	r3,-36(fp)
    ca30:	00c7c83a 	sub	r3,zero,r3
    ca34:	10c00015 	stw	r3,0(r2)
    return -1;
    ca38:	00bfffc4 	movi	r2,-1
    ca3c:	e0bffe15 	stw	r2,-8(fp)
    ca40:	00000206 	br	ca4c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
    ca44:	e0bff817 	ldw	r2,-32(fp)
    ca48:	e0bffe15 	stw	r2,-8(fp)
    ca4c:	e0bffe17 	ldw	r2,-8(fp)
}
    ca50:	e037883a 	mov	sp,fp
    ca54:	dfc00117 	ldw	ra,4(sp)
    ca58:	df000017 	ldw	fp,0(sp)
    ca5c:	dec00204 	addi	sp,sp,8
    ca60:	f800283a 	ret

0000ca64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ca64:	defffd04 	addi	sp,sp,-12
    ca68:	dfc00215 	stw	ra,8(sp)
    ca6c:	df000115 	stw	fp,4(sp)
    ca70:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    ca74:	00800074 	movhi	r2,1
    ca78:	10bc6004 	addi	r2,r2,-3712
    ca7c:	10800017 	ldw	r2,0(r2)
    ca80:	1005003a 	cmpeq	r2,r2,zero
    ca84:	1000061e 	bne	r2,zero,caa0 <alt_get_errno+0x3c>
    ca88:	00800074 	movhi	r2,1
    ca8c:	10bc6004 	addi	r2,r2,-3712
    ca90:	10800017 	ldw	r2,0(r2)
    ca94:	103ee83a 	callr	r2
    ca98:	e0bfff15 	stw	r2,-4(fp)
    ca9c:	00000306 	br	caac <alt_get_errno+0x48>
    caa0:	00800074 	movhi	r2,1
    caa4:	10833304 	addi	r2,r2,3276
    caa8:	e0bfff15 	stw	r2,-4(fp)
    caac:	e0bfff17 	ldw	r2,-4(fp)
}
    cab0:	e037883a 	mov	sp,fp
    cab4:	dfc00117 	ldw	ra,4(sp)
    cab8:	df000017 	ldw	fp,0(sp)
    cabc:	dec00204 	addi	sp,sp,8
    cac0:	f800283a 	ret

0000cac4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    cac4:	defffa04 	addi	sp,sp,-24
    cac8:	df000515 	stw	fp,20(sp)
    cacc:	df000504 	addi	fp,sp,20
    cad0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    cad4:	0005303a 	rdctl	r2,status
    cad8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    cadc:	e0fffd17 	ldw	r3,-12(fp)
    cae0:	00bfff84 	movi	r2,-2
    cae4:	1884703a 	and	r2,r3,r2
    cae8:	1001703a 	wrctl	status,r2
  
  return context;
    caec:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    caf0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    caf4:	e0bfff17 	ldw	r2,-4(fp)
    caf8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    cafc:	e0bffc17 	ldw	r2,-16(fp)
    cb00:	10c00017 	ldw	r3,0(r2)
    cb04:	e0bffc17 	ldw	r2,-16(fp)
    cb08:	10800117 	ldw	r2,4(r2)
    cb0c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    cb10:	e0bffc17 	ldw	r2,-16(fp)
    cb14:	10c00117 	ldw	r3,4(r2)
    cb18:	e0bffc17 	ldw	r2,-16(fp)
    cb1c:	10800017 	ldw	r2,0(r2)
    cb20:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    cb24:	e0fffc17 	ldw	r3,-16(fp)
    cb28:	e0bffc17 	ldw	r2,-16(fp)
    cb2c:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    cb30:	e0fffc17 	ldw	r3,-16(fp)
    cb34:	e0bffc17 	ldw	r2,-16(fp)
    cb38:	18800015 	stw	r2,0(r3)
    cb3c:	e0bffe17 	ldw	r2,-8(fp)
    cb40:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    cb44:	e0bffb17 	ldw	r2,-20(fp)
    cb48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    cb4c:	e037883a 	mov	sp,fp
    cb50:	df000017 	ldw	fp,0(sp)
    cb54:	dec00104 	addi	sp,sp,4
    cb58:	f800283a 	ret

0000cb5c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    cb5c:	defffb04 	addi	sp,sp,-20
    cb60:	dfc00415 	stw	ra,16(sp)
    cb64:	df000315 	stw	fp,12(sp)
    cb68:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    cb6c:	d0a00e17 	ldw	r2,-32712(gp)
    cb70:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    cb74:	d0a6e417 	ldw	r2,-25712(gp)
    cb78:	10800044 	addi	r2,r2,1
    cb7c:	d0a6e415 	stw	r2,-25712(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    cb80:	00003106 	br	cc48 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    cb84:	e0bffe17 	ldw	r2,-8(fp)
    cb88:	10800017 	ldw	r2,0(r2)
    cb8c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    cb90:	e0bffe17 	ldw	r2,-8(fp)
    cb94:	10800403 	ldbu	r2,16(r2)
    cb98:	10803fcc 	andi	r2,r2,255
    cb9c:	1005003a 	cmpeq	r2,r2,zero
    cba0:	1000051e 	bne	r2,zero,cbb8 <alt_tick+0x5c>
    cba4:	d0a6e417 	ldw	r2,-25712(gp)
    cba8:	1004c03a 	cmpne	r2,r2,zero
    cbac:	1000021e 	bne	r2,zero,cbb8 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    cbb0:	e0bffe17 	ldw	r2,-8(fp)
    cbb4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    cbb8:	e0bffe17 	ldw	r2,-8(fp)
    cbbc:	10c00217 	ldw	r3,8(r2)
    cbc0:	d0a6e417 	ldw	r2,-25712(gp)
    cbc4:	10c01e36 	bltu	r2,r3,cc40 <alt_tick+0xe4>
    cbc8:	e0bffe17 	ldw	r2,-8(fp)
    cbcc:	10800403 	ldbu	r2,16(r2)
    cbd0:	10803fcc 	andi	r2,r2,255
    cbd4:	1004c03a 	cmpne	r2,r2,zero
    cbd8:	1000191e 	bne	r2,zero,cc40 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    cbdc:	e0bffe17 	ldw	r2,-8(fp)
    cbe0:	10c00317 	ldw	r3,12(r2)
    cbe4:	e0bffe17 	ldw	r2,-8(fp)
    cbe8:	11000517 	ldw	r4,20(r2)
    cbec:	183ee83a 	callr	r3
    cbf0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    cbf4:	e0bffd17 	ldw	r2,-12(fp)
    cbf8:	1004c03a 	cmpne	r2,r2,zero
    cbfc:	1000031e 	bne	r2,zero,cc0c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    cc00:	e13ffe17 	ldw	r4,-8(fp)
    cc04:	000cac40 	call	cac4 <alt_alarm_stop>
    cc08:	00000d06 	br	cc40 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    cc0c:	e0bffe17 	ldw	r2,-8(fp)
    cc10:	10c00217 	ldw	r3,8(r2)
    cc14:	e0bffd17 	ldw	r2,-12(fp)
    cc18:	1887883a 	add	r3,r3,r2
    cc1c:	e0bffe17 	ldw	r2,-8(fp)
    cc20:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    cc24:	e0bffe17 	ldw	r2,-8(fp)
    cc28:	10c00217 	ldw	r3,8(r2)
    cc2c:	d0a6e417 	ldw	r2,-25712(gp)
    cc30:	1880032e 	bgeu	r3,r2,cc40 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    cc34:	e0fffe17 	ldw	r3,-8(fp)
    cc38:	00800044 	movi	r2,1
    cc3c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    cc40:	e0bfff17 	ldw	r2,-4(fp)
    cc44:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    cc48:	d0e00e04 	addi	r3,gp,-32712
    cc4c:	e0bffe17 	ldw	r2,-8(fp)
    cc50:	10ffcc1e 	bne	r2,r3,cb84 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    cc54:	e037883a 	mov	sp,fp
    cc58:	dfc00117 	ldw	ra,4(sp)
    cc5c:	df000017 	ldw	fp,0(sp)
    cc60:	dec00204 	addi	sp,sp,8
    cc64:	f800283a 	ret

0000cc68 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    cc68:	deffff04 	addi	sp,sp,-4
    cc6c:	df000015 	stw	fp,0(sp)
    cc70:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    cc74:	000170fa 	wrctl	ienable,zero
}
    cc78:	e037883a 	mov	sp,fp
    cc7c:	df000017 	ldw	fp,0(sp)
    cc80:	dec00104 	addi	sp,sp,4
    cc84:	f800283a 	ret

0000cc88 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    cc88:	defff904 	addi	sp,sp,-28
    cc8c:	dfc00615 	stw	ra,24(sp)
    cc90:	df000515 	stw	fp,20(sp)
    cc94:	df000504 	addi	fp,sp,20
    cc98:	e13ffd15 	stw	r4,-12(fp)
    cc9c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    cca0:	e0bffe17 	ldw	r2,-8(fp)
    cca4:	10800017 	ldw	r2,0(r2)
    cca8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    ccac:	e13ffd17 	ldw	r4,-12(fp)
    ccb0:	000721c0 	call	721c <strlen>
    ccb4:	10800044 	addi	r2,r2,1
    ccb8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ccbc:	00000d06 	br	ccf4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    ccc0:	e0bffc17 	ldw	r2,-16(fp)
    ccc4:	11000217 	ldw	r4,8(r2)
    ccc8:	e1bffb17 	ldw	r6,-20(fp)
    cccc:	e17ffd17 	ldw	r5,-12(fp)
    ccd0:	000cf580 	call	cf58 <memcmp>
    ccd4:	1004c03a 	cmpne	r2,r2,zero
    ccd8:	1000031e 	bne	r2,zero,cce8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ccdc:	e0bffc17 	ldw	r2,-16(fp)
    cce0:	e0bfff15 	stw	r2,-4(fp)
    cce4:	00000706 	br	cd04 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    cce8:	e0bffc17 	ldw	r2,-16(fp)
    ccec:	10800017 	ldw	r2,0(r2)
    ccf0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ccf4:	e0fffe17 	ldw	r3,-8(fp)
    ccf8:	e0bffc17 	ldw	r2,-16(fp)
    ccfc:	10fff01e 	bne	r2,r3,ccc0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    cd00:	e03fff15 	stw	zero,-4(fp)
    cd04:	e0bfff17 	ldw	r2,-4(fp)
}
    cd08:	e037883a 	mov	sp,fp
    cd0c:	dfc00117 	ldw	ra,4(sp)
    cd10:	df000017 	ldw	fp,0(sp)
    cd14:	dec00204 	addi	sp,sp,8
    cd18:	f800283a 	ret

0000cd1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    cd1c:	defffa04 	addi	sp,sp,-24
    cd20:	dfc00515 	stw	ra,20(sp)
    cd24:	df000415 	stw	fp,16(sp)
    cd28:	df000404 	addi	fp,sp,16
    cd2c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    cd30:	00800074 	movhi	r2,1
    cd34:	10bc5b04 	addi	r2,r2,-3732
    cd38:	10800017 	ldw	r2,0(r2)
    cd3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    cd40:	00003306 	br	ce10 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    cd44:	e0bffd17 	ldw	r2,-12(fp)
    cd48:	11000217 	ldw	r4,8(r2)
    cd4c:	000721c0 	call	721c <strlen>
    cd50:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    cd54:	e0bffd17 	ldw	r2,-12(fp)
    cd58:	10c00217 	ldw	r3,8(r2)
    cd5c:	e0bffc17 	ldw	r2,-16(fp)
    cd60:	1885883a 	add	r2,r3,r2
    cd64:	10bfffc4 	addi	r2,r2,-1
    cd68:	10800003 	ldbu	r2,0(r2)
    cd6c:	10803fcc 	andi	r2,r2,255
    cd70:	1080201c 	xori	r2,r2,128
    cd74:	10bfe004 	addi	r2,r2,-128
    cd78:	10800bd8 	cmpnei	r2,r2,47
    cd7c:	1000031e 	bne	r2,zero,cd8c <alt_find_file+0x70>
    {
      len -= 1;
    cd80:	e0bffc17 	ldw	r2,-16(fp)
    cd84:	10bfffc4 	addi	r2,r2,-1
    cd88:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    cd8c:	e0bffc17 	ldw	r2,-16(fp)
    cd90:	1007883a 	mov	r3,r2
    cd94:	e0bffe17 	ldw	r2,-8(fp)
    cd98:	1885883a 	add	r2,r3,r2
    cd9c:	10800003 	ldbu	r2,0(r2)
    cda0:	10803fcc 	andi	r2,r2,255
    cda4:	1080201c 	xori	r2,r2,128
    cda8:	10bfe004 	addi	r2,r2,-128
    cdac:	10800be0 	cmpeqi	r2,r2,47
    cdb0:	10000a1e 	bne	r2,zero,cddc <alt_find_file+0xc0>
    cdb4:	e0bffc17 	ldw	r2,-16(fp)
    cdb8:	1007883a 	mov	r3,r2
    cdbc:	e0bffe17 	ldw	r2,-8(fp)
    cdc0:	1885883a 	add	r2,r3,r2
    cdc4:	10800003 	ldbu	r2,0(r2)
    cdc8:	10803fcc 	andi	r2,r2,255
    cdcc:	1080201c 	xori	r2,r2,128
    cdd0:	10bfe004 	addi	r2,r2,-128
    cdd4:	1004c03a 	cmpne	r2,r2,zero
    cdd8:	10000a1e 	bne	r2,zero,ce04 <alt_find_file+0xe8>
    cddc:	e0bffd17 	ldw	r2,-12(fp)
    cde0:	11000217 	ldw	r4,8(r2)
    cde4:	e1bffc17 	ldw	r6,-16(fp)
    cde8:	e17ffe17 	ldw	r5,-8(fp)
    cdec:	000cf580 	call	cf58 <memcmp>
    cdf0:	1004c03a 	cmpne	r2,r2,zero
    cdf4:	1000031e 	bne	r2,zero,ce04 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    cdf8:	e0bffd17 	ldw	r2,-12(fp)
    cdfc:	e0bfff15 	stw	r2,-4(fp)
    ce00:	00000806 	br	ce24 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    ce04:	e0bffd17 	ldw	r2,-12(fp)
    ce08:	10800017 	ldw	r2,0(r2)
    ce0c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    ce10:	00c00074 	movhi	r3,1
    ce14:	18fc5b04 	addi	r3,r3,-3732
    ce18:	e0bffd17 	ldw	r2,-12(fp)
    ce1c:	10ffc91e 	bne	r2,r3,cd44 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    ce20:	e03fff15 	stw	zero,-4(fp)
    ce24:	e0bfff17 	ldw	r2,-4(fp)
}
    ce28:	e037883a 	mov	sp,fp
    ce2c:	dfc00117 	ldw	ra,4(sp)
    ce30:	df000017 	ldw	fp,0(sp)
    ce34:	dec00204 	addi	sp,sp,8
    ce38:	f800283a 	ret

0000ce3c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    ce3c:	defffa04 	addi	sp,sp,-24
    ce40:	dfc00515 	stw	ra,20(sp)
    ce44:	df000415 	stw	fp,16(sp)
    ce48:	dc000315 	stw	r16,12(sp)
    ce4c:	df000304 	addi	fp,sp,12
    ce50:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    ce54:	00bffa04 	movi	r2,-24
    ce58:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ce5c:	e03ffe15 	stw	zero,-8(fp)
    ce60:	00002006 	br	cee4 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
    ce64:	e13ffe17 	ldw	r4,-8(fp)
    ce68:	04000074 	movhi	r16,1
    ce6c:	8437ac04 	addi	r16,r16,-8528
    ce70:	01400304 	movi	r5,12
    ce74:	000967c0 	call	967c <__mulsi3>
    ce78:	1405883a 	add	r2,r2,r16
    ce7c:	10800017 	ldw	r2,0(r2)
    ce80:	1004c03a 	cmpne	r2,r2,zero
    ce84:	1000141e 	bne	r2,zero,ced8 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
    ce88:	e13ffe17 	ldw	r4,-8(fp)
    ce8c:	04000074 	movhi	r16,1
    ce90:	8437ac04 	addi	r16,r16,-8528
    ce94:	01400304 	movi	r5,12
    ce98:	000967c0 	call	967c <__mulsi3>
    ce9c:	1407883a 	add	r3,r2,r16
    cea0:	e0bfff17 	ldw	r2,-4(fp)
    cea4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    cea8:	00800074 	movhi	r2,1
    ceac:	10bc5f04 	addi	r2,r2,-3716
    ceb0:	10c00017 	ldw	r3,0(r2)
    ceb4:	e0bffe17 	ldw	r2,-8(fp)
    ceb8:	1880040e 	bge	r3,r2,cecc <alt_get_fd+0x90>
      {
        alt_max_fd = i;
    cebc:	00c00074 	movhi	r3,1
    cec0:	18fc5f04 	addi	r3,r3,-3716
    cec4:	e0bffe17 	ldw	r2,-8(fp)
    cec8:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    cecc:	e0bffe17 	ldw	r2,-8(fp)
    ced0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    ced4:	00000606 	br	cef0 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    ced8:	e0bffe17 	ldw	r2,-8(fp)
    cedc:	10800044 	addi	r2,r2,1
    cee0:	e0bffe15 	stw	r2,-8(fp)
    cee4:	e0bffe17 	ldw	r2,-8(fp)
    cee8:	10800810 	cmplti	r2,r2,32
    ceec:	103fdd1e 	bne	r2,zero,ce64 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    cef0:	e0bffd17 	ldw	r2,-12(fp)
}
    cef4:	e037883a 	mov	sp,fp
    cef8:	dfc00217 	ldw	ra,8(sp)
    cefc:	df000117 	ldw	fp,4(sp)
    cf00:	dc000017 	ldw	r16,0(sp)
    cf04:	dec00304 	addi	sp,sp,12
    cf08:	f800283a 	ret

0000cf0c <atexit>:
    cf0c:	200b883a 	mov	r5,r4
    cf10:	000d883a 	mov	r6,zero
    cf14:	0009883a 	mov	r4,zero
    cf18:	000f883a 	mov	r7,zero
    cf1c:	000cfcc1 	jmpi	cfcc <__register_exitproc>

0000cf20 <exit>:
    cf20:	defffe04 	addi	sp,sp,-8
    cf24:	000b883a 	mov	r5,zero
    cf28:	dc000015 	stw	r16,0(sp)
    cf2c:	dfc00115 	stw	ra,4(sp)
    cf30:	2021883a 	mov	r16,r4
    cf34:	000d1040 	call	d104 <__call_exitprocs>
    cf38:	00800074 	movhi	r2,1
    cf3c:	10bc5604 	addi	r2,r2,-3752
    cf40:	11000017 	ldw	r4,0(r2)
    cf44:	20800f17 	ldw	r2,60(r4)
    cf48:	10000126 	beq	r2,zero,cf50 <exit+0x30>
    cf4c:	103ee83a 	callr	r2
    cf50:	8009883a 	mov	r4,r16
    cf54:	000d2f40 	call	d2f4 <_exit>

0000cf58 <memcmp>:
    cf58:	00c000c4 	movi	r3,3
    cf5c:	1980032e 	bgeu	r3,r6,cf6c <memcmp+0x14>
    cf60:	2144b03a 	or	r2,r4,r5
    cf64:	10c4703a 	and	r2,r2,r3
    cf68:	10000f26 	beq	r2,zero,cfa8 <memcmp+0x50>
    cf6c:	31ffffc4 	addi	r7,r6,-1
    cf70:	3000061e 	bne	r6,zero,cf8c <memcmp+0x34>
    cf74:	00000a06 	br	cfa0 <memcmp+0x48>
    cf78:	39ffffc4 	addi	r7,r7,-1
    cf7c:	00bfffc4 	movi	r2,-1
    cf80:	21000044 	addi	r4,r4,1
    cf84:	29400044 	addi	r5,r5,1
    cf88:	38800526 	beq	r7,r2,cfa0 <memcmp+0x48>
    cf8c:	20c00003 	ldbu	r3,0(r4)
    cf90:	28800003 	ldbu	r2,0(r5)
    cf94:	18bff826 	beq	r3,r2,cf78 <memcmp+0x20>
    cf98:	1885c83a 	sub	r2,r3,r2
    cf9c:	f800283a 	ret
    cfa0:	0005883a 	mov	r2,zero
    cfa4:	f800283a 	ret
    cfa8:	180f883a 	mov	r7,r3
    cfac:	20c00017 	ldw	r3,0(r4)
    cfb0:	28800017 	ldw	r2,0(r5)
    cfb4:	18bfed1e 	bne	r3,r2,cf6c <memcmp+0x14>
    cfb8:	31bfff04 	addi	r6,r6,-4
    cfbc:	21000104 	addi	r4,r4,4
    cfc0:	29400104 	addi	r5,r5,4
    cfc4:	39bff936 	bltu	r7,r6,cfac <memcmp+0x54>
    cfc8:	003fe806 	br	cf6c <memcmp+0x14>

0000cfcc <__register_exitproc>:
    cfcc:	defffa04 	addi	sp,sp,-24
    cfd0:	00800074 	movhi	r2,1
    cfd4:	10bc5604 	addi	r2,r2,-3752
    cfd8:	dc000015 	stw	r16,0(sp)
    cfdc:	14000017 	ldw	r16,0(r2)
    cfe0:	dd000415 	stw	r20,16(sp)
    cfe4:	2829883a 	mov	r20,r5
    cfe8:	81405217 	ldw	r5,328(r16)
    cfec:	dcc00315 	stw	r19,12(sp)
    cff0:	dc800215 	stw	r18,8(sp)
    cff4:	dc400115 	stw	r17,4(sp)
    cff8:	dfc00515 	stw	ra,20(sp)
    cffc:	2023883a 	mov	r17,r4
    d000:	3027883a 	mov	r19,r6
    d004:	3825883a 	mov	r18,r7
    d008:	28002526 	beq	r5,zero,d0a0 <__register_exitproc+0xd4>
    d00c:	29000117 	ldw	r4,4(r5)
    d010:	008007c4 	movi	r2,31
    d014:	11002716 	blt	r2,r4,d0b4 <__register_exitproc+0xe8>
    d018:	8800101e 	bne	r17,zero,d05c <__register_exitproc+0x90>
    d01c:	2105883a 	add	r2,r4,r4
    d020:	1085883a 	add	r2,r2,r2
    d024:	20c00044 	addi	r3,r4,1
    d028:	1145883a 	add	r2,r2,r5
    d02c:	0009883a 	mov	r4,zero
    d030:	15000215 	stw	r20,8(r2)
    d034:	28c00115 	stw	r3,4(r5)
    d038:	2005883a 	mov	r2,r4
    d03c:	dfc00517 	ldw	ra,20(sp)
    d040:	dd000417 	ldw	r20,16(sp)
    d044:	dcc00317 	ldw	r19,12(sp)
    d048:	dc800217 	ldw	r18,8(sp)
    d04c:	dc400117 	ldw	r17,4(sp)
    d050:	dc000017 	ldw	r16,0(sp)
    d054:	dec00604 	addi	sp,sp,24
    d058:	f800283a 	ret
    d05c:	29802204 	addi	r6,r5,136
    d060:	00800044 	movi	r2,1
    d064:	110e983a 	sll	r7,r2,r4
    d068:	30c04017 	ldw	r3,256(r6)
    d06c:	2105883a 	add	r2,r4,r4
    d070:	1085883a 	add	r2,r2,r2
    d074:	1185883a 	add	r2,r2,r6
    d078:	19c6b03a 	or	r3,r3,r7
    d07c:	14802015 	stw	r18,128(r2)
    d080:	14c00015 	stw	r19,0(r2)
    d084:	00800084 	movi	r2,2
    d088:	30c04015 	stw	r3,256(r6)
    d08c:	88bfe31e 	bne	r17,r2,d01c <__register_exitproc+0x50>
    d090:	30804117 	ldw	r2,260(r6)
    d094:	11c4b03a 	or	r2,r2,r7
    d098:	30804115 	stw	r2,260(r6)
    d09c:	003fdf06 	br	d01c <__register_exitproc+0x50>
    d0a0:	00800074 	movhi	r2,1
    d0a4:	10838404 	addi	r2,r2,3600
    d0a8:	100b883a 	mov	r5,r2
    d0ac:	80805215 	stw	r2,328(r16)
    d0b0:	003fd606 	br	d00c <__register_exitproc+0x40>
    d0b4:	00800034 	movhi	r2,0
    d0b8:	10800004 	addi	r2,r2,0
    d0bc:	1000021e 	bne	r2,zero,d0c8 <__register_exitproc+0xfc>
    d0c0:	013fffc4 	movi	r4,-1
    d0c4:	003fdc06 	br	d038 <__register_exitproc+0x6c>
    d0c8:	01006404 	movi	r4,400
    d0cc:	103ee83a 	callr	r2
    d0d0:	1007883a 	mov	r3,r2
    d0d4:	103ffa26 	beq	r2,zero,d0c0 <__register_exitproc+0xf4>
    d0d8:	80805217 	ldw	r2,328(r16)
    d0dc:	180b883a 	mov	r5,r3
    d0e0:	18000115 	stw	zero,4(r3)
    d0e4:	18800015 	stw	r2,0(r3)
    d0e8:	80c05215 	stw	r3,328(r16)
    d0ec:	18006215 	stw	zero,392(r3)
    d0f0:	18006315 	stw	zero,396(r3)
    d0f4:	0009883a 	mov	r4,zero
    d0f8:	883fc826 	beq	r17,zero,d01c <__register_exitproc+0x50>
    d0fc:	003fd706 	br	d05c <__register_exitproc+0x90>

0000d100 <register_fini>:
    d100:	f800283a 	ret

0000d104 <__call_exitprocs>:
    d104:	00800074 	movhi	r2,1
    d108:	10bc5604 	addi	r2,r2,-3752
    d10c:	10800017 	ldw	r2,0(r2)
    d110:	defff304 	addi	sp,sp,-52
    d114:	df000b15 	stw	fp,44(sp)
    d118:	d8800115 	stw	r2,4(sp)
    d11c:	00800034 	movhi	r2,0
    d120:	10800004 	addi	r2,r2,0
    d124:	1005003a 	cmpeq	r2,r2,zero
    d128:	d8800215 	stw	r2,8(sp)
    d12c:	d8800117 	ldw	r2,4(sp)
    d130:	dd400815 	stw	r21,32(sp)
    d134:	dd000715 	stw	r20,28(sp)
    d138:	10805204 	addi	r2,r2,328
    d13c:	dfc00c15 	stw	ra,48(sp)
    d140:	ddc00a15 	stw	r23,40(sp)
    d144:	dd800915 	stw	r22,36(sp)
    d148:	dcc00615 	stw	r19,24(sp)
    d14c:	dc800515 	stw	r18,20(sp)
    d150:	dc400415 	stw	r17,16(sp)
    d154:	dc000315 	stw	r16,12(sp)
    d158:	282b883a 	mov	r21,r5
    d15c:	2039883a 	mov	fp,r4
    d160:	d8800015 	stw	r2,0(sp)
    d164:	2829003a 	cmpeq	r20,r5,zero
    d168:	d8800117 	ldw	r2,4(sp)
    d16c:	14405217 	ldw	r17,328(r2)
    d170:	88001026 	beq	r17,zero,d1b4 <__call_exitprocs+0xb0>
    d174:	ddc00017 	ldw	r23,0(sp)
    d178:	88800117 	ldw	r2,4(r17)
    d17c:	8c802204 	addi	r18,r17,136
    d180:	143fffc4 	addi	r16,r2,-1
    d184:	80000916 	blt	r16,zero,d1ac <__call_exitprocs+0xa8>
    d188:	05bfffc4 	movi	r22,-1
    d18c:	a000151e 	bne	r20,zero,d1e4 <__call_exitprocs+0xe0>
    d190:	8409883a 	add	r4,r16,r16
    d194:	2105883a 	add	r2,r4,r4
    d198:	1485883a 	add	r2,r2,r18
    d19c:	10c02017 	ldw	r3,128(r2)
    d1a0:	a8c01126 	beq	r21,r3,d1e8 <__call_exitprocs+0xe4>
    d1a4:	843fffc4 	addi	r16,r16,-1
    d1a8:	85bff81e 	bne	r16,r22,d18c <__call_exitprocs+0x88>
    d1ac:	d8800217 	ldw	r2,8(sp)
    d1b0:	10003126 	beq	r2,zero,d278 <__call_exitprocs+0x174>
    d1b4:	dfc00c17 	ldw	ra,48(sp)
    d1b8:	df000b17 	ldw	fp,44(sp)
    d1bc:	ddc00a17 	ldw	r23,40(sp)
    d1c0:	dd800917 	ldw	r22,36(sp)
    d1c4:	dd400817 	ldw	r21,32(sp)
    d1c8:	dd000717 	ldw	r20,28(sp)
    d1cc:	dcc00617 	ldw	r19,24(sp)
    d1d0:	dc800517 	ldw	r18,20(sp)
    d1d4:	dc400417 	ldw	r17,16(sp)
    d1d8:	dc000317 	ldw	r16,12(sp)
    d1dc:	dec00d04 	addi	sp,sp,52
    d1e0:	f800283a 	ret
    d1e4:	8409883a 	add	r4,r16,r16
    d1e8:	88c00117 	ldw	r3,4(r17)
    d1ec:	2105883a 	add	r2,r4,r4
    d1f0:	1445883a 	add	r2,r2,r17
    d1f4:	18ffffc4 	addi	r3,r3,-1
    d1f8:	11800217 	ldw	r6,8(r2)
    d1fc:	1c001526 	beq	r3,r16,d254 <__call_exitprocs+0x150>
    d200:	10000215 	stw	zero,8(r2)
    d204:	303fe726 	beq	r6,zero,d1a4 <__call_exitprocs+0xa0>
    d208:	00c00044 	movi	r3,1
    d20c:	1c06983a 	sll	r3,r3,r16
    d210:	90804017 	ldw	r2,256(r18)
    d214:	8cc00117 	ldw	r19,4(r17)
    d218:	1884703a 	and	r2,r3,r2
    d21c:	10001426 	beq	r2,zero,d270 <__call_exitprocs+0x16c>
    d220:	90804117 	ldw	r2,260(r18)
    d224:	1884703a 	and	r2,r3,r2
    d228:	10000c1e 	bne	r2,zero,d25c <__call_exitprocs+0x158>
    d22c:	2105883a 	add	r2,r4,r4
    d230:	1485883a 	add	r2,r2,r18
    d234:	11400017 	ldw	r5,0(r2)
    d238:	e009883a 	mov	r4,fp
    d23c:	303ee83a 	callr	r6
    d240:	88800117 	ldw	r2,4(r17)
    d244:	98bfc81e 	bne	r19,r2,d168 <__call_exitprocs+0x64>
    d248:	b8800017 	ldw	r2,0(r23)
    d24c:	147fd526 	beq	r2,r17,d1a4 <__call_exitprocs+0xa0>
    d250:	003fc506 	br	d168 <__call_exitprocs+0x64>
    d254:	8c000115 	stw	r16,4(r17)
    d258:	003fea06 	br	d204 <__call_exitprocs+0x100>
    d25c:	2105883a 	add	r2,r4,r4
    d260:	1485883a 	add	r2,r2,r18
    d264:	11000017 	ldw	r4,0(r2)
    d268:	303ee83a 	callr	r6
    d26c:	003ff406 	br	d240 <__call_exitprocs+0x13c>
    d270:	303ee83a 	callr	r6
    d274:	003ff206 	br	d240 <__call_exitprocs+0x13c>
    d278:	88800117 	ldw	r2,4(r17)
    d27c:	1000081e 	bne	r2,zero,d2a0 <__call_exitprocs+0x19c>
    d280:	89000017 	ldw	r4,0(r17)
    d284:	20000726 	beq	r4,zero,d2a4 <__call_exitprocs+0x1a0>
    d288:	b9000015 	stw	r4,0(r23)
    d28c:	8809883a 	mov	r4,r17
    d290:	00000000 	call	0 <__alt_mem_sdram>
    d294:	bc400017 	ldw	r17,0(r23)
    d298:	883fb71e 	bne	r17,zero,d178 <__call_exitprocs+0x74>
    d29c:	003fc506 	br	d1b4 <__call_exitprocs+0xb0>
    d2a0:	89000017 	ldw	r4,0(r17)
    d2a4:	882f883a 	mov	r23,r17
    d2a8:	2023883a 	mov	r17,r4
    d2ac:	883fb21e 	bne	r17,zero,d178 <__call_exitprocs+0x74>
    d2b0:	003fc006 	br	d1b4 <__call_exitprocs+0xb0>

0000d2b4 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    d2b4:	defffd04 	addi	sp,sp,-12
    d2b8:	df000215 	stw	fp,8(sp)
    d2bc:	df000204 	addi	fp,sp,8
    d2c0:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    d2c4:	e0bfff17 	ldw	r2,-4(fp)
    d2c8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    d2cc:	e0bffe17 	ldw	r2,-8(fp)
    d2d0:	1005003a 	cmpeq	r2,r2,zero
    d2d4:	1000021e 	bne	r2,zero,d2e0 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    d2d8:	002af070 	cmpltui	zero,zero,43969
    d2dc:	00000106 	br	d2e4 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    d2e0:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    d2e4:	e037883a 	mov	sp,fp
    d2e8:	df000017 	ldw	fp,0(sp)
    d2ec:	dec00104 	addi	sp,sp,4
    d2f0:	f800283a 	ret

0000d2f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    d2f4:	defffd04 	addi	sp,sp,-12
    d2f8:	dfc00215 	stw	ra,8(sp)
    d2fc:	df000115 	stw	fp,4(sp)
    d300:	df000104 	addi	fp,sp,4
    d304:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    d308:	e13fff17 	ldw	r4,-4(fp)
    d30c:	000d2b40 	call	d2b4 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    d310:	003fff06 	br	d310 <_exit+0x1c>
    d314:	0000d100 	call	d10 <___vfprintf_internal_r+0x88c>
