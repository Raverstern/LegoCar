module pulse_senor_read(clk,reset_n,chipselect,address,write,writedata,read,byteenable,readdata,pulse_in);
// this module is used to read the lacation senor and angle senor in inverted pendulum application
// pulse_in[0] connected to A port  
//Gang Chen @ Fortiss Fb2 
input clk;
input reset_n;
input chipselect;
input [1:0]address; 
input write;  
input [31:0] writedata;  
input read;  
input [3:0] byteenable;  
output [31:0] readdata; 
input [1:0]pulse_in;  

reg [31:0] previous_count;   
reg [31:0] current_count;   
reg [7:0] control_reg;  
reg [7:0] state_reg;   

reg  previous_count_sel;   
reg  current_count_sel;   
reg  control_reg_sel;  
reg  state_reg_sel;

reg [31:0] readdata;    

wire clear_count;
reg pio_state1;
reg pio_state2;
//reg [31:0] snap_count;


assign clear_count=control_reg[0];
//function apart
always@(posedge clk or negedge reset_n)
	begin 
		if(!reset_n)
			begin
				pio_state1<=0;
				pio_state2<=0;
			end
		else
			begin
				pio_state1<=pulse_in[0];
				pio_state2<=pio_state1;
			end
	end

always@(posedge clk or negedge reset_n)
	begin 
		if(!reset_n)
			begin
				current_count<=32'h80000000;
			end
		else
			begin
				if(clear_count)
					begin
						current_count<=32'h80000000;
					end
				else
					if(pio_state1==1&&pio_state2==0)
						begin
							if(pulse_in[1])
								current_count<=current_count+1;
							else
								current_count<=current_count-1;
						end
			end
	end

//bus interface
always @ (address)  
begin  
    previous_count_sel<=0;  
    current_count_sel<=0;  
    control_reg_sel<=0;
	state_reg_sel<=0;
    case(address)  
        2'b00:previous_count_sel<=1;  
        2'b01:current_count_sel<=1;  
        2'b10:control_reg_sel<=1;  
		  2'b11:state_reg_sel<=1;	
     endcase  
end 

//wirte control register 
always @ (posedge clk or negedge reset_n)  
begin  
	if(!reset_n)   
		control_reg=0;  
	else 
		begin  
			if(write & chipselect & control_reg_sel)  
				begin  
				if(byteenable[0])  control_reg<=writedata[7:0];  
				end  
		end  
end

//wirte state register 
always @ (posedge clk or negedge reset_n)  
begin  
	if(!reset_n)   
		state_reg=0;  
	else 
		begin  
			if(write & chipselect & state_reg_sel)  
				begin  
				if(byteenable[0])  state_reg<=writedata[7:0];  
				end  
		end  
end

//read register 
always @ (address or read or previous_count or current_count or control_reg or state_reg or chipselect)  
begin  
    if(read & chipselect)  
         case(address)  
             2'b00:
				begin
				readdata<=previous_count;
				end				
             2'b01:
				begin
				readdata<=current_count;
				//snap_count<=current_count;
				//previous_count<=snap_count;
				end				
             2'b10:
				begin
				readdata<=control_reg;
				end				
             2'b11:
				begin
				readdata<=state_reg;
				end
         endcase   
end
endmodule 